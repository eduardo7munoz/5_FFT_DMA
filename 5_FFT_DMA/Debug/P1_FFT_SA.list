
P1_FFT_SA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002474  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011ee8  080025fc  080025fc  000125fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080144e4  080144e4  0003000c  2**0
                  CONTENTS
  4 .ARM          00000000  080144e4  080144e4  0003000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080144e4  080144e4  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080144e4  080144e4  000244e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080144e8  080144e8  000244e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080144ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080144f8  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080144f8  0003002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f94  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d57  00000000  00000000  00048fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000730  00000000  00000000  0004bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  0004c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025cfc  00000000  00000000  0004d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c539  00000000  00000000  00072de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5f02  00000000  00000000  0007f31d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  0016521f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001814  00000000  00000000  001652e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000069ab  00000000  00000000  00166afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025e4 	.word	0x080025e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080025e4 	.word	0x080025e4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <ADC_init>:
 *      Author: eduardomunoz
 */
#include "ADC.h"

void ADC_init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
    //enable ADC on RCC
    RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 80001dc:	4b54      	ldr	r3, [pc, #336]	; (8000330 <ADC_init+0x158>)
 80001de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e0:	4a53      	ldr	r2, [pc, #332]	; (8000330 <ADC_init+0x158>)
 80001e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001e6:	64d3      	str	r3, [r2, #76]	; 0x4c
    //set ADC to use HCLK
    ADC123_COMMON-> CCR = (ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE))|
 80001e8:	4b52      	ldr	r3, [pc, #328]	; (8000334 <ADC_init+0x15c>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80001f0:	4a50      	ldr	r2, [pc, #320]	; (8000334 <ADC_init+0x15c>)
 80001f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001f6:	6093      	str	r3, [r2, #8]
            (1<<ADC_CCR_CKMODE_Pos);

    //take ADC out of deep power down mode
    ADC1->CR &= ~(ADC_CR_DEEPPWD);
 80001f8:	4b4f      	ldr	r3, [pc, #316]	; (8000338 <ADC_init+0x160>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	4a4e      	ldr	r2, [pc, #312]	; (8000338 <ADC_init+0x160>)
 80001fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000202:	6093      	str	r3, [r2, #8]
    //and turn on the voltage regulator
    ADC1->CR |= (ADC_CR_ADVREGEN);
 8000204:	4b4c      	ldr	r3, [pc, #304]	; (8000338 <ADC_init+0x160>)
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	4a4b      	ldr	r2, [pc, #300]	; (8000338 <ADC_init+0x160>)
 800020a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800020e:	6093      	str	r3, [r2, #8]

    //    delay_us(20);  //wait 20us for ADC to power up
    HAL_Delay(1);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fd0f 	bl	8000c34 <HAL_Delay>


    //single ended calibration, ensure ADC is disabled
    ADC1->CR &= ~(ADC_CR_ADEN |ADC_CR_ADCALDIF);
 8000216:	4b48      	ldr	r3, [pc, #288]	; (8000338 <ADC_init+0x160>)
 8000218:	689b      	ldr	r3, [r3, #8]
 800021a:	4a47      	ldr	r2, [pc, #284]	; (8000338 <ADC_init+0x160>)
 800021c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000220:	f023 0301 	bic.w	r3, r3, #1
 8000224:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (ADC_CR_ADCAL);
 8000226:	4b44      	ldr	r3, [pc, #272]	; (8000338 <ADC_init+0x160>)
 8000228:	689b      	ldr	r3, [r3, #8]
 800022a:	4a43      	ldr	r2, [pc, #268]	; (8000338 <ADC_init+0x160>)
 800022c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000230:	6093      	str	r3, [r2, #8]
    while(ADC1->CR & ADC_CR_ADCAL); //wait for ADCAL to become
 8000232:	bf00      	nop
 8000234:	4b40      	ldr	r3, [pc, #256]	; (8000338 <ADC_init+0x160>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	2b00      	cmp	r3, #0
 800023a:	dbfb      	blt.n	8000234 <ADC_init+0x5c>

    //configure single ended for channel 5
    ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 800023c:	4b3e      	ldr	r3, [pc, #248]	; (8000338 <ADC_init+0x160>)
 800023e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000242:	4a3d      	ldr	r2, [pc, #244]	; (8000338 <ADC_init+0x160>)
 8000244:	f023 0320 	bic.w	r3, r3, #32
 8000248:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    //enable ADC FINALLY!!!!! (software procedure to enable the ADC)
    ADC1-> ISR |= (ADC_ISR_ADRDY);
 800024c:	4b3a      	ldr	r3, [pc, #232]	; (8000338 <ADC_init+0x160>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a39      	ldr	r2, [pc, #228]	; (8000338 <ADC_init+0x160>)
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6013      	str	r3, [r2, #0]
    ADC1->CR   |= (ADC_CR_ADEN);
 8000258:	4b37      	ldr	r3, [pc, #220]	; (8000338 <ADC_init+0x160>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a36      	ldr	r2, [pc, #216]	; (8000338 <ADC_init+0x160>)
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6093      	str	r3, [r2, #8]
    while(!(ADC1->ISR & ADC_ISR_ADRDY)); //wait for ADRDY to become
 8000264:	bf00      	nop
 8000266:	4b34      	ldr	r3, [pc, #208]	; (8000338 <ADC_init+0x160>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d0f9      	beq.n	8000266 <ADC_init+0x8e>
    ADC1-> ISR |= ADC_ISR_ADRDY; //clear ADRDY bit
 8000272:	4b31      	ldr	r3, [pc, #196]	; (8000338 <ADC_init+0x160>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a30      	ldr	r2, [pc, #192]	; (8000338 <ADC_init+0x160>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6013      	str	r3, [r2, #0]

    //configure ADC
    //12-bit resolution so set to 00
    ADC1 -> CFGR &= ~(ADC_CFGR_RES);
 800027e:	4b2e      	ldr	r3, [pc, #184]	; (8000338 <ADC_init+0x160>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	4a2d      	ldr	r2, [pc, #180]	; (8000338 <ADC_init+0x160>)
 8000284:	f023 0318 	bic.w	r3, r3, #24
 8000288:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_DMACFG); //enable dma circ mode
 800028a:	4b2b      	ldr	r3, [pc, #172]	; (8000338 <ADC_init+0x160>)
 800028c:	68db      	ldr	r3, [r3, #12]
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <ADC_init+0x160>)
 8000290:	f043 0302 	orr.w	r3, r3, #2
 8000294:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_DMAEN); //enable dma
 8000296:	4b28      	ldr	r3, [pc, #160]	; (8000338 <ADC_init+0x160>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a27      	ldr	r2, [pc, #156]	; (8000338 <ADC_init+0x160>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	60d3      	str	r3, [r2, #12]


    //trigger off of extsel
    ADC1 -> CFGR |= ADC_CFGR_EXTEN_0|ADC_CFGR_EXTEN_1;//enables triggers of external rising edge
 80002a2:	4b25      	ldr	r3, [pc, #148]	; (8000338 <ADC_init+0x160>)
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	4a24      	ldr	r2, [pc, #144]	; (8000338 <ADC_init+0x160>)
 80002a8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80002ac:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR &= ~(ADC_CFGR_EXTSEL); //clear bits
 80002ae:	4b22      	ldr	r3, [pc, #136]	; (8000338 <ADC_init+0x160>)
 80002b0:	68db      	ldr	r3, [r3, #12]
 80002b2:	4a21      	ldr	r2, [pc, #132]	; (8000338 <ADC_init+0x160>)
 80002b4:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80002b8:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_EXTSEL_0|ADC_CFGR_EXTSEL_1); //EXT3 TIM2CH2 011
 80002ba:	4b1f      	ldr	r3, [pc, #124]	; (8000338 <ADC_init+0x160>)
 80002bc:	68db      	ldr	r3, [r3, #12]
 80002be:	4a1e      	ldr	r2, [pc, #120]	; (8000338 <ADC_init+0x160>)
 80002c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002c4:	60d3      	str	r3, [r2, #12]

    //sampling time on channel 5 is 2.5 clocks
    ADC1->SMPR1 &= ~(ADC_SMPR1_SMP5);
 80002c6:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <ADC_init+0x160>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a1b      	ldr	r2, [pc, #108]	; (8000338 <ADC_init+0x160>)
 80002cc:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 80002d0:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (ADC_SMPR1_SMP5_0 | ADC_SMPR1_SMP5_1 |ADC_SMPR1_SMP5_2);
 80002d2:	4b19      	ldr	r3, [pc, #100]	; (8000338 <ADC_init+0x160>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a18      	ldr	r2, [pc, #96]	; (8000338 <ADC_init+0x160>)
 80002d8:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 80002dc:	6153      	str	r3, [r2, #20]

    //put channel 5 in the regular sequence, length of 1
    ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1 | ADC_SQR1_L))|
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <ADC_init+0x160>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	f423 63f9 	bic.w	r3, r3, #1992	; 0x7c8
 80002e6:	f023 0307 	bic.w	r3, r3, #7
 80002ea:	4a13      	ldr	r2, [pc, #76]	; (8000338 <ADC_init+0x160>)
 80002ec:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
            (5 << ADC_SQR1_SQ1_Pos);

    //configure GPIO PA0 for analog input
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <ADC_init+0x158>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <ADC_init+0x158>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA ->MODER |= (GPIO_MODER_MODE0); //analog mode
 80002fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000308:	f043 0303 	orr.w	r3, r3, #3
 800030c:	6013      	str	r3, [r2, #0]
    GPIOA ->ASCR |= GPIO_ASCR_ASC0;      //connect analog PA0
 800030e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000314:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	62d3      	str	r3, [r2, #44]	; 0x2c

    //start regular sequence
    ADC1->CR |= ADC_CR_ADSTART;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <ADC_init+0x160>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <ADC_init+0x160>)
 8000324:	f043 0304 	orr.w	r3, r3, #4
 8000328:	6093      	str	r3, [r2, #8]
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40021000 	.word	0x40021000
 8000334:	50040300 	.word	0x50040300
 8000338:	50040000 	.word	0x50040000

0800033c <DMA1channel1_ADC_init>:


}

void DMA1channel1_ADC_init(uint32_t * dest)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	//enabling clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000344:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <DMA1channel1_ADC_init+0x9c>)
 8000346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000348:	4a23      	ldr	r2, [pc, #140]	; (80003d8 <DMA1channel1_ADC_init+0x9c>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6493      	str	r3, [r2, #72]	; 0x48

    //memory to memory initialization
	DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S); //select dma channel
 8000350:	4b22      	ldr	r3, [pc, #136]	; (80003dc <DMA1channel1_ADC_init+0xa0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a21      	ldr	r2, [pc, #132]	; (80003dc <DMA1channel1_ADC_init+0xa0>)
 8000356:	f023 030f 	bic.w	r3, r3, #15
 800035a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR); //with DIR set to 0 this is the source address
 800035c:	4b20      	ldr	r3, [pc, #128]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 800035e:	4a21      	ldr	r2, [pc, #132]	; (80003e4 <DMA1channel1_ADC_init+0xa8>)
 8000360:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(dest); // with DIR set to 0 this is the destination address
 8000362:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	60d3      	str	r3, [r2, #12]
	DMA1_Channel1->CNDTR = NUM_TO_COPY;  // number to copy
 8000368:	4b1d      	ldr	r3, [pc, #116]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 800036a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800036e:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR); //setting DIR to 0
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a1a      	ldr	r2, [pc, #104]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 8000376:	f023 0310 	bic.w	r3, r3, #16
 800037a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC); //enable circular mode
 800037c:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a17      	ldr	r2, [pc, #92]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 8000382:	f043 0320 	orr.w	r3, r3, #32
 8000386:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MINC); //increments address
 8000388:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 800038e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000392:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);//keeps address the same
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a11      	ldr	r2, [pc, #68]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 800039a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800039e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR = ((DMA1_Channel1->CCR)&~(DMA_CCR_MSIZE))|(DMA_CCR_MSIZE_0);//clearing size and setting length to 16bits
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003a8:	4a0d      	ldr	r2, [pc, #52]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 80003aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003ae:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR = ((DMA1_Channel1->CCR)&~(DMA_CCR_PSIZE))|(DMA_CCR_PSIZE_0);//clearing size and setting length to 16bits
 80003b0:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 80003ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003be:	6013      	str	r3, [r2, #0]


//	NVIC->ISER[0] = (1<<(DMA1_Channel1_IRQn & 0x1F)); //enable interrupts for channel 1
//	__enable_irq();

	DMA1_Channel1->CCR |= (DMA_CCR_EN); //activating channel
 80003c0:	4b07      	ldr	r3, [pc, #28]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a06      	ldr	r2, [pc, #24]	; (80003e0 <DMA1channel1_ADC_init+0xa4>)
 80003c6:	f043 0301 	orr.w	r3, r3, #1
 80003ca:	6013      	str	r3, [r2, #0]

}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40021000 	.word	0x40021000
 80003dc:	400200a8 	.word	0x400200a8
 80003e0:	40020008 	.word	0x40020008
 80003e4:	50040040 	.word	0x50040040

080003e8 <DMA1_Channel3_IRQHandler>:



void DMA1_Channel3_IRQHandler()
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF3)
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d01d      	beq.n	8000434 <DMA1_Channel3_IRQHandler+0x4c>
	{
	  	GPIOC->ODR ^= GPIO_ODR_OD1; //toggle off
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <DMA1_Channel3_IRQHandler+0x5c>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	4a11      	ldr	r2, [pc, #68]	; (8000444 <DMA1_Channel3_IRQHandler+0x5c>)
 80003fe:	f083 0302 	eor.w	r3, r3, #2
 8000402:	6153      	str	r3, [r2, #20]
		  DMA1_Channel3->CCR &= ~(DMA_CCR_EN); //disable channel 3
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <DMA1_Channel3_IRQHandler+0x60>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <DMA1_Channel3_IRQHandler+0x60>)
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	6013      	str	r3, [r2, #0]
		  DMA1->IFCR |= (DMA_IFCR_CTCIF3); //clear interrupt flag
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041a:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CGIF3); //clear global interrupt flag
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 8000422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000426:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CHTIF3); //clear half transfer flag
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <DMA1_Channel3_IRQHandler+0x58>)
 800042e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000432:	6053      	str	r3, [r2, #4]

	}
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40020000 	.word	0x40020000
 8000444:	48000800 	.word	0x48000800
 8000448:	40020030 	.word	0x40020030

0800044c <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler()
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

	if(DMA1->ISR & DMA_ISR_HTIF1)
 8000450:	4b11      	ldr	r3, [pc, #68]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	2b00      	cmp	r3, #0
 800045a:	d006      	beq.n	800046a <DMA1_Channel1_IRQHandler+0x1e>
	{
		DMA1->IFCR |= (DMA_IFCR_CHTIF1); //clear half transfer flag
 800045c:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 8000462:	f043 0304 	orr.w	r3, r3, #4
 8000466:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear interrupt flag
		  DMA1->IFCR |= (DMA_IFCR_CGIF1); //clear global interrupt flag

	}

}
 8000468:	e011      	b.n	800048e <DMA1_Channel1_IRQHandler+0x42>
	else if(DMA1->ISR & DMA_ISR_TCIF1)
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	2b00      	cmp	r3, #0
 8000474:	d00b      	beq.n	800048e <DMA1_Channel1_IRQHandler+0x42>
		  DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear interrupt flag
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	4a07      	ldr	r2, [pc, #28]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CGIF1); //clear global interrupt flag
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	4a04      	ldr	r2, [pc, #16]	; (8000498 <DMA1_Channel1_IRQHandler+0x4c>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6053      	str	r3, [r2, #4]
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40020000 	.word	0x40020000

0800049c <GPIO_init>:
 */
#include "GPIO.h"
#include "main.h"

void GPIO_init()
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

	//setup on PC0 for toggling output
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN); //enable clock
 80004a0:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <GPIO_init+0x7c>)
 80004a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a4:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <GPIO_init+0x7c>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE0); //clearing bits setting to input
 80004ac:	4b1b      	ldr	r3, [pc, #108]	; (800051c <GPIO_init+0x80>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a1a      	ldr	r2, [pc, #104]	; (800051c <GPIO_init+0x80>)
 80004b2:	f023 0303 	bic.w	r3, r3, #3
 80004b6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0); //setting output;
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <GPIO_init+0x80>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a17      	ldr	r2, [pc, #92]	; (800051c <GPIO_init+0x80>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR0); //clear bits
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <GPIO_init+0x80>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <GPIO_init+0x80>)
 80004ca:	f023 0303 	bic.w	r3, r3, #3
 80004ce:	60d3      	str	r3, [r2, #12]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0); //clear bit, set to push pull
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <GPIO_init+0x80>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	4a11      	ldr	r2, [pc, #68]	; (800051c <GPIO_init+0x80>)
 80004d6:	f023 0301 	bic.w	r3, r3, #1
 80004da:	6053      	str	r3, [r2, #4]

	GPIOC->MODER &= ~(GPIO_MODER_MODE1); //clearing bits setting to input
 80004dc:	4b0f      	ldr	r3, [pc, #60]	; (800051c <GPIO_init+0x80>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0e      	ldr	r2, [pc, #56]	; (800051c <GPIO_init+0x80>)
 80004e2:	f023 030c 	bic.w	r3, r3, #12
 80004e6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE1_0); //setting output;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <GPIO_init+0x80>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <GPIO_init+0x80>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR1); //clear bits
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <GPIO_init+0x80>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <GPIO_init+0x80>)
 80004fa:	f023 030c 	bic.w	r3, r3, #12
 80004fe:	60d3      	str	r3, [r2, #12]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT1); //clear bit, set to push pull
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <GPIO_init+0x80>)
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	4a05      	ldr	r2, [pc, #20]	; (800051c <GPIO_init+0x80>)
 8000506:	f023 0302 	bic.w	r3, r3, #2
 800050a:	6053      	str	r3, [r2, #4]


}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	48000800 	.word	0x48000800

08000520 <UART_Init>:
#include <string.h>



void UART_Init()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

	//Will be utilizing GPIOA Ports A2(TX) and A3(RX) for USART2
	GPIOA->AFR[0] =  (GPIOA->AFR[0]&~(GPIO_AFRL_AFSEL3_Msk|GPIO_AFRL_AFSEL2_Msk)) | (0x77<<GPIO_AFRL_AFSEL2_Pos);; //makes it AF7 for usart2
 8000524:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000528:	6a1b      	ldr	r3, [r3, #32]
 800052a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800052e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000532:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000536:	6213      	str	r3, [r2, #32]
	GPIOA->MODER = ((GPIOA->MODER) &~ (GPIO_MODER_MODE3_Msk|GPIO_MODER_MODE2_Msk))|(0b1010<<GPIO_MODER_MODE2_Pos); //set as AF
 8000538:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000542:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000546:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800054a:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR = GPIOA->PUPDR &~ (GPIO_PUPDR_PUPD3_Msk|GPIO_PUPDR_PUPD2_Msk); // set pull-up pull-down to 00
 800054c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800055a:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER = GPIOA->OTYPER &~ (GPIO_OTYPER_OT3_Msk|GPIO_OTYPER_OT2_Msk); // set push-pull
 800055c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000566:	f023 030c 	bic.w	r3, r3, #12
 800056a:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN_Msk);
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <UART_Init+0xb0>)
 800056e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000570:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <UART_Init+0xb0>)
 8000572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000576:	6593      	str	r3, [r2, #88]	; 0x58

	//Declare the length of the transmitted word: 8 for ascii
	USART2->CR1 = USART2->CR1 &~ (USART_CR1_M1_Msk|USART_CR1_M0_Msk); //set 0 0 for length 8
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <UART_Init+0xb4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <UART_Init+0xb4>)
 800057e:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000582:	6013      	str	r3, [r2, #0]
	//Declare desired baud rate: for 4M/9600 = 416 also oversampling by 16
	USART2->BRR = BRR_VALUE;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <UART_Init+0xb4>)
 8000586:	f242 028d 	movw	r2, #8333	; 0x208d
 800058a:	60da      	str	r2, [r3, #12]
	//Declare the amount of stop bits: 1
	USART2->CR2 &= ~(USART_CR2_STOP_Msk);
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <UART_Init+0xb4>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	4a10      	ldr	r2, [pc, #64]	; (80005d4 <UART_Init+0xb4>)
 8000592:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000596:	6053      	str	r3, [r2, #4]

	//Usart Enable Bit
	USART2->CR1 |= (USART_CR1_UE);
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <UART_Init+0xb4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a0d      	ldr	r2, [pc, #52]	; (80005d4 <UART_Init+0xb4>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6013      	str	r3, [r2, #0]

	//Transmit And Receive Enable Bits
	USART2->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 80005a4:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <UART_Init+0xb4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <UART_Init+0xb4>)
 80005aa:	f043 030c 	orr.w	r3, r3, #12
 80005ae:	6013      	str	r3, [r2, #0]

	//Receive interrupt enable
	USART2->CR1 |= (USART_CR1_RXNEIE);
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <UART_Init+0xb4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <UART_Init+0xb4>)
 80005b6:	f043 0320 	orr.w	r3, r3, #32
 80005ba:	6013      	str	r3, [r2, #0]

	//enable USART2 ISR in NVIC
	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <UART_Init+0xb8>)
 80005be:	2240      	movs	r2, #64	; 0x40
 80005c0:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80005c2:	b662      	cpsie	i
}
 80005c4:	bf00      	nop


	__enable_irq();
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40004400 	.word	0x40004400
 80005d8:	e000e100 	.word	0xe000e100

080005dc <UART_print>:

void UART_print(char *outputstring)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 80005e4:	2300      	movs	r3, #0
 80005e6:	81fb      	strh	r3, [r7, #14]
 80005e8:	e010      	b.n	800060c <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 80005ea:	bf00      	nop
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <UART_print+0x48>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f9      	beq.n	80005ec <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 80005f8:	89fb      	ldrh	r3, [r7, #14]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <UART_print+0x48>)
 8000602:	b292      	uxth	r2, r2
 8000604:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8000606:	89fb      	ldrh	r3, [r7, #14]
 8000608:	3301      	adds	r3, #1
 800060a:	81fb      	strh	r3, [r7, #14]
 800060c:	89fc      	ldrh	r4, [r7, #14]
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f7ff fdda 	bl	80001c8 <strlen>
 8000614:	4603      	mov	r3, r0
 8000616:	429c      	cmp	r4, r3
 8000618:	d3e7      	bcc.n	80005ea <UART_print+0xe>
	}

}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40004400 	.word	0x40004400

08000628 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
	uint8_t RX = USART2->RDR;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <USART2_IRQHandler+0x40>)
 8000630:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000632:	b29b      	uxth	r3, r3
 8000634:	71fb      	strb	r3, [r7, #7]
	char tempstr[6]={'\0'};
 8000636:	2300      	movs	r3, #0
 8000638:	603b      	str	r3, [r7, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b0d      	cmp	r3, #13
 8000642:	d002      	beq.n	800064a <USART2_IRQHandler+0x22>
 8000644:	2b4a      	cmp	r3, #74	; 0x4a
 8000646:	d007      	beq.n	8000658 <USART2_IRQHandler+0x30>

			if(RX-0x30>=0 && RX-0x30<=9)
			{

			}
				break;
 8000648:	e00a      	b.n	8000660 <USART2_IRQHandler+0x38>
			UART_escapes("[1B");//move down 1 line
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <USART2_IRQHandler+0x44>)
 800064c:	f000 f814 	bl	8000678 <UART_escapes>
			UART_escapes("\r"); //carriage return
 8000650:	4807      	ldr	r0, [pc, #28]	; (8000670 <USART2_IRQHandler+0x48>)
 8000652:	f000 f811 	bl	8000678 <UART_escapes>
			break;
 8000656:	e003      	b.n	8000660 <USART2_IRQHandler+0x38>
			UART_escapes("[2J"); //clear everything
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <USART2_IRQHandler+0x4c>)
 800065a:	f000 f80d 	bl	8000678 <UART_escapes>
			break;
 800065e:	bf00      	nop
	}
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40004400 	.word	0x40004400
 800066c:	080025fc 	.word	0x080025fc
 8000670:	08002600 	.word	0x08002600
 8000674:	08002604 	.word	0x08002604

08000678 <UART_escapes>:

void UART_escapes(char *escstring)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8000680:	bf00      	nop
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <UART_escapes+0x2c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f9      	beq.n	8000682 <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <UART_escapes+0x2c>)
 8000690:	221b      	movs	r2, #27
 8000692:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f7ff ffa1 	bl	80005dc <UART_print>

}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40004400 	.word	0x40004400

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t collectedsamples[LENGTH_OF_ARRAY] = {0}; //create array for 2x size of samples collected per f calculation
 80006b2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80006b6:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006ba:	3b14      	subs	r3, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c2:	461a      	mov	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f001 ff43 	bl	8002550 <memset>
	q15_t testOutput[LENGTH_OF_ARRAY] = {0};
 80006ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ce:	3b14      	subs	r3, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d6:	461a      	mov	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f001 ff39 	bl	8002550 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fa34 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f909 	bl	80008f8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  GPIO_init();
 80006e6:	f7ff fed9 	bl	800049c <GPIO_init>
  ADC_init();
 80006ea:	f7ff fd75 	bl	80001d8 <ADC_init>
  DMA1channel1_ADC_init(collectedsamples);
 80006ee:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80006f2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80006f6:	3b14      	subs	r3, #20
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff fe1f 	bl	800033c <DMA1channel1_ADC_init>
  tim2_init();
 80006fe:	f000 f9b3 	bl	8000a68 <tim2_init>
  UART_Init();
 8000702:	f7ff ff0d 	bl	8000520 <UART_Init>

  q15_t * sampleloc1 =  (q15_t *)&collectedsamples;
 8000706:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800070a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800070e:	3b14      	subs	r3, #20
 8000710:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8000714:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000718:	6013      	str	r3, [r2, #0]
  q15_t * sampleloc2 =  (q15_t *)&collectedsamples[2048];
 800071a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800071e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000722:	3b14      	subs	r3, #20
 8000724:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000728:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800072c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000730:	6013      	str	r3, [r2, #0]
  q15_t * outputloc = &testOutput[0];
 8000732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000736:	3b14      	subs	r3, #20
 8000738:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800073c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000740:	6013      	str	r3, [r2, #0]
  q15_t * maxfreq = &testOutput[1];
 8000742:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000746:	3b14      	subs	r3, #20
 8000748:	3302      	adds	r3, #2
 800074a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800074e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000752:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  UART_escapes("[H");
 8000754:	4861      	ldr	r0, [pc, #388]	; (80008dc <main+0x234>)
 8000756:	f7ff ff8f 	bl	8000678 <UART_escapes>
  	  UART_print("Frequency: ");
 800075a:	4861      	ldr	r0, [pc, #388]	; (80008e0 <main+0x238>)
 800075c:	f7ff ff3e 	bl	80005dc <UART_print>
  	  UART_escapes("[s");
 8000760:	4860      	ldr	r0, [pc, #384]	; (80008e4 <main+0x23c>)
 8000762:	f7ff ff89 	bl	8000678 <UART_escapes>
  	  char freqstring[4];
	  q15_t max;
	  uint32_t index;
	  arm_rfft_instance_q15 fft1;
	  arm_rfft_init_q15(&fft1, LENGTH_OF_FFT, 0, 1);
 8000766:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800076a:	3838      	subs	r0, #56	; 0x38
 800076c:	2301      	movs	r3, #1
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000774:	f001 fa7e 	bl	8001c74 <arm_rfft_init_q15>
  while (1)
  {


	  if(DMA1->ISR & DMA_ISR_HTIF1)
 8000778:	4b5b      	ldr	r3, [pc, #364]	; (80008e8 <main+0x240>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	2b00      	cmp	r3, #0
 8000782:	d058      	beq.n	8000836 <main+0x18e>
	  	{


		  arm_rfft_q15(&fft1, sampleloc1, outputloc);
 8000784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000788:	3b38      	subs	r3, #56	; 0x38
 800078a:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800078e:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8000798:	f101 0134 	add.w	r1, r1, #52	; 0x34
 800079c:	6809      	ldr	r1, [r1, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f9ce 	bl	8001b40 <arm_rfft_q15>

		  testOutput[0]=0;
 80007a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a8:	3b14      	subs	r3, #20
 80007aa:	2200      	movs	r2, #0
 80007ac:	801a      	strh	r2, [r3, #0]
		  arm_max_q15(outputloc, LENGTH_OF_ARRAY ,&max ,&index);
 80007ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007b2:	3b20      	subs	r3, #32
 80007b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80007b8:	3a1a      	subs	r2, #26
 80007ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007be:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 80007c2:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 80007c6:	6800      	ldr	r0, [r0, #0]
 80007c8:	f001 f968 	bl	8001a9c <arm_max_q15>

		  freq = index/2;
 80007cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007d0:	3b20      	subs	r3, #32
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80007da:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80007de:	6013      	str	r3, [r2, #0]
			itoa(freq, freqstring, 10);
 80007e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e4:	3b18      	subs	r3, #24
 80007e6:	220a      	movs	r2, #10
 80007e8:	4619      	mov	r1, r3
 80007ea:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80007ee:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80007f2:	6818      	ldr	r0, [r3, #0]
 80007f4:	f001 feaa 	bl	800254c <itoa>
			GPIOC->ODR ^= GPIO_ODR_OD1;
 80007f8:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <main+0x244>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	4a3b      	ldr	r2, [pc, #236]	; (80008ec <main+0x244>)
 80007fe:	f083 0302 	eor.w	r3, r3, #2
 8000802:	6153      	str	r3, [r2, #20]
			UART_escapes("8");
 8000804:	483a      	ldr	r0, [pc, #232]	; (80008f0 <main+0x248>)
 8000806:	f7ff ff37 	bl	8000678 <UART_escapes>
			UART_escapes("[K");
 800080a:	483a      	ldr	r0, [pc, #232]	; (80008f4 <main+0x24c>)
 800080c:	f7ff ff34 	bl	8000678 <UART_escapes>
			UART_print(freqstring);
 8000810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000814:	3b18      	subs	r3, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fee0 	bl	80005dc <UART_print>
			GPIOC->ODR ^= GPIO_ODR_OD1;
 800081c:	4b33      	ldr	r3, [pc, #204]	; (80008ec <main+0x244>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	4a32      	ldr	r2, [pc, #200]	; (80008ec <main+0x244>)
 8000822:	f083 0302 	eor.w	r3, r3, #2
 8000826:	6153      	str	r3, [r2, #20]

	  		DMA1->IFCR |= (DMA_IFCR_CHTIF1); //clear half transfer flag
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <main+0x240>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <main+0x240>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6053      	str	r3, [r2, #4]
 8000834:	e7a0      	b.n	8000778 <main+0xd0>

//	  		DMA1->IFCR |= (DMA_IFCR_CGIF1);
	  	}
	  else if(DMA1->ISR & DMA_ISR_TCIF1)
 8000836:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <main+0x240>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d09a      	beq.n	8000778 <main+0xd0>
	  	  	{



	  		  arm_rfft_q15(&fft1, sampleloc2, outputloc);
 8000842:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000846:	3b38      	subs	r3, #56	; 0x38
 8000848:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800084c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000850:	6812      	ldr	r2, [r2, #0]
 8000852:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8000856:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800085a:	6809      	ldr	r1, [r1, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f96f 	bl	8001b40 <arm_rfft_q15>
	  		  testOutput[0]=0;
 8000862:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000866:	3b14      	subs	r3, #20
 8000868:	2200      	movs	r2, #0
 800086a:	801a      	strh	r2, [r3, #0]
	  		  arm_max_q15(outputloc, LENGTH_OF_ARRAY ,&max ,&index);
 800086c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000870:	3b20      	subs	r3, #32
 8000872:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000876:	3a1a      	subs	r2, #26
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 8000880:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8000884:	6800      	ldr	r0, [r0, #0]
 8000886:	f001 f909 	bl	8001a9c <arm_max_q15>
	  		  freq = index/2;
 800088a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800088e:	3b20      	subs	r3, #32
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	085b      	lsrs	r3, r3, #1
 8000894:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8000898:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800089c:	6013      	str	r3, [r2, #0]
	  		itoa(freq, freqstring, 10);
 800089e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a2:	3b18      	subs	r3, #24
 80008a4:	220a      	movs	r2, #10
 80008a6:	4619      	mov	r1, r3
 80008a8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80008ac:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f001 fe4b 	bl	800254c <itoa>
	  		UART_escapes("8");
 80008b6:	480e      	ldr	r0, [pc, #56]	; (80008f0 <main+0x248>)
 80008b8:	f7ff fede 	bl	8000678 <UART_escapes>
	  		UART_escapes("[K");
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <main+0x24c>)
 80008be:	f7ff fedb 	bl	8000678 <UART_escapes>
	  		UART_print(freqstring);
 80008c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c6:	3b18      	subs	r3, #24
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe87 	bl	80005dc <UART_print>

	  	  		DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear half transfer flag
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <main+0x240>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <main+0x240>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6053      	str	r3, [r2, #4]
	  if(DMA1->ISR & DMA_ISR_HTIF1)
 80008da:	e74d      	b.n	8000778 <main+0xd0>
 80008dc:	08002608 	.word	0x08002608
 80008e0:	0800260c 	.word	0x0800260c
 80008e4:	08002618 	.word	0x08002618
 80008e8:	40020000 	.word	0x40020000
 80008ec:	48000800 	.word	0x48000800
 80008f0:	0800261c 	.word	0x0800261c
 80008f4:	08002620 	.word	0x08002620

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	; 0x58
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	2244      	movs	r2, #68	; 0x44
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fe22 	bl	8002550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800091a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800091e:	f000 faa1 	bl	8000e64 <HAL_PWREx_ControlVoltageScaling>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000928:	f000 f838 	bl	800099c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800092c:	2310      	movs	r3, #16
 800092e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000930:	2301      	movs	r3, #1
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000940:	2301      	movs	r3, #1
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000948:	2328      	movs	r3, #40	; 0x28
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800094c:	2307      	movs	r3, #7
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000950:	2302      	movs	r3, #2
 8000952:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000954:	2302      	movs	r3, #2
 8000956:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f000 fad7 	bl	8000f10 <HAL_RCC_OscConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000968:	f000 f818 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096c:	230f      	movs	r3, #15
 800096e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000970:	2303      	movs	r3, #3
 8000972:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	2104      	movs	r1, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fe9d 	bl	80016c4 <HAL_RCC_ClockConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000990:	f000 f804 	bl	800099c <Error_Handler>
  }
}
 8000994:	bf00      	nop
 8000996:	3758      	adds	r7, #88	; 0x58
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <HAL_MspInit+0x44>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <HAL_MspInit+0x44>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <HAL_MspInit+0x44>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x44>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x44>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x44>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 f8da 	bl	8000bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <tim2_init>:

/*
 * setup timer 2
 */
void tim2_init()
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	//capture compare mode ch2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // enable clock for tim2
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <tim2_init+0x8c>)
 8000a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <tim2_init+0x8c>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->CCER |= (TIM_CCER_CC2E);        // enable capture compare
 8000a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a7c:	6a1b      	ldr	r3, [r3, #32]
 8000a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC2P);       // rising edge non inverted
 8000a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a92:	f023 0320 	bic.w	r3, r3, #32
 8000a96:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC2NP);
 8000a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9c:	6a1b      	ldr	r3, [r3, #32]
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000aa6:	6213      	str	r3, [r2, #32]
	TIM2->CCR2 = 0;
 8000aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aac:	2200      	movs	r2, #0
 8000aae:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S); // set as output
 8000ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000abe:	6193      	str	r3, [r2, #24]

	TIM2-> CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_0); //
 8000ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aca:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000ace:	6193      	str	r3, [r2, #24]

	TIM2->ARR = ARR_VALUE; //setting
 8000ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ad4:	f649 0296 	movw	r2, #39062	; 0x9896
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= (TIM_CR1_CEN);
 8000ada:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6013      	str	r3, [r2, #0]

}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000

08000af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000afc:	f7ff ffa2 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	; (8000b3c <LoopForever+0xe>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	; (8000b44 <LoopForever+0x16>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 fcd5 	bl	80024d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2a:	f7ff fdbd 	bl	80006a8 <main>

08000b2e <LoopForever>:

LoopForever:
    b LoopForever
 8000b2e:	e7fe      	b.n	8000b2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b3c:	080144ec 	.word	0x080144ec
  ldr r2, =_sbss
 8000b40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b44:	2000002c 	.word	0x2000002c

08000b48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC1_2_IRQHandler>

08000b4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b50:	2300      	movs	r3, #0
 8000b52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f943 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f80e 	bl	8000b7c <HAL_InitTick>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d002      	beq.n	8000b6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	e001      	b.n	8000b70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b6c:	f7ff ff1c 	bl	80009a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b70:	79fb      	ldrb	r3, [r7, #7]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d023      	beq.n	8000bd8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_InitTick+0x70>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_InitTick+0x6c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 f941 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d10f      	bne.n	8000bd2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d809      	bhi.n	8000bcc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 f919 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0x74>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	e007      	b.n	8000bdc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	73fb      	strb	r3, [r7, #15]
 8000bd0:	e004      	b.n	8000bdc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73fb      	strb	r3, [r7, #15]
 8000bd6:	e001      	b.n	8000bdc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	20000028 	.word	0x20000028

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	20000028 	.word	0x20000028

08000c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3c:	f7ff ffee 	bl	8000c1c <HAL_GetTick>
 8000c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c4c:	d005      	beq.n	8000c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_Delay+0x44>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	461a      	mov	r2, r3
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4413      	add	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5a:	bf00      	nop
 8000c5c:	f7ff ffde 	bl	8000c1c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d8f7      	bhi.n	8000c5c <HAL_Delay+0x28>
  {
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff47 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff5c 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffb0 	bl	8000d9c <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40007000 	.word	0x40007000

08000e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b085      	sub	sp, #20
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e72:	d130      	bne.n	8000ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e74:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e80:	d038      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2232      	movs	r2, #50	; 0x32
 8000e98:	fb02 f303 	mul.w	r3, r2, r3
 8000e9c:	4a1b      	ldr	r2, [pc, #108]	; (8000f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea2:	0c9b      	lsrs	r3, r3, #18
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ea8:	e002      	b.n	8000eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ebc:	d102      	bne.n	8000ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1f2      	bne.n	8000eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed0:	d110      	bne.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e00f      	b.n	8000ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee2:	d007      	beq.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000eec:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40007000 	.word	0x40007000
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	431bde83 	.word	0x431bde83

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e3c6      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f22:	4ba1      	ldr	r3, [pc, #644]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f2c:	4b9e      	ldr	r3, [pc, #632]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 80e4 	beq.w	800110c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <HAL_RCC_OscConfig+0x4a>
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	2b0c      	cmp	r3, #12
 8000f4e:	f040 808b 	bne.w	8001068 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 8087 	bne.w	8001068 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f5a:	4b93      	ldr	r3, [pc, #588]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <HAL_RCC_OscConfig+0x62>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e39e      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6a1a      	ldr	r2, [r3, #32]
 8000f76:	4b8c      	ldr	r3, [pc, #560]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <HAL_RCC_OscConfig+0x7c>
 8000f82:	4b89      	ldr	r3, [pc, #548]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f8a:	e005      	b.n	8000f98 <HAL_RCC_OscConfig+0x88>
 8000f8c:	4b86      	ldr	r3, [pc, #536]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d223      	bcs.n	8000fe4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fd1b 	bl	80019dc <RCC_SetFlashLatencyFromMSIRange>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e37f      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb0:	4b7d      	ldr	r3, [pc, #500]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a7c      	ldr	r2, [pc, #496]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fb6:	f043 0308 	orr.w	r3, r3, #8
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4977      	ldr	r1, [pc, #476]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	021b      	lsls	r3, r3, #8
 8000fdc:	4972      	ldr	r1, [pc, #456]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	604b      	str	r3, [r1, #4]
 8000fe2:	e025      	b.n	8001030 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe4:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a6f      	ldr	r2, [pc, #444]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000fea:	f043 0308 	orr.w	r3, r3, #8
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b6d      	ldr	r3, [pc, #436]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	496a      	ldr	r1, [pc, #424]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001002:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	4965      	ldr	r1, [pc, #404]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001012:	4313      	orrs	r3, r2
 8001014:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d109      	bne.n	8001030 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fcdb 	bl	80019dc <RCC_SetFlashLatencyFromMSIRange>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e33f      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001030:	f000 fc48 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 8001034:	4602      	mov	r2, r0
 8001036:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	495a      	ldr	r1, [pc, #360]	; (80011ac <HAL_RCC_OscConfig+0x29c>)
 8001042:	5ccb      	ldrb	r3, [r1, r3]
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa22 f303 	lsr.w	r3, r2, r3
 800104c:	4a58      	ldr	r2, [pc, #352]	; (80011b0 <HAL_RCC_OscConfig+0x2a0>)
 800104e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_RCC_OscConfig+0x2a4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fd91 	bl	8000b7c <HAL_InitTick>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d052      	beq.n	800110a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	e323      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d032      	beq.n	80010d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001070:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800107c:	f7ff fdce 	bl	8000c1c <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001084:	f7ff fdca 	bl	8000c1c <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e30c      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0f0      	beq.n	8001084 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a40      	ldr	r2, [pc, #256]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	493b      	ldr	r1, [pc, #236]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	4936      	ldr	r1, [pc, #216]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	e01a      	b.n	800110c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010d6:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a33      	ldr	r2, [pc, #204]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010e2:	f7ff fd9b 	bl	8000c1c <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010e8:	e008      	b.n	80010fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010ea:	f7ff fd97 	bl	8000c1c <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d901      	bls.n	80010fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e2d9      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d1f0      	bne.n	80010ea <HAL_RCC_OscConfig+0x1da>
 8001108:	e000      	b.n	800110c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800110a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b00      	cmp	r3, #0
 8001116:	d074      	beq.n	8001202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	2b08      	cmp	r3, #8
 800111c:	d005      	beq.n	800112a <HAL_RCC_OscConfig+0x21a>
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	2b0c      	cmp	r3, #12
 8001122:	d10e      	bne.n	8001142 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d10b      	bne.n	8001142 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112a:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d064      	beq.n	8001200 <HAL_RCC_OscConfig+0x2f0>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d160      	bne.n	8001200 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e2b6      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800114a:	d106      	bne.n	800115a <HAL_RCC_OscConfig+0x24a>
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a15      	ldr	r2, [pc, #84]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e01d      	b.n	8001196 <HAL_RCC_OscConfig+0x286>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0x26e>
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 800116a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e00b      	b.n	8001196 <HAL_RCC_OscConfig+0x286>
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a06      	ldr	r2, [pc, #24]	; (80011a8 <HAL_RCC_OscConfig+0x298>)
 8001190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001194:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d01c      	beq.n	80011d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119e:	f7ff fd3d 	bl	8000c1c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a4:	e011      	b.n	80011ca <HAL_RCC_OscConfig+0x2ba>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	08002624 	.word	0x08002624
 80011b0:	20000000 	.word	0x20000000
 80011b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fd30 	bl	8000c1c <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e272      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ca:	4baf      	ldr	r3, [pc, #700]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2a8>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d8:	f7ff fd20 	bl	8000c1c <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fd1c 	bl	8000c1c <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e25e      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f2:	4ba5      	ldr	r3, [pc, #660]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2d0>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d060      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d005      	beq.n	8001220 <HAL_RCC_OscConfig+0x310>
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d119      	bne.n	800124e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d116      	bne.n	800124e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001220:	4b99      	ldr	r3, [pc, #612]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x328>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e23b      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b93      	ldr	r3, [pc, #588]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	4990      	ldr	r1, [pc, #576]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800124c:	e040      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d023      	beq.n	800129e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001256:	4b8c      	ldr	r3, [pc, #560]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a8b      	ldr	r2, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fcdb 	bl	8000c1c <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fcd7 	bl	8000c1c <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e219      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800127c:	4b82      	ldr	r3, [pc, #520]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	061b      	lsls	r3, r3, #24
 8001296:	497c      	ldr	r1, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e018      	b.n	80012d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a79      	ldr	r2, [pc, #484]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80012a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fcb7 	bl	8000c1c <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fcb3 	bl	8000c1c <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e1f5      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012c4:	4b70      	ldr	r3, [pc, #448]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0308 	and.w	r3, r3, #8
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d03c      	beq.n	8001356 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d01c      	beq.n	800131e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e4:	4b68      	ldr	r3, [pc, #416]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80012e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ea:	4a67      	ldr	r2, [pc, #412]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f4:	f7ff fc92 	bl	8000c1c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc8e 	bl	8000c1c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1d0      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130e:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d0ef      	beq.n	80012fc <HAL_RCC_OscConfig+0x3ec>
 800131c:	e01b      	b.n	8001356 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800131e:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001324:	4a58      	ldr	r2, [pc, #352]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001326:	f023 0301 	bic.w	r3, r3, #1
 800132a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132e:	f7ff fc75 	bl	8000c1c <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001336:	f7ff fc71 	bl	8000c1c <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1b3      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001348:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800134a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1ef      	bne.n	8001336 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80a6 	beq.w	80014b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001368:	4b47      	ldr	r3, [pc, #284]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10d      	bne.n	8001390 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001374:	4b44      	ldr	r3, [pc, #272]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001378:	4a43      	ldr	r2, [pc, #268]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6593      	str	r3, [r2, #88]	; 0x58
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800138c:	2301      	movs	r3, #1
 800138e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001390:	4b3e      	ldr	r3, [pc, #248]	; (800148c <HAL_RCC_OscConfig+0x57c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001398:	2b00      	cmp	r3, #0
 800139a:	d118      	bne.n	80013ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800139c:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x57c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a3a      	ldr	r2, [pc, #232]	; (800148c <HAL_RCC_OscConfig+0x57c>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a8:	f7ff fc38 	bl	8000c1c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff fc34 	bl	8000c1c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e176      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <HAL_RCC_OscConfig+0x57c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d108      	bne.n	80013e8 <HAL_RCC_OscConfig+0x4d8>
 80013d6:	4b2c      	ldr	r3, [pc, #176]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	4a2a      	ldr	r2, [pc, #168]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013e6:	e024      	b.n	8001432 <HAL_RCC_OscConfig+0x522>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b05      	cmp	r3, #5
 80013ee:	d110      	bne.n	8001412 <HAL_RCC_OscConfig+0x502>
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	4a24      	ldr	r2, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	4a20      	ldr	r2, [pc, #128]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001410:	e00f      	b.n	8001432 <HAL_RCC_OscConfig+0x522>
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800141a:	f023 0301 	bic.w	r3, r3, #1
 800141e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 8001424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001428:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800142a:	f023 0304 	bic.w	r3, r3, #4
 800142e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d016      	beq.n	8001468 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143a:	f7ff fbef 	bl	8000c1c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001442:	f7ff fbeb 	bl	8000c1c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001450:	4293      	cmp	r3, r2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e12b      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <HAL_RCC_OscConfig+0x578>)
 800145a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0ed      	beq.n	8001442 <HAL_RCC_OscConfig+0x532>
 8001466:	e01a      	b.n	800149e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001468:	f7ff fbd8 	bl	8000c1c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fbd4 	bl	8000c1c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d906      	bls.n	8001490 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e114      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001490:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1e8      	bne.n	8001470 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d105      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a4:	4b84      	ldr	r3, [pc, #528]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a83      	ldr	r2, [pc, #524]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80014aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80fa 	beq.w	80016ae <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014be:	2b02      	cmp	r3, #2
 80014c0:	f040 80d0 	bne.w	8001664 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014c4:	4b7c      	ldr	r3, [pc, #496]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0203 	and.w	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d130      	bne.n	800153a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	3b01      	subs	r3, #1
 80014e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d127      	bne.n	800153a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d11f      	bne.n	800153a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001504:	2a07      	cmp	r2, #7
 8001506:	bf14      	ite	ne
 8001508:	2201      	movne	r2, #1
 800150a:	2200      	moveq	r2, #0
 800150c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150e:	4293      	cmp	r3, r2
 8001510:	d113      	bne.n	800153a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d109      	bne.n	800153a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	3b01      	subs	r3, #1
 8001534:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d06e      	beq.n	8001618 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	2b0c      	cmp	r3, #12
 800153e:	d069      	beq.n	8001614 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d105      	bne.n	8001558 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0a9      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a55      	ldr	r2, [pc, #340]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001566:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001568:	f7ff fb58 	bl	8000c1c <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001570:	f7ff fb54 	bl	8000c1c <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e096      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001582:	4b4d      	ldr	r3, [pc, #308]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800158e:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	4b4a      	ldr	r3, [pc, #296]	; (80016bc <HAL_RCC_OscConfig+0x7ac>)
 8001594:	4013      	ands	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800159e:	3a01      	subs	r2, #1
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	4311      	orrs	r1, r2
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015a8:	0212      	lsls	r2, r2, #8
 80015aa:	4311      	orrs	r1, r2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015b0:	0852      	lsrs	r2, r2, #1
 80015b2:	3a01      	subs	r2, #1
 80015b4:	0552      	lsls	r2, r2, #21
 80015b6:	4311      	orrs	r1, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015bc:	0852      	lsrs	r2, r2, #1
 80015be:	3a01      	subs	r2, #1
 80015c0:	0652      	lsls	r2, r2, #25
 80015c2:	4311      	orrs	r1, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015c8:	0912      	lsrs	r2, r2, #4
 80015ca:	0452      	lsls	r2, r2, #17
 80015cc:	430a      	orrs	r2, r1
 80015ce:	493a      	ldr	r1, [pc, #232]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015d4:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a37      	ldr	r2, [pc, #220]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a34      	ldr	r2, [pc, #208]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ec:	f7ff fb16 	bl	8000c1c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb12 	bl	8000c1c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e054      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001612:	e04c      	b.n	80016ae <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e04b      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d144      	bne.n	80016ae <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a23      	ldr	r2, [pc, #140]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 800162a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800162e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800163c:	f7ff faee 	bl	8000c1c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff faea 	bl	8000c1c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e02c      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x734>
 8001662:	e024      	b.n	80016ae <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2b0c      	cmp	r3, #12
 8001668:	d01f      	beq.n	80016aa <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fad1 	bl	8000c1c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff facd 	bl	8000c1c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e00f      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800169c:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	4905      	ldr	r1, [pc, #20]	; (80016b8 <HAL_RCC_OscConfig+0x7a8>)
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_RCC_OscConfig+0x7b0>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
 80016a8:	e001      	b.n	80016ae <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	f99d808c 	.word	0xf99d808c
 80016c0:	feeefffc 	.word	0xfeeefffc

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0e7      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d910      	bls.n	8001708 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b72      	ldr	r3, [pc, #456]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 0207 	bic.w	r2, r3, #7
 80016ee:	4970      	ldr	r1, [pc, #448]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cf      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	4b66      	ldr	r3, [pc, #408]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001720:	429a      	cmp	r2, r3
 8001722:	d908      	bls.n	8001736 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4960      	ldr	r1, [pc, #384]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	4313      	orrs	r3, r2
 8001734:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d04c      	beq.n	80017dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b03      	cmp	r3, #3
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174a:	4b5a      	ldr	r3, [pc, #360]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d121      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0a6      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001762:	4b54      	ldr	r3, [pc, #336]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d115      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e09a      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177a:	4b4e      	ldr	r3, [pc, #312]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e08e      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e086      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4943      	ldr	r1, [pc, #268]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ac:	f7ff fa36 	bl	8000c1c <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff fa32 	bl	8000c1c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e06e      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d010      	beq.n	800180a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d208      	bcs.n	800180a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	492b      	ldr	r1, [pc, #172]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180a:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d210      	bcs.n	800183a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 0207 	bic.w	r2, r3, #7
 8001820:	4923      	ldr	r1, [pc, #140]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_ClockConfig+0x1ec>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0307 	and.w	r3, r3, #7
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e036      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d008      	beq.n	8001858 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	4918      	ldr	r1, [pc, #96]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001854:	4313      	orrs	r3, r2
 8001856:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d009      	beq.n	8001878 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4910      	ldr	r1, [pc, #64]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001878:	f000 f824 	bl	80018c4 <HAL_RCC_GetSysClockFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	490b      	ldr	r1, [pc, #44]	; (80018b8 <HAL_RCC_ClockConfig+0x1f4>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1fc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff f96d 	bl	8000b7c <HAL_InitTick>
 80018a2:	4603      	mov	r3, r0
 80018a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80018a6:	7afb      	ldrb	r3, [r7, #11]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40022000 	.word	0x40022000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	08002624 	.word	0x08002624
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004

080018c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d2:	4b3e      	ldr	r3, [pc, #248]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018dc:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x34>
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d121      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d11e      	bne.n	8001936 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018f8:	4b34      	ldr	r3, [pc, #208]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001904:	4b31      	ldr	r3, [pc, #196]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190a:	0a1b      	lsrs	r3, r3, #8
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	e005      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001914:	4b2d      	ldr	r3, [pc, #180]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001920:	4a2b      	ldr	r2, [pc, #172]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10d      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001934:	e00a      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d102      	bne.n	8001942 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800193c:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	e004      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	2b08      	cmp	r3, #8
 8001946:	d101      	bne.n	800194c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800194a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d134      	bne.n	80019bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0xa6>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b03      	cmp	r3, #3
 8001966:	d003      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0xac>
 8001968:	e005      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800196a:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800196c:	617b      	str	r3, [r7, #20]
      break;
 800196e:	e005      	b.n	800197c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001972:	617b      	str	r3, [r7, #20]
      break;
 8001974:	e002      	b.n	800197c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	617b      	str	r3, [r7, #20]
      break;
 800197a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	fb02 f203 	mul.w	r2, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_RCC_GetSysClockFreq+0x108>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	0e5b      	lsrs	r3, r3, #25
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	3301      	adds	r3, #1
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019bc:	69bb      	ldr	r3, [r7, #24]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08002634 	.word	0x08002634
 80019d4:	00f42400 	.word	0x00f42400
 80019d8:	007a1200 	.word	0x007a1200

080019dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019f4:	f7ff fa28 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 80019f8:	6178      	str	r0, [r7, #20]
 80019fa:	e014      	b.n	8001a26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a06:	6593      	str	r3, [r2, #88]	; 0x58
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a14:	f7ff fa18 	bl	8000e48 <HAL_PWREx_GetVoltageRange>
 8001a18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2c:	d10b      	bne.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d919      	bls.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2ba0      	cmp	r3, #160	; 0xa0
 8001a38:	d902      	bls.n	8001a40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	e013      	b.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a40:	2301      	movs	r3, #1
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e010      	b.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b80      	cmp	r3, #128	; 0x80
 8001a4a:	d902      	bls.n	8001a52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e00a      	b.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b80      	cmp	r3, #128	; 0x80
 8001a56:	d102      	bne.n	8001a5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a58:	2302      	movs	r3, #2
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	e004      	b.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b70      	cmp	r3, #112	; 0x70
 8001a62:	d101      	bne.n	8001a68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a64:	2301      	movs	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 0207 	bic.w	r2, r3, #7
 8001a70:	4909      	ldr	r1, [pc, #36]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40022000 	.word	0x40022000

08001a9c <arm_max_q15>:
 8001a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001aa0:	4684      	mov	ip, r0
 8001aa2:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8001aa6:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8001aaa:	f93c 4b02 	ldrsh.w	r4, [ip], #2
 8001aae:	d044      	beq.n	8001b3a <arm_max_q15+0x9e>
 8001ab0:	2500      	movs	r5, #0
 8001ab2:	300a      	adds	r0, #10
 8001ab4:	462f      	mov	r7, r5
 8001ab6:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001aba:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 8001abe:	42b4      	cmp	r4, r6
 8001ac0:	bfb8      	it	lt
 8001ac2:	4634      	movlt	r4, r6
 8001ac4:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 8001ac8:	bfb8      	it	lt
 8001aca:	1c6f      	addlt	r7, r5, #1
 8001acc:	42b4      	cmp	r4, r6
 8001ace:	bfb8      	it	lt
 8001ad0:	4634      	movlt	r4, r6
 8001ad2:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 8001ad6:	bfb8      	it	lt
 8001ad8:	1caf      	addlt	r7, r5, #2
 8001ada:	42b4      	cmp	r4, r6
 8001adc:	bfa8      	it	ge
 8001ade:	4626      	movge	r6, r4
 8001ae0:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8001ae4:	bfb8      	it	lt
 8001ae6:	1cef      	addlt	r7, r5, #3
 8001ae8:	42a6      	cmp	r6, r4
 8001aea:	f105 0504 	add.w	r5, r5, #4
 8001aee:	bfac      	ite	ge
 8001af0:	4634      	movge	r4, r6
 8001af2:	462f      	movlt	r7, r5
 8001af4:	45a9      	cmp	r9, r5
 8001af6:	f100 0008 	add.w	r0, r0, #8
 8001afa:	d1de      	bne.n	8001aba <arm_max_q15+0x1e>
 8001afc:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8001b00:	f01e 0003 	ands.w	r0, lr, #3
 8001b04:	d015      	beq.n	8001b32 <arm_max_q15+0x96>
 8001b06:	f9bc 5000 	ldrsh.w	r5, [ip]
 8001b0a:	42a5      	cmp	r5, r4
 8001b0c:	bfc4      	itt	gt
 8001b0e:	462c      	movgt	r4, r5
 8001b10:	1a0f      	subgt	r7, r1, r0
 8001b12:	3801      	subs	r0, #1
 8001b14:	d00d      	beq.n	8001b32 <arm_max_q15+0x96>
 8001b16:	f9bc 5002 	ldrsh.w	r5, [ip, #2]
 8001b1a:	42ac      	cmp	r4, r5
 8001b1c:	bfbc      	itt	lt
 8001b1e:	1a0f      	sublt	r7, r1, r0
 8001b20:	462c      	movlt	r4, r5
 8001b22:	2801      	cmp	r0, #1
 8001b24:	d005      	beq.n	8001b32 <arm_max_q15+0x96>
 8001b26:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 8001b2a:	42a1      	cmp	r1, r4
 8001b2c:	bfc4      	itt	gt
 8001b2e:	4677      	movgt	r7, lr
 8001b30:	460c      	movgt	r4, r1
 8001b32:	8014      	strh	r4, [r2, #0]
 8001b34:	601f      	str	r7, [r3, #0]
 8001b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b3a:	4647      	mov	r7, r8
 8001b3c:	e7e0      	b.n	8001b00 <arm_max_q15+0x64>
 8001b3e:	bf00      	nop

08001b40 <arm_rfft_q15>:
 8001b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b44:	b083      	sub	sp, #12
 8001b46:	6805      	ldr	r5, [r0, #0]
 8001b48:	9200      	str	r2, [sp, #0]
 8001b4a:	7902      	ldrb	r2, [r0, #4]
 8001b4c:	086d      	lsrs	r5, r5, #1
 8001b4e:	00ab      	lsls	r3, r5, #2
 8001b50:	2a01      	cmp	r2, #1
 8001b52:	4604      	mov	r4, r0
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	6940      	ldr	r0, [r0, #20]
 8001b58:	460e      	mov	r6, r1
 8001b5a:	d051      	beq.n	8001c00 <arm_rfft_q15+0xc0>
 8001b5c:	7963      	ldrb	r3, [r4, #5]
 8001b5e:	f000 f9c3 	bl	8001ee8 <arm_cfft_q15>
 8001b62:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001b66:	6927      	ldr	r7, [r4, #16]
 8001b68:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001b6c:	00aa      	lsls	r2, r5, #2
 8001b6e:	f1a2 0804 	sub.w	r8, r2, #4
 8001b72:	1e6a      	subs	r2, r5, #1
 8001b74:	eb03 0c0e 	add.w	ip, r3, lr
 8001b78:	4477      	add	r7, lr
 8001b7a:	44b0      	add	r8, r6
 8001b7c:	f106 0b04 	add.w	fp, r6, #4
 8001b80:	ea4f 04c5 	mov.w	r4, r5, lsl #3
 8001b84:	d025      	beq.n	8001bd2 <arm_rfft_q15+0x92>
 8001b86:	9b00      	ldr	r3, [sp, #0]
 8001b88:	3c08      	subs	r4, #8
 8001b8a:	441c      	add	r4, r3
 8001b8c:	f103 0508 	add.w	r5, r3, #8
 8001b90:	f85b 3b04 	ldr.w	r3, [fp], #4
 8001b94:	f8dc 9000 	ldr.w	r9, [ip]
 8001b98:	fb43 f109 	smusd	r1, r3, r9
 8001b9c:	f858 0904 	ldr.w	r0, [r8], #-4
 8001ba0:	f8d7 a000 	ldr.w	sl, [r7]
 8001ba4:	fb20 110a 	smlad	r1, r0, sl, r1
 8001ba8:	fb40 f01a 	smusdx	r0, r0, sl
 8001bac:	fb23 0319 	smladx	r3, r3, r9, r0
 8001bb0:	141b      	asrs	r3, r3, #16
 8001bb2:	1409      	asrs	r1, r1, #16
 8001bb4:	4258      	negs	r0, r3
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	f825 3c02 	strh.w	r3, [r5, #-2]
 8001bbc:	f825 1c04 	strh.w	r1, [r5, #-4]
 8001bc0:	4477      	add	r7, lr
 8001bc2:	80e0      	strh	r0, [r4, #6]
 8001bc4:	80a1      	strh	r1, [r4, #4]
 8001bc6:	44f4      	add	ip, lr
 8001bc8:	f105 0504 	add.w	r5, r5, #4
 8001bcc:	f1a4 0404 	sub.w	r4, r4, #4
 8001bd0:	d1de      	bne.n	8001b90 <arm_rfft_q15+0x50>
 8001bd2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8001bd6:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001bda:	e9dd 0400 	ldrd	r0, r4, [sp]
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	105b      	asrs	r3, r3, #1
 8001be2:	1901      	adds	r1, r0, r4
 8001be4:	5303      	strh	r3, [r0, r4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	804a      	strh	r2, [r1, #2]
 8001bea:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001bee:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8001bf2:	8042      	strh	r2, [r0, #2]
 8001bf4:	440b      	add	r3, r1
 8001bf6:	105b      	asrs	r3, r3, #1
 8001bf8:	8003      	strh	r3, [r0, #0]
 8001bfa:	b003      	add	sp, #12
 8001bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c00:	440b      	add	r3, r1
 8001c02:	469a      	mov	sl, r3
 8001c04:	e9d4 c703 	ldrd	ip, r7, [r4, #12]
 8001c08:	68a3      	ldr	r3, [r4, #8]
 8001c0a:	b1f5      	cbz	r5, 8001c4a <arm_rfft_q15+0x10a>
 8001c0c:	f8dd b000 	ldr.w	fp, [sp]
 8001c10:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001c14:	f85a 1904 	ldr.w	r1, [sl], #-4
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	fb41 fe03 	smusd	lr, r1, r3
 8001c1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8001c22:	f8dc 2000 	ldr.w	r2, [ip]
 8001c26:	fb28 ee02 	smlad	lr, r8, r2, lr
 8001c2a:	fb21 f313 	smuadx	r3, r1, r3
 8001c2e:	425b      	negs	r3, r3
 8001c30:	fb42 3218 	smlsdx	r2, r2, r8, r3
 8001c34:	0c13      	lsrs	r3, r2, #16
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 8001c3c:	3d01      	subs	r5, #1
 8001c3e:	f84b 3b04 	str.w	r3, [fp], #4
 8001c42:	444f      	add	r7, r9
 8001c44:	44cc      	add	ip, r9
 8001c46:	d1e5      	bne.n	8001c14 <arm_rfft_q15+0xd4>
 8001c48:	7922      	ldrb	r2, [r4, #4]
 8001c4a:	9d00      	ldr	r5, [sp, #0]
 8001c4c:	7963      	ldrb	r3, [r4, #5]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f000 f94a 	bl	8001ee8 <arm_cfft_q15>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0cf      	beq.n	8001bfa <arm_rfft_q15+0xba>
 8001c5a:	1ea9      	subs	r1, r5, #2
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	800b      	strh	r3, [r1, #0]
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	3201      	adds	r2, #1
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d8f7      	bhi.n	8001c5e <arm_rfft_q15+0x11e>
 8001c6e:	b003      	add	sp, #12
 8001c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001c74 <arm_rfft_init_q15>:
 8001c74:	b430      	push	{r4, r5}
 8001c76:	b289      	uxth	r1, r1
 8001c78:	4d2e      	ldr	r5, [pc, #184]	; (8001d34 <arm_rfft_init_q15+0xc0>)
 8001c7a:	4c2f      	ldr	r4, [pc, #188]	; (8001d38 <arm_rfft_init_q15+0xc4>)
 8001c7c:	7102      	strb	r2, [r0, #4]
 8001c7e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001c82:	7143      	strb	r3, [r0, #5]
 8001c84:	6001      	str	r1, [r0, #0]
 8001c86:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8001c8a:	d035      	beq.n	8001cf8 <arm_rfft_init_q15+0x84>
 8001c8c:	d919      	bls.n	8001cc2 <arm_rfft_init_q15+0x4e>
 8001c8e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001c92:	d037      	beq.n	8001d04 <arm_rfft_init_q15+0x90>
 8001c94:	d90c      	bls.n	8001cb0 <arm_rfft_init_q15+0x3c>
 8001c96:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001c9a:	d039      	beq.n	8001d10 <arm_rfft_init_q15+0x9c>
 8001c9c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8001ca0:	d126      	bne.n	8001cf0 <arm_rfft_init_q15+0x7c>
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <arm_rfft_init_q15+0xc8>)
 8001ca6:	6082      	str	r2, [r0, #8]
 8001ca8:	6143      	str	r3, [r0, #20]
 8001caa:	2000      	movs	r0, #0
 8001cac:	bc30      	pop	{r4, r5}
 8001cae:	4770      	bx	lr
 8001cb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001cb4:	d11c      	bne.n	8001cf0 <arm_rfft_init_q15+0x7c>
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <arm_rfft_init_q15+0xcc>)
 8001cba:	6082      	str	r2, [r0, #8]
 8001cbc:	6143      	str	r3, [r0, #20]
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	e7f4      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001cc2:	2940      	cmp	r1, #64	; 0x40
 8001cc4:	d02a      	beq.n	8001d1c <arm_rfft_init_q15+0xa8>
 8001cc6:	d90a      	bls.n	8001cde <arm_rfft_init_q15+0x6a>
 8001cc8:	2980      	cmp	r1, #128	; 0x80
 8001cca:	d02d      	beq.n	8001d28 <arm_rfft_init_q15+0xb4>
 8001ccc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001cd0:	d10e      	bne.n	8001cf0 <arm_rfft_init_q15+0x7c>
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <arm_rfft_init_q15+0xd0>)
 8001cd6:	6082      	str	r2, [r0, #8]
 8001cd8:	6143      	str	r3, [r0, #20]
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e7e6      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001cde:	2920      	cmp	r1, #32
 8001ce0:	d106      	bne.n	8001cf0 <arm_rfft_init_q15+0x7c>
 8001ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <arm_rfft_init_q15+0xd4>)
 8001ce8:	6082      	str	r2, [r0, #8]
 8001cea:	6143      	str	r3, [r0, #20]
 8001cec:	2000      	movs	r0, #0
 8001cee:	e7dd      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf4:	bc30      	pop	{r4, r5}
 8001cf6:	4770      	bx	lr
 8001cf8:	2210      	movs	r2, #16
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <arm_rfft_init_q15+0xd8>)
 8001cfc:	6082      	str	r2, [r0, #8]
 8001cfe:	6143      	str	r3, [r0, #20]
 8001d00:	2000      	movs	r0, #0
 8001d02:	e7d3      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001d04:	2204      	movs	r2, #4
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <arm_rfft_init_q15+0xdc>)
 8001d08:	6082      	str	r2, [r0, #8]
 8001d0a:	6143      	str	r3, [r0, #20]
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	e7cd      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001d10:	2202      	movs	r2, #2
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <arm_rfft_init_q15+0xe0>)
 8001d14:	6082      	str	r2, [r0, #8]
 8001d16:	6143      	str	r3, [r0, #20]
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e7c7      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <arm_rfft_init_q15+0xe4>)
 8001d20:	6082      	str	r2, [r0, #8]
 8001d22:	6143      	str	r3, [r0, #20]
 8001d24:	2000      	movs	r0, #0
 8001d26:	e7c1      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001d28:	2240      	movs	r2, #64	; 0x40
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <arm_rfft_init_q15+0xe8>)
 8001d2c:	6082      	str	r2, [r0, #8]
 8001d2e:	6143      	str	r3, [r0, #20]
 8001d30:	2000      	movs	r0, #0
 8001d32:	e7bb      	b.n	8001cac <arm_rfft_init_q15+0x38>
 8001d34:	080064ec 	.word	0x080064ec
 8001d38:	0800a4ec 	.word	0x0800a4ec
 8001d3c:	080026c4 	.word	0x080026c4
 8001d40:	080026d4 	.word	0x080026d4
 8001d44:	08002674 	.word	0x08002674
 8001d48:	08002684 	.word	0x08002684
 8001d4c:	080026a4 	.word	0x080026a4
 8001d50:	08002664 	.word	0x08002664
 8001d54:	08002694 	.word	0x08002694
 8001d58:	080026b4 	.word	0x080026b4
 8001d5c:	080026e4 	.word	0x080026e4

08001d60 <arm_cfft_radix4by2_q15>:
 8001d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d64:	084d      	lsrs	r5, r1, #1
 8001d66:	b081      	sub	sp, #4
 8001d68:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8001d6c:	4616      	mov	r6, r2
 8001d6e:	d049      	beq.n	8001e04 <arm_cfft_radix4by2_q15+0xa4>
 8001d70:	4604      	mov	r4, r0
 8001d72:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001e20 <arm_cfft_radix4by2_q15+0xc0>
 8001d76:	4696      	mov	lr, r2
 8001d78:	4638      	mov	r0, r7
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	462a      	mov	r2, r5
 8001d7e:	f04f 0c00 	mov.w	ip, #0
 8001d82:	f85e 3b04 	ldr.w	r3, [lr], #4
 8001d86:	f8d1 9000 	ldr.w	r9, [r1]
 8001d8a:	fa99 f92c 	shadd16	r9, r9, ip
 8001d8e:	f8d0 b000 	ldr.w	fp, [r0]
 8001d92:	fa9b fb2c 	shadd16	fp, fp, ip
 8001d96:	fad9 fa1b 	qsub16	sl, r9, fp
 8001d9a:	fa99 f92b 	shadd16	r9, r9, fp
 8001d9e:	f841 9b04 	str.w	r9, [r1], #4
 8001da2:	fb23 f90a 	smuad	r9, r3, sl
 8001da6:	fb43 f31a 	smusdx	r3, r3, sl
 8001daa:	ea03 0308 	and.w	r3, r3, r8
 8001dae:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8001db2:	3a01      	subs	r2, #1
 8001db4:	f840 3b04 	str.w	r3, [r0], #4
 8001db8:	d1e3      	bne.n	8001d82 <arm_cfft_radix4by2_q15+0x22>
 8001dba:	4629      	mov	r1, r5
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	4632      	mov	r2, r6
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f000 f8fd 	bl	8001fc0 <arm_radix4_butterfly_q15>
 8001dc6:	4638      	mov	r0, r7
 8001dc8:	4629      	mov	r1, r5
 8001dca:	4632      	mov	r2, r6
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f000 f8f7 	bl	8001fc0 <arm_radix4_butterfly_q15>
 8001dd2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	f9b0 6000 	ldrsh.w	r6, [r0]
 8001ddc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8001de0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8001de4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8001de8:	0076      	lsls	r6, r6, #1
 8001dea:	0064      	lsls	r4, r4, #1
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	8006      	strh	r6, [r0, #0]
 8001df2:	8044      	strh	r4, [r0, #2]
 8001df4:	8082      	strh	r2, [r0, #4]
 8001df6:	80c3      	strh	r3, [r0, #6]
 8001df8:	3008      	adds	r0, #8
 8001dfa:	4285      	cmp	r5, r0
 8001dfc:	d1ec      	bne.n	8001dd8 <arm_cfft_radix4by2_q15+0x78>
 8001dfe:	b001      	add	sp, #4
 8001e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e04:	4629      	mov	r1, r5
 8001e06:	2302      	movs	r3, #2
 8001e08:	f000 f8da 	bl	8001fc0 <arm_radix4_butterfly_q15>
 8001e0c:	4632      	mov	r2, r6
 8001e0e:	4629      	mov	r1, r5
 8001e10:	4638      	mov	r0, r7
 8001e12:	2302      	movs	r3, #2
 8001e14:	b001      	add	sp, #4
 8001e16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e1a:	f000 b8d1 	b.w	8001fc0 <arm_radix4_butterfly_q15>
 8001e1e:	bf00      	nop
 8001e20:	ffff0000 	.word	0xffff0000

08001e24 <arm_cfft_radix4by2_inverse_q15>:
 8001e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e28:	084d      	lsrs	r5, r1, #1
 8001e2a:	b081      	sub	sp, #4
 8001e2c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8001e30:	4616      	mov	r6, r2
 8001e32:	d049      	beq.n	8001ec8 <arm_cfft_radix4by2_inverse_q15+0xa4>
 8001e34:	4604      	mov	r4, r0
 8001e36:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001ee4 <arm_cfft_radix4by2_inverse_q15+0xc0>
 8001e3a:	4696      	mov	lr, r2
 8001e3c:	4638      	mov	r0, r7
 8001e3e:	4621      	mov	r1, r4
 8001e40:	462a      	mov	r2, r5
 8001e42:	f04f 0c00 	mov.w	ip, #0
 8001e46:	f85e 3b04 	ldr.w	r3, [lr], #4
 8001e4a:	f8d1 9000 	ldr.w	r9, [r1]
 8001e4e:	fa99 f92c 	shadd16	r9, r9, ip
 8001e52:	f8d0 b000 	ldr.w	fp, [r0]
 8001e56:	fa9b fb2c 	shadd16	fp, fp, ip
 8001e5a:	fad9 fa1b 	qsub16	sl, r9, fp
 8001e5e:	fa99 f92b 	shadd16	r9, r9, fp
 8001e62:	f841 9b04 	str.w	r9, [r1], #4
 8001e66:	fb43 f90a 	smusd	r9, r3, sl
 8001e6a:	fb23 f31a 	smuadx	r3, r3, sl
 8001e6e:	ea03 0308 	and.w	r3, r3, r8
 8001e72:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8001e76:	3a01      	subs	r2, #1
 8001e78:	f840 3b04 	str.w	r3, [r0], #4
 8001e7c:	d1e3      	bne.n	8001e46 <arm_cfft_radix4by2_inverse_q15+0x22>
 8001e7e:	4629      	mov	r1, r5
 8001e80:	2302      	movs	r3, #2
 8001e82:	4632      	mov	r2, r6
 8001e84:	4620      	mov	r0, r4
 8001e86:	f000 f9cf 	bl	8002228 <arm_radix4_butterfly_inverse_q15>
 8001e8a:	4638      	mov	r0, r7
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	4632      	mov	r2, r6
 8001e90:	2302      	movs	r3, #2
 8001e92:	f000 f9c9 	bl	8002228 <arm_radix4_butterfly_inverse_q15>
 8001e96:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f9b0 6000 	ldrsh.w	r6, [r0]
 8001ea0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8001ea4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8001ea8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8001eac:	0076      	lsls	r6, r6, #1
 8001eae:	0064      	lsls	r4, r4, #1
 8001eb0:	0052      	lsls	r2, r2, #1
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	8006      	strh	r6, [r0, #0]
 8001eb6:	8044      	strh	r4, [r0, #2]
 8001eb8:	8082      	strh	r2, [r0, #4]
 8001eba:	80c3      	strh	r3, [r0, #6]
 8001ebc:	3008      	adds	r0, #8
 8001ebe:	4285      	cmp	r5, r0
 8001ec0:	d1ec      	bne.n	8001e9c <arm_cfft_radix4by2_inverse_q15+0x78>
 8001ec2:	b001      	add	sp, #4
 8001ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ec8:	4629      	mov	r1, r5
 8001eca:	2302      	movs	r3, #2
 8001ecc:	f000 f9ac 	bl	8002228 <arm_radix4_butterfly_inverse_q15>
 8001ed0:	4632      	mov	r2, r6
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4638      	mov	r0, r7
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	b001      	add	sp, #4
 8001eda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ede:	f000 b9a3 	b.w	8002228 <arm_radix4_butterfly_inverse_q15>
 8001ee2:	bf00      	nop
 8001ee4:	ffff0000 	.word	0xffff0000

08001ee8 <arm_cfft_q15>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	2a01      	cmp	r2, #1
 8001eec:	460e      	mov	r6, r1
 8001eee:	4604      	mov	r4, r0
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	8801      	ldrh	r1, [r0, #0]
 8001ef4:	d033      	beq.n	8001f5e <arm_cfft_q15+0x76>
 8001ef6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001efa:	d02a      	beq.n	8001f52 <arm_cfft_q15+0x6a>
 8001efc:	d90b      	bls.n	8001f16 <arm_cfft_q15+0x2e>
 8001efe:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001f02:	d026      	beq.n	8001f52 <arm_cfft_q15+0x6a>
 8001f04:	d91b      	bls.n	8001f3e <arm_cfft_q15+0x56>
 8001f06:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001f0a:	d00b      	beq.n	8001f24 <arm_cfft_q15+0x3c>
 8001f0c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f10:	d01f      	beq.n	8001f52 <arm_cfft_q15+0x6a>
 8001f12:	b96d      	cbnz	r5, 8001f30 <arm_cfft_q15+0x48>
 8001f14:	bd70      	pop	{r4, r5, r6, pc}
 8001f16:	2920      	cmp	r1, #32
 8001f18:	d004      	beq.n	8001f24 <arm_cfft_q15+0x3c>
 8001f1a:	d918      	bls.n	8001f4e <arm_cfft_q15+0x66>
 8001f1c:	2940      	cmp	r1, #64	; 0x40
 8001f1e:	d018      	beq.n	8001f52 <arm_cfft_q15+0x6a>
 8001f20:	2980      	cmp	r1, #128	; 0x80
 8001f22:	d1f6      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001f24:	6862      	ldr	r2, [r4, #4]
 8001f26:	4630      	mov	r0, r6
 8001f28:	f7ff ff1a 	bl	8001d60 <arm_cfft_radix4by2_q15>
 8001f2c:	2d00      	cmp	r5, #0
 8001f2e:	d0f1      	beq.n	8001f14 <arm_cfft_q15+0x2c>
 8001f30:	4630      	mov	r0, r6
 8001f32:	68a2      	ldr	r2, [r4, #8]
 8001f34:	89a1      	ldrh	r1, [r4, #12]
 8001f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f3a:	f000 baa9 	b.w	8002490 <arm_bitreversal_16>
 8001f3e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001f42:	d1e6      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001f44:	6862      	ldr	r2, [r4, #4]
 8001f46:	4630      	mov	r0, r6
 8001f48:	f7ff ff0a 	bl	8001d60 <arm_cfft_radix4by2_q15>
 8001f4c:	e7ee      	b.n	8001f2c <arm_cfft_q15+0x44>
 8001f4e:	2910      	cmp	r1, #16
 8001f50:	d1df      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001f52:	2301      	movs	r3, #1
 8001f54:	6862      	ldr	r2, [r4, #4]
 8001f56:	4630      	mov	r0, r6
 8001f58:	f000 f832 	bl	8001fc0 <arm_radix4_butterfly_q15>
 8001f5c:	e7d9      	b.n	8001f12 <arm_cfft_q15+0x2a>
 8001f5e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001f62:	d00a      	beq.n	8001f7a <arm_cfft_q15+0x92>
 8001f64:	d90f      	bls.n	8001f86 <arm_cfft_q15+0x9e>
 8001f66:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001f6a:	d006      	beq.n	8001f7a <arm_cfft_q15+0x92>
 8001f6c:	d917      	bls.n	8001f9e <arm_cfft_q15+0xb6>
 8001f6e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001f72:	d00f      	beq.n	8001f94 <arm_cfft_q15+0xac>
 8001f74:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8001f78:	d1cb      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	6862      	ldr	r2, [r4, #4]
 8001f7e:	4630      	mov	r0, r6
 8001f80:	f000 f952 	bl	8002228 <arm_radix4_butterfly_inverse_q15>
 8001f84:	e7c5      	b.n	8001f12 <arm_cfft_q15+0x2a>
 8001f86:	2920      	cmp	r1, #32
 8001f88:	d004      	beq.n	8001f94 <arm_cfft_q15+0xac>
 8001f8a:	d910      	bls.n	8001fae <arm_cfft_q15+0xc6>
 8001f8c:	2940      	cmp	r1, #64	; 0x40
 8001f8e:	d0f4      	beq.n	8001f7a <arm_cfft_q15+0x92>
 8001f90:	2980      	cmp	r1, #128	; 0x80
 8001f92:	d1be      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001f94:	6862      	ldr	r2, [r4, #4]
 8001f96:	4630      	mov	r0, r6
 8001f98:	f7ff ff44 	bl	8001e24 <arm_cfft_radix4by2_inverse_q15>
 8001f9c:	e7b9      	b.n	8001f12 <arm_cfft_q15+0x2a>
 8001f9e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001fa2:	d1b6      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001fa4:	6862      	ldr	r2, [r4, #4]
 8001fa6:	4630      	mov	r0, r6
 8001fa8:	f7ff ff3c 	bl	8001e24 <arm_cfft_radix4by2_inverse_q15>
 8001fac:	e7b1      	b.n	8001f12 <arm_cfft_q15+0x2a>
 8001fae:	2910      	cmp	r1, #16
 8001fb0:	d1af      	bne.n	8001f12 <arm_cfft_q15+0x2a>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	6862      	ldr	r2, [r4, #4]
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f000 f936 	bl	8002228 <arm_radix4_butterfly_inverse_q15>
 8001fbc:	e7a9      	b.n	8001f12 <arm_cfft_q15+0x2a>
 8001fbe:	bf00      	nop

08001fc0 <arm_radix4_butterfly_q15>:
 8001fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fc4:	088f      	lsrs	r7, r1, #2
 8001fc6:	b095      	sub	sp, #84	; 0x54
 8001fc8:	00be      	lsls	r6, r7, #2
 8001fca:	4684      	mov	ip, r0
 8001fcc:	9011      	str	r0, [sp, #68]	; 0x44
 8001fce:	4430      	add	r0, r6
 8001fd0:	9103      	str	r1, [sp, #12]
 8001fd2:	1984      	adds	r4, r0, r6
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4d93      	ldr	r5, [pc, #588]	; (8002224 <arm_radix4_butterfly_q15+0x264>)
 8001fd8:	9713      	str	r7, [sp, #76]	; 0x4c
 8001fda:	469a      	mov	sl, r3
 8001fdc:	46b9      	mov	r9, r7
 8001fde:	9212      	str	r2, [sp, #72]	; 0x48
 8001fe0:	4667      	mov	r7, ip
 8001fe2:	4426      	add	r6, r4
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4694      	mov	ip, r2
 8001fe8:	f8d7 b000 	ldr.w	fp, [r7]
 8001fec:	fa9b fb23 	shadd16	fp, fp, r3
 8001ff0:	fa9b fb23 	shadd16	fp, fp, r3
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	fa92 f223 	shadd16	r2, r2, r3
 8001ffa:	fa92 f223 	shadd16	r2, r2, r3
 8001ffe:	fa9b fe12 	qadd16	lr, fp, r2
 8002002:	fadb fb12 	qsub16	fp, fp, r2
 8002006:	6802      	ldr	r2, [r0, #0]
 8002008:	fa92 f223 	shadd16	r2, r2, r3
 800200c:	fa92 f223 	shadd16	r2, r2, r3
 8002010:	f8d6 8000 	ldr.w	r8, [r6]
 8002014:	fa98 f823 	shadd16	r8, r8, r3
 8002018:	fa98 f823 	shadd16	r8, r8, r3
 800201c:	fa92 f218 	qadd16	r2, r2, r8
 8002020:	fa9e f822 	shadd16	r8, lr, r2
 8002024:	f847 8b04 	str.w	r8, [r7], #4
 8002028:	fade fe12 	qsub16	lr, lr, r2
 800202c:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8002030:	fb22 f80e 	smuad	r8, r2, lr
 8002034:	fb42 fe1e 	smusdx	lr, r2, lr
 8002038:	6802      	ldr	r2, [r0, #0]
 800203a:	fa92 f223 	shadd16	r2, r2, r3
 800203e:	fa92 f223 	shadd16	r2, r2, r3
 8002042:	ea0e 0e05 	and.w	lr, lr, r5
 8002046:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 800204a:	f840 eb04 	str.w	lr, [r0], #4
 800204e:	f8d6 e000 	ldr.w	lr, [r6]
 8002052:	fa9e fe23 	shadd16	lr, lr, r3
 8002056:	fa9e fe23 	shadd16	lr, lr, r3
 800205a:	fad2 f21e 	qsub16	r2, r2, lr
 800205e:	faab f812 	qasx	r8, fp, r2
 8002062:	faeb fb12 	qsax	fp, fp, r2
 8002066:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 800206a:	fb22 fe0b 	smuad	lr, r2, fp
 800206e:	fb42 f21b 	smusdx	r2, r2, fp
 8002072:	402a      	ands	r2, r5
 8002074:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8002078:	f844 2b04 	str.w	r2, [r4], #4
 800207c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002080:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8002084:	fb22 fe08 	smuad	lr, r2, r8
 8002088:	fb42 f218 	smusdx	r2, r2, r8
 800208c:	402a      	ands	r2, r5
 800208e:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8002092:	f1b9 0901 	subs.w	r9, r9, #1
 8002096:	f846 2b04 	str.w	r2, [r6], #4
 800209a:	4451      	add	r1, sl
 800209c:	d1a4      	bne.n	8001fe8 <arm_radix4_butterfly_q15+0x28>
 800209e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80020a0:	2a04      	cmp	r2, #4
 80020a2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80020a6:	f240 80ba 	bls.w	800221e <arm_radix4_butterfly_q15+0x25e>
 80020aa:	f8df b178 	ldr.w	fp, [pc, #376]	; 8002224 <arm_radix4_butterfly_q15+0x264>
 80020ae:	f8cd 9010 	str.w	r9, [sp, #16]
 80020b2:	9202      	str	r2, [sp, #8]
 80020b4:	9c02      	ldr	r4, [sp, #8]
 80020b6:	08a1      	lsrs	r1, r4, #2
 80020b8:	0088      	lsls	r0, r1, #2
 80020ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80020be:	0092      	lsls	r2, r2, #2
 80020c0:	900c      	str	r0, [sp, #48]	; 0x30
 80020c2:	9803      	ldr	r0, [sp, #12]
 80020c4:	920f      	str	r2, [sp, #60]	; 0x3c
 80020c6:	009a      	lsls	r2, r3, #2
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	4605      	mov	r5, r0
 80020cc:	930d      	str	r3, [sp, #52]	; 0x34
 80020ce:	9811      	ldr	r0, [sp, #68]	; 0x44
 80020d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80020d2:	9110      	str	r1, [sp, #64]	; 0x40
 80020d4:	428d      	cmp	r5, r1
 80020d6:	bf28      	it	cs
 80020d8:	460d      	movcs	r5, r1
 80020da:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80020de:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80020e2:	9306      	str	r3, [sp, #24]
 80020e4:	2300      	movs	r3, #0
 80020e6:	950e      	str	r5, [sp, #56]	; 0x38
 80020e8:	9107      	str	r1, [sp, #28]
 80020ea:	00a7      	lsls	r7, r4, #2
 80020ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80020ee:	9008      	str	r0, [sp, #32]
 80020f0:	9305      	str	r3, [sp, #20]
 80020f2:	9b06      	ldr	r3, [sp, #24]
 80020f4:	9a08      	ldr	r2, [sp, #32]
 80020f6:	f8d3 a000 	ldr.w	sl, [r3]
 80020fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020fc:	f8dd e014 	ldr.w	lr, [sp, #20]
 8002100:	f8d3 9000 	ldr.w	r9, [r3]
 8002104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002106:	f8d3 8000 	ldr.w	r8, [r3]
 800210a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800210c:	4616      	mov	r6, r2
 800210e:	1898      	adds	r0, r3, r2
 8002110:	9a07      	ldr	r2, [sp, #28]
 8002112:	4615      	mov	r5, r2
 8002114:	1899      	adds	r1, r3, r2
 8002116:	6832      	ldr	r2, [r6, #0]
 8002118:	682c      	ldr	r4, [r5, #0]
 800211a:	fa92 f314 	qadd16	r3, r2, r4
 800211e:	fad2 f214 	qsub16	r2, r2, r4
 8002122:	6804      	ldr	r4, [r0, #0]
 8002124:	f8d1 c000 	ldr.w	ip, [r1]
 8002128:	fa94 f41c 	qadd16	r4, r4, ip
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	fa93 fc24 	shadd16	ip, r3, r4
 8002132:	9b04      	ldr	r3, [sp, #16]
 8002134:	fa9c fc23 	shadd16	ip, ip, r3
 8002138:	f8c6 c000 	str.w	ip, [r6]
 800213c:	9b01      	ldr	r3, [sp, #4]
 800213e:	443e      	add	r6, r7
 8002140:	fad3 f324 	shsub16	r3, r3, r4
 8002144:	fb29 fc03 	smuad	ip, r9, r3
 8002148:	fb49 f313 	smusdx	r3, r9, r3
 800214c:	ea03 030b 	and.w	r3, r3, fp
 8002150:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002154:	f8d0 c000 	ldr.w	ip, [r0]
 8002158:	6003      	str	r3, [r0, #0]
 800215a:	680c      	ldr	r4, [r1, #0]
 800215c:	4438      	add	r0, r7
 800215e:	fadc f414 	qsub16	r4, ip, r4
 8002162:	faa2 f324 	shasx	r3, r2, r4
 8002166:	fae2 f224 	shsax	r2, r2, r4
 800216a:	fb2a f402 	smuad	r4, sl, r2
 800216e:	fb4a f212 	smusdx	r2, sl, r2
 8002172:	ea02 020b 	and.w	r2, r2, fp
 8002176:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 800217a:	602a      	str	r2, [r5, #0]
 800217c:	443d      	add	r5, r7
 800217e:	fb28 f203 	smuad	r2, r8, r3
 8002182:	fb48 f313 	smusdx	r3, r8, r3
 8002186:	ea03 030b 	and.w	r3, r3, fp
 800218a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800218e:	9a02      	ldr	r2, [sp, #8]
 8002190:	600b      	str	r3, [r1, #0]
 8002192:	9b03      	ldr	r3, [sp, #12]
 8002194:	4496      	add	lr, r2
 8002196:	4573      	cmp	r3, lr
 8002198:	4439      	add	r1, r7
 800219a:	d8bc      	bhi.n	8002116 <arm_radix4_butterfly_q15+0x156>
 800219c:	9a06      	ldr	r2, [sp, #24]
 800219e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021a0:	9b05      	ldr	r3, [sp, #20]
 80021a2:	440a      	add	r2, r1
 80021a4:	9206      	str	r2, [sp, #24]
 80021a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80021a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021aa:	440a      	add	r2, r1
 80021ac:	920a      	str	r2, [sp, #40]	; 0x28
 80021ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80021b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80021b2:	440a      	add	r2, r1
 80021b4:	9209      	str	r2, [sp, #36]	; 0x24
 80021b6:	9a08      	ldr	r2, [sp, #32]
 80021b8:	3204      	adds	r2, #4
 80021ba:	9208      	str	r2, [sp, #32]
 80021bc:	9a07      	ldr	r2, [sp, #28]
 80021be:	3204      	adds	r2, #4
 80021c0:	9207      	str	r2, [sp, #28]
 80021c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80021c4:	3301      	adds	r3, #1
 80021c6:	4293      	cmp	r3, r2
 80021c8:	9305      	str	r3, [sp, #20]
 80021ca:	d392      	bcc.n	80020f2 <arm_radix4_butterfly_q15+0x132>
 80021cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80021ce:	9202      	str	r2, [sp, #8]
 80021d0:	2a04      	cmp	r2, #4
 80021d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80021d4:	f63f af6e 	bhi.w	80020b4 <arm_radix4_butterfly_q15+0xf4>
 80021d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80021da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	689f      	ldr	r7, [r3, #8]
 80021e2:	68dc      	ldr	r4, [r3, #12]
 80021e4:	fa92 f017 	qadd16	r0, r2, r7
 80021e8:	fa91 f514 	qadd16	r5, r1, r4
 80021ec:	fa90 f525 	shadd16	r5, r0, r5
 80021f0:	601d      	str	r5, [r3, #0]
 80021f2:	fa91 f514 	qadd16	r5, r1, r4
 80021f6:	fad0 f025 	shsub16	r0, r0, r5
 80021fa:	6058      	str	r0, [r3, #4]
 80021fc:	fad2 f217 	qsub16	r2, r2, r7
 8002200:	fad1 f114 	qsub16	r1, r1, r4
 8002204:	fae2 f021 	shsax	r0, r2, r1
 8002208:	6098      	str	r0, [r3, #8]
 800220a:	faa2 f221 	shasx	r2, r2, r1
 800220e:	3e01      	subs	r6, #1
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	f103 0310 	add.w	r3, r3, #16
 8002216:	d1e1      	bne.n	80021dc <arm_radix4_butterfly_q15+0x21c>
 8002218:	b015      	add	sp, #84	; 0x54
 800221a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800221e:	4616      	mov	r6, r2
 8002220:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002222:	e7db      	b.n	80021dc <arm_radix4_butterfly_q15+0x21c>
 8002224:	ffff0000 	.word	0xffff0000

08002228 <arm_radix4_butterfly_inverse_q15>:
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	088f      	lsrs	r7, r1, #2
 800222e:	b095      	sub	sp, #84	; 0x54
 8002230:	00be      	lsls	r6, r7, #2
 8002232:	4684      	mov	ip, r0
 8002234:	9011      	str	r0, [sp, #68]	; 0x44
 8002236:	4430      	add	r0, r6
 8002238:	9103      	str	r1, [sp, #12]
 800223a:	1984      	adds	r4, r0, r6
 800223c:	2100      	movs	r1, #0
 800223e:	4d93      	ldr	r5, [pc, #588]	; (800248c <arm_radix4_butterfly_inverse_q15+0x264>)
 8002240:	9713      	str	r7, [sp, #76]	; 0x4c
 8002242:	469a      	mov	sl, r3
 8002244:	46b9      	mov	r9, r7
 8002246:	9212      	str	r2, [sp, #72]	; 0x48
 8002248:	4667      	mov	r7, ip
 800224a:	4426      	add	r6, r4
 800224c:	460b      	mov	r3, r1
 800224e:	4694      	mov	ip, r2
 8002250:	f8d7 b000 	ldr.w	fp, [r7]
 8002254:	fa9b fb23 	shadd16	fp, fp, r3
 8002258:	fa9b fb23 	shadd16	fp, fp, r3
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	fa92 f223 	shadd16	r2, r2, r3
 8002262:	fa92 f223 	shadd16	r2, r2, r3
 8002266:	fa9b fe12 	qadd16	lr, fp, r2
 800226a:	fadb fb12 	qsub16	fp, fp, r2
 800226e:	6802      	ldr	r2, [r0, #0]
 8002270:	fa92 f223 	shadd16	r2, r2, r3
 8002274:	fa92 f223 	shadd16	r2, r2, r3
 8002278:	f8d6 8000 	ldr.w	r8, [r6]
 800227c:	fa98 f823 	shadd16	r8, r8, r3
 8002280:	fa98 f823 	shadd16	r8, r8, r3
 8002284:	fa92 f218 	qadd16	r2, r2, r8
 8002288:	fa9e f822 	shadd16	r8, lr, r2
 800228c:	f847 8b04 	str.w	r8, [r7], #4
 8002290:	fade fe12 	qsub16	lr, lr, r2
 8002294:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8002298:	fb42 f80e 	smusd	r8, r2, lr
 800229c:	fb22 fe1e 	smuadx	lr, r2, lr
 80022a0:	6802      	ldr	r2, [r0, #0]
 80022a2:	fa92 f223 	shadd16	r2, r2, r3
 80022a6:	fa92 f223 	shadd16	r2, r2, r3
 80022aa:	ea0e 0e05 	and.w	lr, lr, r5
 80022ae:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 80022b2:	f840 eb04 	str.w	lr, [r0], #4
 80022b6:	f8d6 e000 	ldr.w	lr, [r6]
 80022ba:	fa9e fe23 	shadd16	lr, lr, r3
 80022be:	fa9e fe23 	shadd16	lr, lr, r3
 80022c2:	fad2 f21e 	qsub16	r2, r2, lr
 80022c6:	faeb f812 	qsax	r8, fp, r2
 80022ca:	faab fb12 	qasx	fp, fp, r2
 80022ce:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 80022d2:	fb42 fe0b 	smusd	lr, r2, fp
 80022d6:	fb22 f21b 	smuadx	r2, r2, fp
 80022da:	402a      	ands	r2, r5
 80022dc:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 80022e0:	f844 2b04 	str.w	r2, [r4], #4
 80022e4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80022e8:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80022ec:	fb42 fe08 	smusd	lr, r2, r8
 80022f0:	fb22 f218 	smuadx	r2, r2, r8
 80022f4:	402a      	ands	r2, r5
 80022f6:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 80022fa:	f1b9 0901 	subs.w	r9, r9, #1
 80022fe:	f846 2b04 	str.w	r2, [r6], #4
 8002302:	4451      	add	r1, sl
 8002304:	d1a4      	bne.n	8002250 <arm_radix4_butterfly_inverse_q15+0x28>
 8002306:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002308:	2a04      	cmp	r2, #4
 800230a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800230e:	f240 80ba 	bls.w	8002486 <arm_radix4_butterfly_inverse_q15+0x25e>
 8002312:	f8df b178 	ldr.w	fp, [pc, #376]	; 800248c <arm_radix4_butterfly_inverse_q15+0x264>
 8002316:	f8cd 9010 	str.w	r9, [sp, #16]
 800231a:	9202      	str	r2, [sp, #8]
 800231c:	9c02      	ldr	r4, [sp, #8]
 800231e:	08a1      	lsrs	r1, r4, #2
 8002320:	0088      	lsls	r0, r1, #2
 8002322:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002326:	0092      	lsls	r2, r2, #2
 8002328:	900c      	str	r0, [sp, #48]	; 0x30
 800232a:	9803      	ldr	r0, [sp, #12]
 800232c:	920f      	str	r2, [sp, #60]	; 0x3c
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4605      	mov	r5, r0
 8002334:	930d      	str	r3, [sp, #52]	; 0x34
 8002336:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002338:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800233a:	9110      	str	r1, [sp, #64]	; 0x40
 800233c:	428d      	cmp	r5, r1
 800233e:	bf28      	it	cs
 8002340:	460d      	movcs	r5, r1
 8002342:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8002346:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800234a:	9306      	str	r3, [sp, #24]
 800234c:	2300      	movs	r3, #0
 800234e:	950e      	str	r5, [sp, #56]	; 0x38
 8002350:	9107      	str	r1, [sp, #28]
 8002352:	00a7      	lsls	r7, r4, #2
 8002354:	920b      	str	r2, [sp, #44]	; 0x2c
 8002356:	9008      	str	r0, [sp, #32]
 8002358:	9305      	str	r3, [sp, #20]
 800235a:	9b06      	ldr	r3, [sp, #24]
 800235c:	9a08      	ldr	r2, [sp, #32]
 800235e:	f8d3 a000 	ldr.w	sl, [r3]
 8002362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002364:	f8dd e014 	ldr.w	lr, [sp, #20]
 8002368:	f8d3 9000 	ldr.w	r9, [r3]
 800236c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800236e:	f8d3 8000 	ldr.w	r8, [r3]
 8002372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002374:	4616      	mov	r6, r2
 8002376:	1898      	adds	r0, r3, r2
 8002378:	9a07      	ldr	r2, [sp, #28]
 800237a:	4615      	mov	r5, r2
 800237c:	1899      	adds	r1, r3, r2
 800237e:	6832      	ldr	r2, [r6, #0]
 8002380:	682c      	ldr	r4, [r5, #0]
 8002382:	fa92 f314 	qadd16	r3, r2, r4
 8002386:	fad2 f214 	qsub16	r2, r2, r4
 800238a:	6804      	ldr	r4, [r0, #0]
 800238c:	f8d1 c000 	ldr.w	ip, [r1]
 8002390:	fa94 f41c 	qadd16	r4, r4, ip
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	fa93 fc24 	shadd16	ip, r3, r4
 800239a:	9b04      	ldr	r3, [sp, #16]
 800239c:	fa9c fc23 	shadd16	ip, ip, r3
 80023a0:	f8c6 c000 	str.w	ip, [r6]
 80023a4:	9b01      	ldr	r3, [sp, #4]
 80023a6:	443e      	add	r6, r7
 80023a8:	fad3 f324 	shsub16	r3, r3, r4
 80023ac:	fb49 fc03 	smusd	ip, r9, r3
 80023b0:	fb29 f313 	smuadx	r3, r9, r3
 80023b4:	ea03 030b 	and.w	r3, r3, fp
 80023b8:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80023bc:	f8d0 c000 	ldr.w	ip, [r0]
 80023c0:	6003      	str	r3, [r0, #0]
 80023c2:	680c      	ldr	r4, [r1, #0]
 80023c4:	4438      	add	r0, r7
 80023c6:	fadc f414 	qsub16	r4, ip, r4
 80023ca:	fae2 f324 	shsax	r3, r2, r4
 80023ce:	faa2 f224 	shasx	r2, r2, r4
 80023d2:	fb4a f402 	smusd	r4, sl, r2
 80023d6:	fb2a f212 	smuadx	r2, sl, r2
 80023da:	ea02 020b 	and.w	r2, r2, fp
 80023de:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 80023e2:	602a      	str	r2, [r5, #0]
 80023e4:	443d      	add	r5, r7
 80023e6:	fb48 f203 	smusd	r2, r8, r3
 80023ea:	fb28 f313 	smuadx	r3, r8, r3
 80023ee:	ea03 030b 	and.w	r3, r3, fp
 80023f2:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80023f6:	9a02      	ldr	r2, [sp, #8]
 80023f8:	600b      	str	r3, [r1, #0]
 80023fa:	9b03      	ldr	r3, [sp, #12]
 80023fc:	4496      	add	lr, r2
 80023fe:	4573      	cmp	r3, lr
 8002400:	4439      	add	r1, r7
 8002402:	d8bc      	bhi.n	800237e <arm_radix4_butterfly_inverse_q15+0x156>
 8002404:	9a06      	ldr	r2, [sp, #24]
 8002406:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002408:	9b05      	ldr	r3, [sp, #20]
 800240a:	440a      	add	r2, r1
 800240c:	9206      	str	r2, [sp, #24]
 800240e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002412:	440a      	add	r2, r1
 8002414:	920a      	str	r2, [sp, #40]	; 0x28
 8002416:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800241a:	440a      	add	r2, r1
 800241c:	9209      	str	r2, [sp, #36]	; 0x24
 800241e:	9a08      	ldr	r2, [sp, #32]
 8002420:	3204      	adds	r2, #4
 8002422:	9208      	str	r2, [sp, #32]
 8002424:	9a07      	ldr	r2, [sp, #28]
 8002426:	3204      	adds	r2, #4
 8002428:	9207      	str	r2, [sp, #28]
 800242a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800242c:	3301      	adds	r3, #1
 800242e:	4293      	cmp	r3, r2
 8002430:	9305      	str	r3, [sp, #20]
 8002432:	d392      	bcc.n	800235a <arm_radix4_butterfly_inverse_q15+0x132>
 8002434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002436:	9202      	str	r2, [sp, #8]
 8002438:	2a04      	cmp	r2, #4
 800243a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800243c:	f63f af6e 	bhi.w	800231c <arm_radix4_butterfly_inverse_q15+0xf4>
 8002440:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002442:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	689f      	ldr	r7, [r3, #8]
 800244a:	68dc      	ldr	r4, [r3, #12]
 800244c:	fa92 f017 	qadd16	r0, r2, r7
 8002450:	fa91 f514 	qadd16	r5, r1, r4
 8002454:	fa90 f525 	shadd16	r5, r0, r5
 8002458:	601d      	str	r5, [r3, #0]
 800245a:	fa91 f514 	qadd16	r5, r1, r4
 800245e:	fad0 f025 	shsub16	r0, r0, r5
 8002462:	6058      	str	r0, [r3, #4]
 8002464:	fad2 f217 	qsub16	r2, r2, r7
 8002468:	fad1 f114 	qsub16	r1, r1, r4
 800246c:	faa2 f021 	shasx	r0, r2, r1
 8002470:	6098      	str	r0, [r3, #8]
 8002472:	fae2 f221 	shsax	r2, r2, r1
 8002476:	3e01      	subs	r6, #1
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	f103 0310 	add.w	r3, r3, #16
 800247e:	d1e1      	bne.n	8002444 <arm_radix4_butterfly_inverse_q15+0x21c>
 8002480:	b015      	add	sp, #84	; 0x54
 8002482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002486:	4616      	mov	r6, r2
 8002488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800248a:	e7db      	b.n	8002444 <arm_radix4_butterfly_inverse_q15+0x21c>
 800248c:	ffff0000 	.word	0xffff0000

08002490 <arm_bitreversal_16>:
 8002490:	b1f1      	cbz	r1, 80024d0 <arm_bitreversal_16+0x40>
 8002492:	b4f0      	push	{r4, r5, r6, r7}
 8002494:	2400      	movs	r4, #0
 8002496:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800249a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800249e:	886d      	ldrh	r5, [r5, #2]
 80024a0:	08ad      	lsrs	r5, r5, #2
 80024a2:	089b      	lsrs	r3, r3, #2
 80024a4:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 80024a8:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 80024ac:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80024b0:	006e      	lsls	r6, r5, #1
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 80024b8:	3302      	adds	r3, #2
 80024ba:	1cb5      	adds	r5, r6, #2
 80024bc:	3402      	adds	r4, #2
 80024be:	b2a4      	uxth	r4, r4
 80024c0:	5ac6      	ldrh	r6, [r0, r3]
 80024c2:	5b47      	ldrh	r7, [r0, r5]
 80024c4:	52c7      	strh	r7, [r0, r3]
 80024c6:	42a1      	cmp	r1, r4
 80024c8:	5346      	strh	r6, [r0, r5]
 80024ca:	d8e4      	bhi.n	8002496 <arm_bitreversal_16+0x6>
 80024cc:	bcf0      	pop	{r4, r5, r6, r7}
 80024ce:	4770      	bx	lr
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop

080024d4 <__libc_init_array>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	4d0d      	ldr	r5, [pc, #52]	; (800250c <__libc_init_array+0x38>)
 80024d8:	4c0d      	ldr	r4, [pc, #52]	; (8002510 <__libc_init_array+0x3c>)
 80024da:	1b64      	subs	r4, r4, r5
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	2600      	movs	r6, #0
 80024e0:	42a6      	cmp	r6, r4
 80024e2:	d109      	bne.n	80024f8 <__libc_init_array+0x24>
 80024e4:	4d0b      	ldr	r5, [pc, #44]	; (8002514 <__libc_init_array+0x40>)
 80024e6:	4c0c      	ldr	r4, [pc, #48]	; (8002518 <__libc_init_array+0x44>)
 80024e8:	f000 f87c 	bl	80025e4 <_init>
 80024ec:	1b64      	subs	r4, r4, r5
 80024ee:	10a4      	asrs	r4, r4, #2
 80024f0:	2600      	movs	r6, #0
 80024f2:	42a6      	cmp	r6, r4
 80024f4:	d105      	bne.n	8002502 <__libc_init_array+0x2e>
 80024f6:	bd70      	pop	{r4, r5, r6, pc}
 80024f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fc:	4798      	blx	r3
 80024fe:	3601      	adds	r6, #1
 8002500:	e7ee      	b.n	80024e0 <__libc_init_array+0xc>
 8002502:	f855 3b04 	ldr.w	r3, [r5], #4
 8002506:	4798      	blx	r3
 8002508:	3601      	adds	r6, #1
 800250a:	e7f2      	b.n	80024f2 <__libc_init_array+0x1e>
 800250c:	080144e4 	.word	0x080144e4
 8002510:	080144e4 	.word	0x080144e4
 8002514:	080144e4 	.word	0x080144e4
 8002518:	080144e8 	.word	0x080144e8

0800251c <__itoa>:
 800251c:	1e93      	subs	r3, r2, #2
 800251e:	2b22      	cmp	r3, #34	; 0x22
 8002520:	b510      	push	{r4, lr}
 8002522:	460c      	mov	r4, r1
 8002524:	d904      	bls.n	8002530 <__itoa+0x14>
 8002526:	2300      	movs	r3, #0
 8002528:	700b      	strb	r3, [r1, #0]
 800252a:	461c      	mov	r4, r3
 800252c:	4620      	mov	r0, r4
 800252e:	bd10      	pop	{r4, pc}
 8002530:	2a0a      	cmp	r2, #10
 8002532:	d109      	bne.n	8002548 <__itoa+0x2c>
 8002534:	2800      	cmp	r0, #0
 8002536:	da07      	bge.n	8002548 <__itoa+0x2c>
 8002538:	232d      	movs	r3, #45	; 0x2d
 800253a:	700b      	strb	r3, [r1, #0]
 800253c:	4240      	negs	r0, r0
 800253e:	2101      	movs	r1, #1
 8002540:	4421      	add	r1, r4
 8002542:	f000 f80d 	bl	8002560 <__utoa>
 8002546:	e7f1      	b.n	800252c <__itoa+0x10>
 8002548:	2100      	movs	r1, #0
 800254a:	e7f9      	b.n	8002540 <__itoa+0x24>

0800254c <itoa>:
 800254c:	f7ff bfe6 	b.w	800251c <__itoa>

08002550 <memset>:
 8002550:	4402      	add	r2, r0
 8002552:	4603      	mov	r3, r0
 8002554:	4293      	cmp	r3, r2
 8002556:	d100      	bne.n	800255a <memset+0xa>
 8002558:	4770      	bx	lr
 800255a:	f803 1b01 	strb.w	r1, [r3], #1
 800255e:	e7f9      	b.n	8002554 <memset+0x4>

08002560 <__utoa>:
 8002560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002562:	4c1f      	ldr	r4, [pc, #124]	; (80025e0 <__utoa+0x80>)
 8002564:	b08b      	sub	sp, #44	; 0x2c
 8002566:	4605      	mov	r5, r0
 8002568:	460b      	mov	r3, r1
 800256a:	466e      	mov	r6, sp
 800256c:	f104 0c20 	add.w	ip, r4, #32
 8002570:	6820      	ldr	r0, [r4, #0]
 8002572:	6861      	ldr	r1, [r4, #4]
 8002574:	4637      	mov	r7, r6
 8002576:	c703      	stmia	r7!, {r0, r1}
 8002578:	3408      	adds	r4, #8
 800257a:	4564      	cmp	r4, ip
 800257c:	463e      	mov	r6, r7
 800257e:	d1f7      	bne.n	8002570 <__utoa+0x10>
 8002580:	7921      	ldrb	r1, [r4, #4]
 8002582:	7139      	strb	r1, [r7, #4]
 8002584:	1e91      	subs	r1, r2, #2
 8002586:	6820      	ldr	r0, [r4, #0]
 8002588:	6038      	str	r0, [r7, #0]
 800258a:	2922      	cmp	r1, #34	; 0x22
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	d904      	bls.n	800259c <__utoa+0x3c>
 8002592:	7019      	strb	r1, [r3, #0]
 8002594:	460b      	mov	r3, r1
 8002596:	4618      	mov	r0, r3
 8002598:	b00b      	add	sp, #44	; 0x2c
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259c:	1e58      	subs	r0, r3, #1
 800259e:	4684      	mov	ip, r0
 80025a0:	fbb5 f7f2 	udiv	r7, r5, r2
 80025a4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80025a8:	fb02 5617 	mls	r6, r2, r7, r5
 80025ac:	4476      	add	r6, lr
 80025ae:	460c      	mov	r4, r1
 80025b0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80025b4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80025b8:	462e      	mov	r6, r5
 80025ba:	42b2      	cmp	r2, r6
 80025bc:	f101 0101 	add.w	r1, r1, #1
 80025c0:	463d      	mov	r5, r7
 80025c2:	d9ed      	bls.n	80025a0 <__utoa+0x40>
 80025c4:	2200      	movs	r2, #0
 80025c6:	545a      	strb	r2, [r3, r1]
 80025c8:	1919      	adds	r1, r3, r4
 80025ca:	1aa5      	subs	r5, r4, r2
 80025cc:	42aa      	cmp	r2, r5
 80025ce:	dae2      	bge.n	8002596 <__utoa+0x36>
 80025d0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80025d4:	780e      	ldrb	r6, [r1, #0]
 80025d6:	7006      	strb	r6, [r0, #0]
 80025d8:	3201      	adds	r2, #1
 80025da:	f801 5901 	strb.w	r5, [r1], #-1
 80025de:	e7f4      	b.n	80025ca <__utoa+0x6a>
 80025e0:	080144bc 	.word	0x080144bc

080025e4 <_init>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr

080025f0 <_fini>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr
