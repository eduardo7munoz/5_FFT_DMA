
5_FFT_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011f74  08003214  08003214  00013214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015188  08015188  00030070  2**0
                  CONTENTS
  4 .ARM          00000000  08015188  08015188  00030070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015188  08015188  00030070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015188  08015188  00025188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801518c  0801518c  0002518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08015190  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000070  08015200  00030070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08015200  000300ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a699  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318f  00000000  00000000  0004a739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000788  00000000  00000000  0004d8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  0004e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026356  00000000  00000000  0004ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d54c  00000000  00000000  0007506e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e64ab  00000000  00000000  000825ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  00168a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  00168b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000069ab  00000000  00000000  0016a810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031fc 	.word	0x080031fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080031fc 	.word	0x080031fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ADC_init>:
 *      Author: eduardomunoz
 */
#include "ADC.h"

void ADC_init(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    //enable ADC on RCC
    RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 8000284:	4b54      	ldr	r3, [pc, #336]	; (80003d8 <ADC_init+0x158>)
 8000286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000288:	4a53      	ldr	r2, [pc, #332]	; (80003d8 <ADC_init+0x158>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	64d3      	str	r3, [r2, #76]	; 0x4c
    //set ADC to use HCLK
    ADC123_COMMON-> CCR = (ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE))|
 8000290:	4b52      	ldr	r3, [pc, #328]	; (80003dc <ADC_init+0x15c>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000298:	4a50      	ldr	r2, [pc, #320]	; (80003dc <ADC_init+0x15c>)
 800029a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800029e:	6093      	str	r3, [r2, #8]
            (1<<ADC_CCR_CKMODE_Pos);

    //take ADC out of deep power down mode
    ADC1->CR &= ~(ADC_CR_DEEPPWD);
 80002a0:	4b4f      	ldr	r3, [pc, #316]	; (80003e0 <ADC_init+0x160>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a4e      	ldr	r2, [pc, #312]	; (80003e0 <ADC_init+0x160>)
 80002a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002aa:	6093      	str	r3, [r2, #8]
    //and turn on the voltage regulator
    ADC1->CR |= (ADC_CR_ADVREGEN);
 80002ac:	4b4c      	ldr	r3, [pc, #304]	; (80003e0 <ADC_init+0x160>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	4a4b      	ldr	r2, [pc, #300]	; (80003e0 <ADC_init+0x160>)
 80002b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b6:	6093      	str	r3, [r2, #8]

    //    delay_us(20);  //wait 20us for ADC to power up
    HAL_Delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f000 fe93 	bl	8000fe4 <HAL_Delay>


    //single ended calibration, ensure ADC is disabled
    ADC1->CR &= ~(ADC_CR_ADEN |ADC_CR_ADCALDIF);
 80002be:	4b48      	ldr	r3, [pc, #288]	; (80003e0 <ADC_init+0x160>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4a47      	ldr	r2, [pc, #284]	; (80003e0 <ADC_init+0x160>)
 80002c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002c8:	f023 0301 	bic.w	r3, r3, #1
 80002cc:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (ADC_CR_ADCAL);
 80002ce:	4b44      	ldr	r3, [pc, #272]	; (80003e0 <ADC_init+0x160>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a43      	ldr	r2, [pc, #268]	; (80003e0 <ADC_init+0x160>)
 80002d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002d8:	6093      	str	r3, [r2, #8]
    while(ADC1->CR & ADC_CR_ADCAL); //wait for ADCAL to become
 80002da:	bf00      	nop
 80002dc:	4b40      	ldr	r3, [pc, #256]	; (80003e0 <ADC_init+0x160>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	dbfb      	blt.n	80002dc <ADC_init+0x5c>

    //configure single ended for channel 5
    ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 80002e4:	4b3e      	ldr	r3, [pc, #248]	; (80003e0 <ADC_init+0x160>)
 80002e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80002ea:	4a3d      	ldr	r2, [pc, #244]	; (80003e0 <ADC_init+0x160>)
 80002ec:	f023 0320 	bic.w	r3, r3, #32
 80002f0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    //enable ADC FINALLY!!!!! (software procedure to enable the ADC)
    ADC1-> ISR |= (ADC_ISR_ADRDY);
 80002f4:	4b3a      	ldr	r3, [pc, #232]	; (80003e0 <ADC_init+0x160>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a39      	ldr	r2, [pc, #228]	; (80003e0 <ADC_init+0x160>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]
    ADC1->CR   |= (ADC_CR_ADEN);
 8000300:	4b37      	ldr	r3, [pc, #220]	; (80003e0 <ADC_init+0x160>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a36      	ldr	r2, [pc, #216]	; (80003e0 <ADC_init+0x160>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6093      	str	r3, [r2, #8]
    while(!(ADC1->ISR & ADC_ISR_ADRDY)); //wait for ADRDY to become
 800030c:	bf00      	nop
 800030e:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <ADC_init+0x160>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	f003 0301 	and.w	r3, r3, #1
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f9      	beq.n	800030e <ADC_init+0x8e>
    ADC1-> ISR |= ADC_ISR_ADRDY; //clear ADRDY bit
 800031a:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <ADC_init+0x160>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a30      	ldr	r2, [pc, #192]	; (80003e0 <ADC_init+0x160>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]

    //configure ADC
    //12-bit resolution so set to 00
    ADC1 -> CFGR &= ~(ADC_CFGR_RES);
 8000326:	4b2e      	ldr	r3, [pc, #184]	; (80003e0 <ADC_init+0x160>)
 8000328:	68db      	ldr	r3, [r3, #12]
 800032a:	4a2d      	ldr	r2, [pc, #180]	; (80003e0 <ADC_init+0x160>)
 800032c:	f023 0318 	bic.w	r3, r3, #24
 8000330:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_DMACFG); //enable dma circ mode
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <ADC_init+0x160>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	4a2a      	ldr	r2, [pc, #168]	; (80003e0 <ADC_init+0x160>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_DMAEN); //enable dma
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <ADC_init+0x160>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	4a27      	ldr	r2, [pc, #156]	; (80003e0 <ADC_init+0x160>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	60d3      	str	r3, [r2, #12]


    //trigger off of extsel
    ADC1 -> CFGR |= ADC_CFGR_EXTEN_0|ADC_CFGR_EXTEN_1;//enables triggers of external rising edge
 800034a:	4b25      	ldr	r3, [pc, #148]	; (80003e0 <ADC_init+0x160>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	4a24      	ldr	r2, [pc, #144]	; (80003e0 <ADC_init+0x160>)
 8000350:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000354:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR &= ~(ADC_CFGR_EXTSEL); //clear bits
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <ADC_init+0x160>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <ADC_init+0x160>)
 800035c:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 8000360:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_EXTSEL_0|ADC_CFGR_EXTSEL_1); //EXT3 TIM2CH2 011
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <ADC_init+0x160>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	4a1e      	ldr	r2, [pc, #120]	; (80003e0 <ADC_init+0x160>)
 8000368:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800036c:	60d3      	str	r3, [r2, #12]

    //sampling time on channel 5 is 2.5 clocks
    ADC1->SMPR1 &= ~(ADC_SMPR1_SMP5);
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <ADC_init+0x160>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a1b      	ldr	r2, [pc, #108]	; (80003e0 <ADC_init+0x160>)
 8000374:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8000378:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (ADC_SMPR1_SMP5_0 | ADC_SMPR1_SMP5_1 |ADC_SMPR1_SMP5_2);
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <ADC_init+0x160>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <ADC_init+0x160>)
 8000380:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 8000384:	6153      	str	r3, [r2, #20]

    //put channel 5 in the regular sequence, length of 1
    ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1 | ADC_SQR1_L))|
 8000386:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <ADC_init+0x160>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	f423 63f9 	bic.w	r3, r3, #1992	; 0x7c8
 800038e:	f023 0307 	bic.w	r3, r3, #7
 8000392:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <ADC_init+0x160>)
 8000394:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
            (5 << ADC_SQR1_SQ1_Pos);

    //configure GPIO PA0 for analog input
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <ADC_init+0x158>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4a0e      	ldr	r2, [pc, #56]	; (80003d8 <ADC_init+0x158>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA ->MODER |= (GPIO_MODER_MODE0); //analog mode
 80003a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003b0:	f043 0303 	orr.w	r3, r3, #3
 80003b4:	6013      	str	r3, [r2, #0]
    GPIOA ->ASCR |= GPIO_ASCR_ASC0;      //connect analog PA0
 80003b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80003ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    //start regular sequence
    ADC1->CR |= ADC_CR_ADSTART;
 80003c6:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <ADC_init+0x160>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	4a05      	ldr	r2, [pc, #20]	; (80003e0 <ADC_init+0x160>)
 80003cc:	f043 0304 	orr.w	r3, r3, #4
 80003d0:	6093      	str	r3, [r2, #8]
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	50040300 	.word	0x50040300
 80003e0:	50040000 	.word	0x50040000

080003e4 <DMA1channel1_ADC_init>:


}

void DMA1channel1_ADC_init(uint32_t * dest)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	//enabling clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 80003ec:	4b24      	ldr	r3, [pc, #144]	; (8000480 <DMA1channel1_ADC_init+0x9c>)
 80003ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003f0:	4a23      	ldr	r2, [pc, #140]	; (8000480 <DMA1channel1_ADC_init+0x9c>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6493      	str	r3, [r2, #72]	; 0x48

    //memory to memory initialization
	DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S); //select dma channel
 80003f8:	4b22      	ldr	r3, [pc, #136]	; (8000484 <DMA1channel1_ADC_init+0xa0>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a21      	ldr	r2, [pc, #132]	; (8000484 <DMA1channel1_ADC_init+0xa0>)
 80003fe:	f023 030f 	bic.w	r3, r3, #15
 8000402:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR); //with DIR set to 0 this is the source address
 8000404:	4b20      	ldr	r3, [pc, #128]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000406:	4a21      	ldr	r2, [pc, #132]	; (800048c <DMA1channel1_ADC_init+0xa8>)
 8000408:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(dest); // with DIR set to 0 this is the destination address
 800040a:	4a1f      	ldr	r2, [pc, #124]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	60d3      	str	r3, [r2, #12]
	DMA1_Channel1->CNDTR = NUM_TO_COPY;  // number to copy
 8000410:	4b1d      	ldr	r3, [pc, #116]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000416:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR); //setting DIR to 0
 8000418:	4b1b      	ldr	r3, [pc, #108]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800041e:	f023 0310 	bic.w	r3, r3, #16
 8000422:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC); //enable circular mode
 8000424:	4b18      	ldr	r3, [pc, #96]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a17      	ldr	r2, [pc, #92]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MINC); //increments address
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a14      	ldr	r2, [pc, #80]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800043a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);//keeps address the same
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a11      	ldr	r2, [pc, #68]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000446:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR = ((DMA1_Channel1->CCR)&~(DMA_CCR_MSIZE))|(DMA_CCR_MSIZE_0);//clearing size and setting length to 16bits
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000456:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR = ((DMA1_Channel1->CCR)&~(DMA_CCR_PSIZE))|(DMA_CCR_PSIZE_0);//clearing size and setting length to 16bits
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000460:	4a09      	ldr	r2, [pc, #36]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 8000462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000466:	6013      	str	r3, [r2, #0]


//	NVIC->ISER[0] = (1<<(DMA1_Channel1_IRQn & 0x1F)); //enable interrupts for channel 1
//	__enable_irq();

	DMA1_Channel1->CCR |= (DMA_CCR_EN); //activating channel
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a06      	ldr	r2, [pc, #24]	; (8000488 <DMA1channel1_ADC_init+0xa4>)
 800046e:	f043 0301 	orr.w	r3, r3, #1
 8000472:	6013      	str	r3, [r2, #0]

}
 8000474:	bf00      	nop
 8000476:	370c      	adds	r7, #12
 8000478:	46bd      	mov	sp, r7
 800047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	400200a8 	.word	0x400200a8
 8000488:	40020008 	.word	0x40020008
 800048c:	50040040 	.word	0x50040040

08000490 <DMA1_Channel3_IRQHandler>:



void DMA1_Channel3_IRQHandler()
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF3)
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800049c:	2b00      	cmp	r3, #0
 800049e:	d01d      	beq.n	80004dc <DMA1_Channel3_IRQHandler+0x4c>
	{
	  	GPIOC->ODR ^= GPIO_ODR_OD1; //toggle off
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <DMA1_Channel3_IRQHandler+0x5c>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <DMA1_Channel3_IRQHandler+0x5c>)
 80004a6:	f083 0302 	eor.w	r3, r3, #2
 80004aa:	6153      	str	r3, [r2, #20]
		  DMA1_Channel3->CCR &= ~(DMA_CCR_EN); //disable channel 3
 80004ac:	4b10      	ldr	r3, [pc, #64]	; (80004f0 <DMA1_Channel3_IRQHandler+0x60>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a0f      	ldr	r2, [pc, #60]	; (80004f0 <DMA1_Channel3_IRQHandler+0x60>)
 80004b2:	f023 0301 	bic.w	r3, r3, #1
 80004b6:	6013      	str	r3, [r2, #0]
		  DMA1->IFCR |= (DMA_IFCR_CTCIF3); //clear interrupt flag
 80004b8:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 80004ba:	685b      	ldr	r3, [r3, #4]
 80004bc:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 80004be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004c2:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CGIF3); //clear global interrupt flag
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a07      	ldr	r2, [pc, #28]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 80004ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ce:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CHTIF3); //clear half transfer flag
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <DMA1_Channel3_IRQHandler+0x58>)
 80004d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004da:	6053      	str	r3, [r2, #4]

	}
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40020000 	.word	0x40020000
 80004ec:	48000800 	.word	0x48000800
 80004f0:	40020030 	.word	0x40020030

080004f4 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler()
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

	if(DMA1->ISR & DMA_ISR_HTIF1)
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	2b00      	cmp	r3, #0
 8000502:	d006      	beq.n	8000512 <DMA1_Channel1_IRQHandler+0x1e>
	{
		DMA1->IFCR |= (DMA_IFCR_CHTIF1); //clear half transfer flag
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 800050a:	f043 0304 	orr.w	r3, r3, #4
 800050e:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear interrupt flag
		  DMA1->IFCR |= (DMA_IFCR_CGIF1); //clear global interrupt flag

	}

}
 8000510:	e011      	b.n	8000536 <DMA1_Channel1_IRQHandler+0x42>
	else if(DMA1->ISR & DMA_ISR_TCIF1)
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	f003 0302 	and.w	r3, r3, #2
 800051a:	2b00      	cmp	r3, #0
 800051c:	d00b      	beq.n	8000536 <DMA1_Channel1_IRQHandler+0x42>
		  DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear interrupt flag
 800051e:	4b08      	ldr	r3, [pc, #32]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CGIF1); //clear global interrupt flag
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 800052c:	685b      	ldr	r3, [r3, #4]
 800052e:	4a04      	ldr	r2, [pc, #16]	; (8000540 <DMA1_Channel1_IRQHandler+0x4c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6053      	str	r3, [r2, #4]
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40020000 	.word	0x40020000

08000544 <GPIO_init>:
 */
#include "GPIO.h"
#include "main.h"

void GPIO_init()
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

	//setup on PC0 for toggling output
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN); //enable clock
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <GPIO_init+0x7c>)
 800054a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054c:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <GPIO_init+0x7c>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE0); //clearing bits setting to input
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <GPIO_init+0x80>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1a      	ldr	r2, [pc, #104]	; (80005c4 <GPIO_init+0x80>)
 800055a:	f023 0303 	bic.w	r3, r3, #3
 800055e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0); //setting output;
 8000560:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <GPIO_init+0x80>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <GPIO_init+0x80>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR0); //clear bits
 800056c:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <GPIO_init+0x80>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <GPIO_init+0x80>)
 8000572:	f023 0303 	bic.w	r3, r3, #3
 8000576:	60d3      	str	r3, [r2, #12]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0); //clear bit, set to push pull
 8000578:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <GPIO_init+0x80>)
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <GPIO_init+0x80>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6053      	str	r3, [r2, #4]

	GPIOC->MODER &= ~(GPIO_MODER_MODE1); //clearing bits setting to input
 8000584:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <GPIO_init+0x80>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <GPIO_init+0x80>)
 800058a:	f023 030c 	bic.w	r3, r3, #12
 800058e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE1_0); //setting output;
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <GPIO_init+0x80>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <GPIO_init+0x80>)
 8000596:	f043 0304 	orr.w	r3, r3, #4
 800059a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR1); //clear bits
 800059c:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <GPIO_init+0x80>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <GPIO_init+0x80>)
 80005a2:	f023 030c 	bic.w	r3, r3, #12
 80005a6:	60d3      	str	r3, [r2, #12]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT1); //clear bit, set to push pull
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <GPIO_init+0x80>)
 80005aa:	685b      	ldr	r3, [r3, #4]
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <GPIO_init+0x80>)
 80005ae:	f023 0302 	bic.w	r3, r3, #2
 80005b2:	6053      	str	r3, [r2, #4]


}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000800 	.word	0x48000800

080005c8 <UART_Init>:
#include <string.h>



void UART_Init()
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

	//Will be utilizing GPIOA Ports A2(TX) and A3(RX) for USART2
	GPIOA->AFR[0] =  (GPIOA->AFR[0]&~(GPIO_AFRL_AFSEL3_Msk|GPIO_AFRL_AFSEL2_Msk)) | (0x77<<GPIO_AFRL_AFSEL2_Pos);; //makes it AF7 for usart2
 80005cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005da:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80005de:	6213      	str	r3, [r2, #32]
	GPIOA->MODER = ((GPIOA->MODER) &~ (GPIO_MODER_MODE3_Msk|GPIO_MODER_MODE2_Msk))|(0b1010<<GPIO_MODER_MODE2_Pos); //set as AF
 80005e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005ea:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ee:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80005f2:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR = GPIOA->PUPDR &~ (GPIO_PUPDR_PUPD3_Msk|GPIO_PUPDR_PUPD2_Msk); // set pull-up pull-down to 00
 80005f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000602:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER = GPIOA->OTYPER &~ (GPIO_OTYPER_OT3_Msk|GPIO_OTYPER_OT2_Msk); // set push-pull
 8000604:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060e:	f023 030c 	bic.w	r3, r3, #12
 8000612:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN_Msk);
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <UART_Init+0xb0>)
 8000616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <UART_Init+0xb0>)
 800061a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061e:	6593      	str	r3, [r2, #88]	; 0x58

	//Declare the length of the transmitted word: 8 for ascii
	USART2->CR1 = USART2->CR1 &~ (USART_CR1_M1_Msk|USART_CR1_M0_Msk); //set 0 0 for length 8
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <UART_Init+0xb4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a15      	ldr	r2, [pc, #84]	; (800067c <UART_Init+0xb4>)
 8000626:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 800062a:	6013      	str	r3, [r2, #0]
	//Declare desired baud rate: for 4M/9600 = 416 also oversampling by 16
	USART2->BRR = BRR_VALUE;
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <UART_Init+0xb4>)
 800062e:	f242 028d 	movw	r2, #8333	; 0x208d
 8000632:	60da      	str	r2, [r3, #12]
	//Declare the amount of stop bits: 1
	USART2->CR2 &= ~(USART_CR2_STOP_Msk);
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <UART_Init+0xb4>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	4a10      	ldr	r2, [pc, #64]	; (800067c <UART_Init+0xb4>)
 800063a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800063e:	6053      	str	r3, [r2, #4]

	//Usart Enable Bit
	USART2->CR1 |= (USART_CR1_UE);
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <UART_Init+0xb4>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a0d      	ldr	r2, [pc, #52]	; (800067c <UART_Init+0xb4>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

	//Transmit And Receive Enable Bits
	USART2->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <UART_Init+0xb4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a0a      	ldr	r2, [pc, #40]	; (800067c <UART_Init+0xb4>)
 8000652:	f043 030c 	orr.w	r3, r3, #12
 8000656:	6013      	str	r3, [r2, #0]

	//Receive interrupt enable
	USART2->CR1 |= (USART_CR1_RXNEIE);
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <UART_Init+0xb4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <UART_Init+0xb4>)
 800065e:	f043 0320 	orr.w	r3, r3, #32
 8000662:	6013      	str	r3, [r2, #0]

	//enable USART2 ISR in NVIC
	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <UART_Init+0xb8>)
 8000666:	2240      	movs	r2, #64	; 0x40
 8000668:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800066a:	b662      	cpsie	i
}
 800066c:	bf00      	nop


	__enable_irq();
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40021000 	.word	0x40021000
 800067c:	40004400 	.word	0x40004400
 8000680:	e000e100 	.word	0xe000e100

08000684 <UART_print>:

void UART_print(char *outputstring)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 800068c:	2300      	movs	r3, #0
 800068e:	81fb      	strh	r3, [r7, #14]
 8000690:	e010      	b.n	80006b4 <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 8000692:	bf00      	nop
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <UART_print+0x48>)
 8000696:	69db      	ldr	r3, [r3, #28]
 8000698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069c:	2b00      	cmp	r3, #0
 800069e:	d0f9      	beq.n	8000694 <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 80006a0:	89fb      	ldrh	r3, [r7, #14]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781a      	ldrb	r2, [r3, #0]
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <UART_print+0x48>)
 80006aa:	b292      	uxth	r2, r2
 80006ac:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	3301      	adds	r3, #1
 80006b2:	81fb      	strh	r3, [r7, #14]
 80006b4:	89fc      	ldrh	r4, [r7, #14]
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f7ff fd8a 	bl	80001d0 <strlen>
 80006bc:	4603      	mov	r3, r0
 80006be:	429c      	cmp	r4, r3
 80006c0:	d3e7      	bcc.n	8000692 <UART_print+0xe>
	}

}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}
 80006cc:	40004400 	.word	0x40004400

080006d0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	uint8_t RX = USART2->RDR;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <USART2_IRQHandler+0x40>)
 80006d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80006da:	b29b      	uxth	r3, r3
 80006dc:	71fb      	strb	r3, [r7, #7]
	char tempstr[6]={'\0'};
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b0d      	cmp	r3, #13
 80006ea:	d002      	beq.n	80006f2 <USART2_IRQHandler+0x22>
 80006ec:	2b4a      	cmp	r3, #74	; 0x4a
 80006ee:	d007      	beq.n	8000700 <USART2_IRQHandler+0x30>

			if(RX-0x30>=0 && RX-0x30<=9)
			{

			}
				break;
 80006f0:	e00a      	b.n	8000708 <USART2_IRQHandler+0x38>
			UART_escapes("[1B");//move down 1 line
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <USART2_IRQHandler+0x44>)
 80006f4:	f000 f814 	bl	8000720 <UART_escapes>
			UART_escapes("\r"); //carriage return
 80006f8:	4807      	ldr	r0, [pc, #28]	; (8000718 <USART2_IRQHandler+0x48>)
 80006fa:	f000 f811 	bl	8000720 <UART_escapes>
			break;
 80006fe:	e003      	b.n	8000708 <USART2_IRQHandler+0x38>
			UART_escapes("[2J"); //clear everything
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <USART2_IRQHandler+0x4c>)
 8000702:	f000 f80d 	bl	8000720 <UART_escapes>
			break;
 8000706:	bf00      	nop
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40004400 	.word	0x40004400
 8000714:	08003214 	.word	0x08003214
 8000718:	08003218 	.word	0x08003218
 800071c:	0800321c 	.word	0x0800321c

08000720 <UART_escapes>:

void UART_escapes(char *escstring)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8000728:	bf00      	nop
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <UART_escapes+0x2c>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000732:	2b00      	cmp	r3, #0
 8000734:	d0f9      	beq.n	800072a <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <UART_escapes+0x2c>)
 8000738:	221b      	movs	r2, #27
 800073a:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ffa1 	bl	8000684 <UART_print>

}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40004400 	.word	0x40004400

08000750 <printmag>:
#include "DMA.h"
#include "UART_plotter.h"
#include "UART.h"

void printmag(int16_t outputpoints[512], uint16_t max)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	807b      	strh	r3, [r7, #2]
	int16_t outputmag = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	817b      	strh	r3, [r7, #10]
	uint16_t maxmag = max/20;
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	4a38      	ldr	r2, [pc, #224]	; (8000844 <printmag+0xf4>)
 8000764:	fba2 2303 	umull	r2, r3, r2, r3
 8000768:	091b      	lsrs	r3, r3, #4
 800076a:	813b      	strh	r3, [r7, #8]
	uint8_t mag = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]

	UART_escapes("[H");
 8000770:	4835      	ldr	r0, [pc, #212]	; (8000848 <printmag+0xf8>)
 8000772:	f7ff ffd5 	bl	8000720 <UART_escapes>
	UART_escapes("[4C");
 8000776:	4835      	ldr	r0, [pc, #212]	; (800084c <printmag+0xfc>)
 8000778:	f7ff ffd2 	bl	8000720 <UART_escapes>
	UART_escapes("[3B");
 800077c:	4834      	ldr	r0, [pc, #208]	; (8000850 <printmag+0x100>)
 800077e:	f7ff ffcf 	bl	8000720 <UART_escapes>
	UART_escapes("[2C");
 8000782:	4834      	ldr	r0, [pc, #208]	; (8000854 <printmag+0x104>)
 8000784:	f7ff ffcc 	bl	8000720 <UART_escapes>
	UART_escapes("[24B");
 8000788:	4833      	ldr	r0, [pc, #204]	; (8000858 <printmag+0x108>)
 800078a:	f7ff ffc9 	bl	8000720 <UART_escapes>
	UART_escapes("[s");
 800078e:	4833      	ldr	r0, [pc, #204]	; (800085c <printmag+0x10c>)
 8000790:	f7ff ffc6 	bl	8000720 <UART_escapes>
	for(mag = 0; mag<outputpoints[0]/maxmag; mag++)
 8000794:	2300      	movs	r3, #0
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e008      	b.n	80007ac <printmag+0x5c>
	{
		UART_print("*");
 800079a:	4831      	ldr	r0, [pc, #196]	; (8000860 <printmag+0x110>)
 800079c:	f7ff ff72 	bl	8000684 <UART_print>
		UART_escapes("[1A");
 80007a0:	4830      	ldr	r0, [pc, #192]	; (8000864 <printmag+0x114>)
 80007a2:	f7ff ffbd 	bl	8000720 <UART_escapes>
	for(mag = 0; mag<outputpoints[0]/maxmag; mag++)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	3301      	adds	r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	7bfa      	ldrb	r2, [r7, #15]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b4:	4619      	mov	r1, r3
 80007b6:	893b      	ldrh	r3, [r7, #8]
 80007b8:	fb91 f3f3 	sdiv	r3, r1, r3
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbec      	blt.n	800079a <printmag+0x4a>

	}



	for(uint16_t index = 2; index+2 < LENGTH_OF_FFT; index=index+4)
 80007c0:	2302      	movs	r3, #2
 80007c2:	81bb      	strh	r3, [r7, #12]
 80007c4:	e035      	b.n	8000832 <printmag+0xe2>
	{
		outputpoints[index];
		outputmag = (outputpoints[index]+outputpoints[index+2])/2;
 80007c6:	89bb      	ldrh	r3, [r7, #12]
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007d2:	4619      	mov	r1, r3
 80007d4:	89bb      	ldrh	r3, [r7, #12]
 80007d6:	3302      	adds	r3, #2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	4413      	add	r3, r2
 80007de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e2:	440b      	add	r3, r1
 80007e4:	0fda      	lsrs	r2, r3, #31
 80007e6:	4413      	add	r3, r2
 80007e8:	105b      	asrs	r3, r3, #1
 80007ea:	817b      	strh	r3, [r7, #10]
		UART_escapes("8");
 80007ec:	481e      	ldr	r0, [pc, #120]	; (8000868 <printmag+0x118>)
 80007ee:	f7ff ff97 	bl	8000720 <UART_escapes>
		UART_escapes("[2C");
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <printmag+0x104>)
 80007f4:	f7ff ff94 	bl	8000720 <UART_escapes>
		UART_escapes("[s");
 80007f8:	4818      	ldr	r0, [pc, #96]	; (800085c <printmag+0x10c>)
 80007fa:	f7ff ff91 	bl	8000720 <UART_escapes>

		for(mag = 0; mag<outputmag/maxmag; mag++)
 80007fe:	2300      	movs	r3, #0
 8000800:	73fb      	strb	r3, [r7, #15]
 8000802:	e00b      	b.n	800081c <printmag+0xcc>
		{
			UART_print("*");
 8000804:	4816      	ldr	r0, [pc, #88]	; (8000860 <printmag+0x110>)
 8000806:	f7ff ff3d 	bl	8000684 <UART_print>
			UART_escapes("[1A");
 800080a:	4816      	ldr	r0, [pc, #88]	; (8000864 <printmag+0x114>)
 800080c:	f7ff ff88 	bl	8000720 <UART_escapes>
			UART_escapes("[1D");
 8000810:	4816      	ldr	r0, [pc, #88]	; (800086c <printmag+0x11c>)
 8000812:	f7ff ff85 	bl	8000720 <UART_escapes>
		for(mag = 0; mag<outputmag/maxmag; mag++)
 8000816:	7bfb      	ldrb	r3, [r7, #15]
 8000818:	3301      	adds	r3, #1
 800081a:	73fb      	strb	r3, [r7, #15]
 800081c:	7bfa      	ldrb	r2, [r7, #15]
 800081e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8000822:	893b      	ldrh	r3, [r7, #8]
 8000824:	fb91 f3f3 	sdiv	r3, r1, r3
 8000828:	429a      	cmp	r2, r3
 800082a:	dbeb      	blt.n	8000804 <printmag+0xb4>
	for(uint16_t index = 2; index+2 < LENGTH_OF_FFT; index=index+4)
 800082c:	89bb      	ldrh	r3, [r7, #12]
 800082e:	3304      	adds	r3, #4
 8000830:	81bb      	strh	r3, [r7, #12]
 8000832:	89bb      	ldrh	r3, [r7, #12]
 8000834:	2bfd      	cmp	r3, #253	; 0xfd
 8000836:	d9c6      	bls.n	80007c6 <printmag+0x76>
		}

	}

}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3710      	adds	r7, #16
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	cccccccd 	.word	0xcccccccd
 8000848:	08003220 	.word	0x08003220
 800084c:	08003224 	.word	0x08003224
 8000850:	08003228 	.word	0x08003228
 8000854:	0800322c 	.word	0x0800322c
 8000858:	08003230 	.word	0x08003230
 800085c:	08003238 	.word	0x08003238
 8000860:	0800323c 	.word	0x0800323c
 8000864:	08003240 	.word	0x08003240
 8000868:	08003244 	.word	0x08003244
 800086c:	08003248 	.word	0x08003248

08000870 <eraseplot>:

void eraseplot()
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	UART_escapes("[H");
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <eraseplot+0x48>)
 8000878:	f7ff ff52 	bl	8000720 <UART_escapes>
	UART_escapes("[4C");
 800087c:	480f      	ldr	r0, [pc, #60]	; (80008bc <eraseplot+0x4c>)
 800087e:	f7ff ff4f 	bl	8000720 <UART_escapes>
	UART_escapes("[3B");
 8000882:	480f      	ldr	r0, [pc, #60]	; (80008c0 <eraseplot+0x50>)
 8000884:	f7ff ff4c 	bl	8000720 <UART_escapes>
	UART_escapes("[2C");
 8000888:	480e      	ldr	r0, [pc, #56]	; (80008c4 <eraseplot+0x54>)
 800088a:	f7ff ff49 	bl	8000720 <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 800088e:	2300      	movs	r3, #0
 8000890:	80fb      	strh	r3, [r7, #6]
 8000892:	e008      	b.n	80008a6 <eraseplot+0x36>
		{
			UART_escapes("[K");
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <eraseplot+0x58>)
 8000896:	f7ff ff43 	bl	8000720 <UART_escapes>
			UART_escapes("[1B");
 800089a:	480c      	ldr	r0, [pc, #48]	; (80008cc <eraseplot+0x5c>)
 800089c:	f7ff ff40 	bl	8000720 <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 80008a0:	88fb      	ldrh	r3, [r7, #6]
 80008a2:	3301      	adds	r3, #1
 80008a4:	80fb      	strh	r3, [r7, #6]
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	2b18      	cmp	r3, #24
 80008aa:	d9f3      	bls.n	8000894 <eraseplot+0x24>


		}
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08003220 	.word	0x08003220
 80008bc:	08003224 	.word	0x08003224
 80008c0:	08003228 	.word	0x08003228
 80008c4:	0800322c 	.word	0x0800322c
 80008c8:	0800324c 	.word	0x0800324c
 80008cc:	08003250 	.word	0x08003250

080008d0 <printgraph>:


void printgraph()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
	UART_escapes("[H");
 80008d6:	481b      	ldr	r0, [pc, #108]	; (8000944 <printgraph+0x74>)
 80008d8:	f7ff ff22 	bl	8000720 <UART_escapes>

	//[nB down n lines, [nA up n lines, [nC right n lines, [nD left n lines
	UART_escapes("[4C");
 80008dc:	481a      	ldr	r0, [pc, #104]	; (8000948 <printgraph+0x78>)
 80008de:	f7ff ff1f 	bl	8000720 <UART_escapes>
	UART_escapes("[3B");
 80008e2:	481a      	ldr	r0, [pc, #104]	; (800094c <printgraph+0x7c>)
 80008e4:	f7ff ff1c 	bl	8000720 <UART_escapes>
	UART_escapes("[1C");
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <printgraph+0x80>)
 80008ea:	f7ff ff19 	bl	8000720 <UART_escapes>
	UART_escapes("[s");
 80008ee:	4819      	ldr	r0, [pc, #100]	; (8000954 <printgraph+0x84>)
 80008f0:	f7ff ff16 	bl	8000720 <UART_escapes>
	UART_escapes("[1D");
 80008f4:	4818      	ldr	r0, [pc, #96]	; (8000958 <printgraph+0x88>)
 80008f6:	f7ff ff13 	bl	8000720 <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 80008fa:	2300      	movs	r3, #0
 80008fc:	81fb      	strh	r3, [r7, #14]
 80008fe:	e00b      	b.n	8000918 <printgraph+0x48>
	{
		UART_print("|");
 8000900:	4816      	ldr	r0, [pc, #88]	; (800095c <printgraph+0x8c>)
 8000902:	f7ff febf 	bl	8000684 <UART_print>
		UART_escapes("[1B");
 8000906:	4816      	ldr	r0, [pc, #88]	; (8000960 <printgraph+0x90>)
 8000908:	f7ff ff0a 	bl	8000720 <UART_escapes>
		UART_escapes("[1D");
 800090c:	4812      	ldr	r0, [pc, #72]	; (8000958 <printgraph+0x88>)
 800090e:	f7ff ff07 	bl	8000720 <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 8000912:	89fb      	ldrh	r3, [r7, #14]
 8000914:	3301      	adds	r3, #1
 8000916:	81fb      	strh	r3, [r7, #14]
 8000918:	89fb      	ldrh	r3, [r7, #14]
 800091a:	2b18      	cmp	r3, #24
 800091c:	d9f0      	bls.n	8000900 <printgraph+0x30>


	}

	uint16_t freq = 128;
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	817b      	strh	r3, [r7, #10]
	char freqstr1[4];
	for(uint16_t horizontalborder = 0; horizontalborder <128; horizontalborder++)
 8000922:	2300      	movs	r3, #0
 8000924:	81bb      	strh	r3, [r7, #12]
 8000926:	e005      	b.n	8000934 <printgraph+0x64>
	{


			UART_print("_");
 8000928:	480e      	ldr	r0, [pc, #56]	; (8000964 <printgraph+0x94>)
 800092a:	f7ff feab 	bl	8000684 <UART_print>
	for(uint16_t horizontalborder = 0; horizontalborder <128; horizontalborder++)
 800092e:	89bb      	ldrh	r3, [r7, #12]
 8000930:	3301      	adds	r3, #1
 8000932:	81bb      	strh	r3, [r7, #12]
 8000934:	89bb      	ldrh	r3, [r7, #12]
 8000936:	2b7f      	cmp	r3, #127	; 0x7f
 8000938:	d9f6      	bls.n	8000928 <printgraph+0x58>
//		itoa(freq,freqstr1, 10);
//		UART_print(freqstr1);
//		freq +=128;
//	}

}
 800093a:	bf00      	nop
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	08003220 	.word	0x08003220
 8000948:	08003224 	.word	0x08003224
 800094c:	08003228 	.word	0x08003228
 8000950:	08003254 	.word	0x08003254
 8000954:	08003238 	.word	0x08003238
 8000958:	08003248 	.word	0x08003248
 800095c:	08003258 	.word	0x08003258
 8000960:	08003250 	.word	0x08003250
 8000964:	0800325c 	.word	0x0800325c

08000968 <printnumbers>:

void printnumbers()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
	uint16_t freq = 100;
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	81fb      	strh	r3, [r7, #14]
	uint16_t num = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	817b      	strh	r3, [r7, #10]
	char spacingstr[4];
	char freqstr1[4];
	UART_escapes("[128D");
 8000976:	4817      	ldr	r0, [pc, #92]	; (80009d4 <printnumbers+0x6c>)
 8000978:	f7ff fed2 	bl	8000720 <UART_escapes>
	UART_escapes("[1B");
 800097c:	4816      	ldr	r0, [pc, #88]	; (80009d8 <printnumbers+0x70>)
 800097e:	f7ff fecf 	bl	8000720 <UART_escapes>
	uint16_t placenum=0;
 8000982:	2300      	movs	r3, #0
 8000984:	81bb      	strh	r3, [r7, #12]
	for(placenum=0; placenum<10; ++placenum)
 8000986:	2300      	movs	r3, #0
 8000988:	81bb      	strh	r3, [r7, #12]
 800098a:	e01b      	b.n	80009c4 <printnumbers+0x5c>
	{
		itoa(freq,freqstr1, 10);
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	4639      	mov	r1, r7
 8000990:	220a      	movs	r2, #10
 8000992:	4618      	mov	r0, r3
 8000994:	f001 ffb8 	bl	8002908 <itoa>
		num = 14-(sizeof(freqstr1)/sizeof(char));
 8000998:	230a      	movs	r3, #10
 800099a:	817b      	strh	r3, [r7, #10]
		sprintf(spacingstr, "[%dC", num);
 800099c:	897a      	ldrh	r2, [r7, #10]
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	490e      	ldr	r1, [pc, #56]	; (80009dc <printnumbers+0x74>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f001 ffba 	bl	800291c <siprintf>
		UART_escapes(spacingstr);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff feb8 	bl	8000720 <UART_escapes>
		UART_print(freqstr1);
 80009b0:	463b      	mov	r3, r7
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe66 	bl	8000684 <UART_print>
		freq +=100;
 80009b8:	89fb      	ldrh	r3, [r7, #14]
 80009ba:	3364      	adds	r3, #100	; 0x64
 80009bc:	81fb      	strh	r3, [r7, #14]
	for(placenum=0; placenum<10; ++placenum)
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	3301      	adds	r3, #1
 80009c2:	81bb      	strh	r3, [r7, #12]
 80009c4:	89bb      	ldrh	r3, [r7, #12]
 80009c6:	2b09      	cmp	r3, #9
 80009c8:	d9e0      	bls.n	800098c <printnumbers+0x24>
	}
}
 80009ca:	bf00      	nop
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	08003260 	.word	0x08003260
 80009d8:	08003250 	.word	0x08003250
 80009dc:	08003268 	.word	0x08003268

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	f5ad 5d10 	sub.w	sp, sp, #9216	; 0x2400
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t collectedsamples[LENGTH_OF_ARRAY] = {0}; //create array for 2x size of samples collected per f calculation
 80009ea:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80009ee:	3b14      	subs	r3, #20
 80009f0:	4618      	mov	r0, r3
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	461a      	mov	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f001 ff87 	bl	800290c <memset>
	q15_t testOutput[LENGTH_OF_FFT*2] = {0};
 80009fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a02:	3b14      	subs	r3, #20
 8000a04:	4618      	mov	r0, r3
 8000a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f001 ff7d 	bl	800290c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 fa72 	bl	8000efa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f911 	bl	8000c3c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  GPIO_init();
 8000a1a:	f7ff fd93 	bl	8000544 <GPIO_init>
  ADC_init();
 8000a1e:	f7ff fc2f 	bl	8000280 <ADC_init>
  DMA1channel1_ADC_init(collectedsamples);
 8000a22:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000a26:	3b14      	subs	r3, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fcdb 	bl	80003e4 <DMA1channel1_ADC_init>
  tim2_init();
 8000a2e:	f000 f9f3 	bl	8000e18 <tim2_init>
  UART_Init();
 8000a32:	f7ff fdc9 	bl	80005c8 <UART_Init>

  q15_t * sampleloc1 =  (q15_t *)&collectedsamples;
 8000a36:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000a3a:	3b14      	subs	r3, #20
 8000a3c:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000a40:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000a44:	6013      	str	r3, [r2, #0]
  q15_t * sampleloc2 =  (q15_t *)&collectedsamples[2047];
 8000a46:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000a4a:	3b14      	subs	r3, #20
 8000a4c:	f603 73fe 	addw	r3, r3, #4094	; 0xffe
 8000a50:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000a54:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000a58:	6013      	str	r3, [r2, #0]
  q15_t * outputloc = &testOutput[0];
 8000a5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a5e:	3b14      	subs	r3, #20
 8000a60:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000a64:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000a68:	6013      	str	r3, [r2, #0]
  q15_t * maxfreq = &testOutput[1];
 8000a6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a6e:	3b14      	subs	r3, #20
 8000a70:	3302      	adds	r3, #2
 8000a72:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000a76:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000a7a:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  UART_escapes("[2J");
 8000a7c:	4867      	ldr	r0, [pc, #412]	; (8000c1c <main+0x23c>)
 8000a7e:	f7ff fe4f 	bl	8000720 <UART_escapes>
	  UART_escapes("[H");
 8000a82:	4867      	ldr	r0, [pc, #412]	; (8000c20 <main+0x240>)
 8000a84:	f7ff fe4c 	bl	8000720 <UART_escapes>
  	  UART_print("Frequency: ");
 8000a88:	4866      	ldr	r0, [pc, #408]	; (8000c24 <main+0x244>)
 8000a8a:	f7ff fdfb 	bl	8000684 <UART_print>
  	  UART_escapes("[s");
 8000a8e:	4866      	ldr	r0, [pc, #408]	; (8000c28 <main+0x248>)
 8000a90:	f7ff fe46 	bl	8000720 <UART_escapes>
  	  char freqstring[4];
	  q15_t max;
	  uint32_t index;
	  arm_rfft_instance_q15 fft1;
	  arm_rfft_init_q15(&fft1, LENGTH_OF_FFT, 0, 1);
 8000a94:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000a98:	3838      	subs	r0, #56	; 0x38
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa2:	f001 fabf 	bl	8002024 <arm_rfft_init_q15>
	  printgraph();
 8000aa6:	f7ff ff13 	bl	80008d0 <printgraph>
	  printnumbers();
 8000aaa:	f7ff ff5d 	bl	8000968 <printnumbers>
  while (1)
  {


	  if(DMA1->ISR & DMA_ISR_HTIF1)
 8000aae:	4b5f      	ldr	r3, [pc, #380]	; (8000c2c <main+0x24c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d060      	beq.n	8000b7c <main+0x19c>
	  	{
		eraseplot();
 8000aba:	f7ff fed9 	bl	8000870 <eraseplot>

		  arm_rfft_q15(&fft1, sampleloc1, outputloc);
 8000abe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ac2:	3b38      	subs	r3, #56	; 0x38
 8000ac4:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000ac8:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000acc:	6812      	ldr	r2, [r2, #0]
 8000ace:	f507 5110 	add.w	r1, r7, #9216	; 0x2400
 8000ad2:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8000ad6:	6809      	ldr	r1, [r1, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fa09 	bl	8001ef0 <arm_rfft_q15>

		  testOutput[0]=0;
 8000ade:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ae2:	3b14      	subs	r3, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	801a      	strh	r2, [r3, #0]
		  arm_max_q15(&outputloc[1], (LENGTH_OF_FFT*2)-1 ,&max ,&index);
 8000ae8:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000aec:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1c98      	adds	r0, r3, #2
 8000af4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000af8:	3b20      	subs	r3, #32
 8000afa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000afe:	3a1a      	subs	r2, #26
 8000b00:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000b04:	f001 f9a2 	bl	8001e4c <arm_max_q15>

		  freq = index/2;
 8000b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b0c:	3b20      	subs	r3, #32
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	085b      	lsrs	r3, r3, #1
 8000b12:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000b16:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000b1a:	6013      	str	r3, [r2, #0]
			itoa(freq*(8), freqstring, 10);
 8000b1c:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000b20:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	00d8      	lsls	r0, r3, #3
 8000b28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b2c:	3b18      	subs	r3, #24
 8000b2e:	220a      	movs	r2, #10
 8000b30:	4619      	mov	r1, r3
 8000b32:	f001 fee9 	bl	8002908 <itoa>
//			GPIOC->ODR ^= GPIO_ODR_OD1;
//			UART_escapes("8");
//			UART_escapes("[K");
//			UART_print(freqstring);
//			GPIOC->ODR ^= GPIO_ODR_OD1;
			printmag(testOutput, (uint16_t)max);
 8000b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b3a:	3b1a      	subs	r3, #26
 8000b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b46:	3b14      	subs	r3, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe00 	bl	8000750 <printmag>
			UART_escapes("[H");
 8000b50:	4833      	ldr	r0, [pc, #204]	; (8000c20 <main+0x240>)
 8000b52:	f7ff fde5 	bl	8000720 <UART_escapes>
			UART_escapes("[11C");
 8000b56:	4836      	ldr	r0, [pc, #216]	; (8000c30 <main+0x250>)
 8000b58:	f7ff fde2 	bl	8000720 <UART_escapes>
			UART_escapes("[K");
 8000b5c:	4835      	ldr	r0, [pc, #212]	; (8000c34 <main+0x254>)
 8000b5e:	f7ff fddf 	bl	8000720 <UART_escapes>
			UART_print(freqstring);
 8000b62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b66:	3b18      	subs	r3, #24
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fd8b 	bl	8000684 <UART_print>



	  		DMA1->IFCR |= (DMA_IFCR_CHTIF1); //clear half transfer flag
 8000b6e:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <main+0x24c>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <main+0x24c>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6053      	str	r3, [r2, #4]
 8000b7a:	e798      	b.n	8000aae <main+0xce>

//	  		DMA1->IFCR |= (DMA_IFCR_CGIF1);
	  	}
	  else if(DMA1->ISR & DMA_ISR_TCIF1)
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <main+0x24c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d092      	beq.n	8000aae <main+0xce>
	  	  	{



	  		  arm_rfft_q15(&fft1, sampleloc2, outputloc);
 8000b88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b8c:	3b38      	subs	r3, #56	; 0x38
 8000b8e:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000b92:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	f507 5110 	add.w	r1, r7, #9216	; 0x2400
 8000b9c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000ba0:	6809      	ldr	r1, [r1, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f9a4 	bl	8001ef0 <arm_rfft_q15>
	  		  testOutput[0]=0;
 8000ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bac:	3b14      	subs	r3, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
	  		  arm_max_q15(&outputloc[1], (LENGTH_OF_FFT*2)-1 ,&max ,&index);
 8000bb2:	f507 5310 	add.w	r3, r7, #9216	; 0x2400
 8000bb6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	1c98      	adds	r0, r3, #2
 8000bbe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bc2:	3b20      	subs	r3, #32
 8000bc4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000bc8:	3a1a      	subs	r2, #26
 8000bca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000bce:	f001 f93d 	bl	8001e4c <arm_max_q15>
	  		  freq = index/2;
 8000bd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd6:	3b20      	subs	r3, #32
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	085b      	lsrs	r3, r3, #1
 8000bdc:	f507 5210 	add.w	r2, r7, #9216	; 0x2400
 8000be0:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8000be4:	6013      	str	r3, [r2, #0]
	  		itoa(freq*(2048/LENGTH_OF_FFT), freqstring, 10);
 8000be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bea:	3b18      	subs	r3, #24
 8000bec:	220a      	movs	r2, #10
 8000bee:	4619      	mov	r1, r3
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f001 fe89 	bl	8002908 <itoa>
	  		UART_escapes("8");
 8000bf6:	4810      	ldr	r0, [pc, #64]	; (8000c38 <main+0x258>)
 8000bf8:	f7ff fd92 	bl	8000720 <UART_escapes>
	  		UART_escapes("[K");
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <main+0x254>)
 8000bfe:	f7ff fd8f 	bl	8000720 <UART_escapes>
	  		UART_print(freqstring);
 8000c02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c06:	3b18      	subs	r3, #24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fd3b 	bl	8000684 <UART_print>

	  	  		DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear half transfer flag
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <main+0x24c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	4a06      	ldr	r2, [pc, #24]	; (8000c2c <main+0x24c>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6053      	str	r3, [r2, #4]
	  if(DMA1->ISR & DMA_ISR_HTIF1)
 8000c1a:	e748      	b.n	8000aae <main+0xce>
 8000c1c:	08003270 	.word	0x08003270
 8000c20:	08003274 	.word	0x08003274
 8000c24:	08003278 	.word	0x08003278
 8000c28:	08003284 	.word	0x08003284
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	08003288 	.word	0x08003288
 8000c34:	08003290 	.word	0x08003290
 8000c38:	08003294 	.word	0x08003294

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b096      	sub	sp, #88	; 0x58
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2244      	movs	r2, #68	; 0x44
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fe5e 	bl	800290c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c62:	f000 fad7 	bl	8001214 <HAL_PWREx_ControlVoltageScaling>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c6c:	f000 f838 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c70:	2310      	movs	r3, #16
 8000c72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c8c:	2328      	movs	r3, #40	; 0x28
 8000c8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c90:	2307      	movs	r3, #7
 8000c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fb0d 	bl	80012c0 <HAL_RCC_OscConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000cac:	f000 f818 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb0:	230f      	movs	r3, #15
 8000cb2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	2104      	movs	r1, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fed3 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000cd4:	f000 f804 	bl	8000ce0 <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3758      	adds	r7, #88	; 0x58
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_MspInit+0x44>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_MspInit+0x44>)
 8000d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x44>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6593      	str	r3, [r2, #88]	; 0x58
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x44>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <NMI_Handler+0x4>

08000d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <HardFault_Handler+0x4>

08000d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <MemManage_Handler+0x4>

08000d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d80:	f000 f910 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f001 fd64 	bl	8002884 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20018000 	.word	0x20018000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	2000008c 	.word	0x2000008c
 8000df0:	200000b0 	.word	0x200000b0

08000df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	; (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <tim2_init>:

/*
 * setup timer 2
 */
void tim2_init()
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	//capture compare mode ch2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // enable clock for tim2
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <tim2_init+0x8c>)
 8000e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <tim2_init+0x8c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->CCER |= (TIM_CCER_CC2E);        // enable capture compare
 8000e28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e2c:	6a1b      	ldr	r3, [r3, #32]
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC2P);       // rising edge non inverted
 8000e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e3c:	6a1b      	ldr	r3, [r3, #32]
 8000e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e42:	f023 0320 	bic.w	r3, r3, #32
 8000e46:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC2NP);
 8000e48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e56:	6213      	str	r3, [r2, #32]
	TIM2->CCR2 = 0;
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S); // set as output
 8000e60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e6e:	6193      	str	r3, [r2, #24]

	TIM2-> CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_0); //
 8000e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e7a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e7e:	6193      	str	r3, [r2, #24]

	TIM2->ARR = ARR_VALUE; //setting
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	f649 0296 	movw	r2, #39062	; 0x9896
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= (TIM_CR1_CEN);
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6013      	str	r3, [r2, #0]

}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eac:	f7ff ffa2 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb2:	490d      	ldr	r1, [pc, #52]	; (8000ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <LoopForever+0xe>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb8:	e002      	b.n	8000ec0 <LoopCopyDataInit>

08000eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ebe:	3304      	adds	r3, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec4:	d3f9      	bcc.n	8000eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec8:	4c0a      	ldr	r4, [pc, #40]	; (8000ef4 <LoopForever+0x16>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ecc:	e001      	b.n	8000ed2 <LoopFillZerobss>

08000ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed0:	3204      	adds	r2, #4

08000ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed4:	d3fb      	bcc.n	8000ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed6:	f001 fcdb 	bl	8002890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eda:	f7ff fd81 	bl	80009e0 <main>

08000ede <LoopForever>:

LoopForever:
    b LoopForever
 8000ede:	e7fe      	b.n	8000ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000eec:	08015190 	.word	0x08015190
  ldr r2, =_sbss
 8000ef0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ef4:	200000ac 	.word	0x200000ac

08000ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ef8:	e7fe      	b.n	8000ef8 <ADC1_2_IRQHandler>

08000efa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f943 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f000 f80e 	bl	8000f2c <HAL_InitTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	71fb      	strb	r3, [r7, #7]
 8000f1a:	e001      	b.n	8000f20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1c:	f7ff fee6 	bl	8000cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_InitTick+0x6c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d023      	beq.n	8000f88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f40:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <HAL_InitTick+0x70>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_InitTick+0x6c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f941 	bl	80011de <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10f      	bne.n	8000f82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d809      	bhi.n	8000f7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f70:	f000 f919 	bl	80011a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f74:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <HAL_InitTick+0x74>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e007      	b.n	8000f8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e004      	b.n	8000f8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e001      	b.n	8000f8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000008 	.word	0x20000008
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	20000098 	.word	0x20000098

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000098 	.word	0x20000098

08000fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000008 	.word	0x20000008

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff5c 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffb0 	bl	800114c <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <HAL_PWREx_GetVoltageRange+0x18>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40007000 	.word	0x40007000

08001214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001222:	d130      	bne.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001224:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001230:	d038      	beq.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2232      	movs	r2, #50	; 0x32
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9b      	lsrs	r3, r3, #18
 8001254:	3301      	adds	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	e002      	b.n	8001260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3b01      	subs	r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126c:	d102      	bne.n	8001274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f2      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800127c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001280:	d110      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e00f      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800128e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001292:	d007      	beq.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800129c:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40007000 	.word	0x40007000
 80012b8:	20000000 	.word	0x20000000
 80012bc:	431bde83 	.word	0x431bde83

080012c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e3c6      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012d2:	4ba1      	ldr	r3, [pc, #644]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012dc:	4b9e      	ldr	r3, [pc, #632]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0310 	and.w	r3, r3, #16
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80e4 	beq.w	80014bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d007      	beq.n	800130a <HAL_RCC_OscConfig+0x4a>
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	f040 808b 	bne.w	8001418 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b01      	cmp	r3, #1
 8001306:	f040 8087 	bne.w	8001418 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800130a:	4b93      	ldr	r3, [pc, #588]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d005      	beq.n	8001322 <HAL_RCC_OscConfig+0x62>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e39e      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1a      	ldr	r2, [r3, #32]
 8001326:	4b8c      	ldr	r3, [pc, #560]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d004      	beq.n	800133c <HAL_RCC_OscConfig+0x7c>
 8001332:	4b89      	ldr	r3, [pc, #548]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800133a:	e005      	b.n	8001348 <HAL_RCC_OscConfig+0x88>
 800133c:	4b86      	ldr	r3, [pc, #536]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800133e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001348:	4293      	cmp	r3, r2
 800134a:	d223      	bcs.n	8001394 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fd1b 	bl	8001d8c <RCC_SetFlashLatencyFromMSIRange>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e37f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001360:	4b7d      	ldr	r3, [pc, #500]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a7c      	ldr	r2, [pc, #496]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b7a      	ldr	r3, [pc, #488]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4977      	ldr	r1, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800137a:	4313      	orrs	r3, r2
 800137c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4972      	ldr	r1, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
 8001392:	e025      	b.n	80013e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001394:	4b70      	ldr	r3, [pc, #448]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a6f      	ldr	r2, [pc, #444]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b6d      	ldr	r3, [pc, #436]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	496a      	ldr	r1, [pc, #424]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b2:	4b69      	ldr	r3, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4965      	ldr	r1, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fcdb 	bl	8001d8c <RCC_SetFlashLatencyFromMSIRange>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e33f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013e0:	f000 fc48 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	f003 030f 	and.w	r3, r3, #15
 80013f0:	495a      	ldr	r1, [pc, #360]	; (800155c <HAL_RCC_OscConfig+0x29c>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	4a58      	ldr	r2, [pc, #352]	; (8001560 <HAL_RCC_OscConfig+0x2a0>)
 80013fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001400:	4b58      	ldr	r3, [pc, #352]	; (8001564 <HAL_RCC_OscConfig+0x2a4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd91 	bl	8000f2c <HAL_InitTick>
 800140a:	4603      	mov	r3, r0
 800140c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d052      	beq.n	80014ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	e323      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d032      	beq.n	8001486 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001420:	4b4d      	ldr	r3, [pc, #308]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001426:	f043 0301 	orr.w	r3, r3, #1
 800142a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800142c:	f7ff fdce 	bl	8000fcc <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001434:	f7ff fdca 	bl	8000fcc <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e30c      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001446:	4b44      	ldr	r3, [pc, #272]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001452:	4b41      	ldr	r3, [pc, #260]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a40      	ldr	r2, [pc, #256]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	493b      	ldr	r1, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800146c:	4313      	orrs	r3, r2
 800146e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	4936      	ldr	r1, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
 8001484:	e01a      	b.n	80014bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001486:	4b34      	ldr	r3, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a33      	ldr	r2, [pc, #204]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001492:	f7ff fd9b 	bl	8000fcc <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800149a:	f7ff fd97 	bl	8000fcc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e2d9      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x1da>
 80014b8:	e000      	b.n	80014bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d074      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x21a>
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	2b0c      	cmp	r3, #12
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d10b      	bne.n	80014f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d064      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d160      	bne.n	80015b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e2b6      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x24a>
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a15      	ldr	r2, [pc, #84]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	e01d      	b.n	8001546 <HAL_RCC_OscConfig+0x286>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001512:	d10c      	bne.n	800152e <HAL_RCC_OscConfig+0x26e>
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800151a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	e00b      	b.n	8001546 <HAL_RCC_OscConfig+0x286>
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b07      	ldr	r3, [pc, #28]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_RCC_OscConfig+0x298>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001544:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d01c      	beq.n	8001588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154e:	f7ff fd3d 	bl	8000fcc <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001554:	e011      	b.n	800157a <HAL_RCC_OscConfig+0x2ba>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	08003298 	.word	0x08003298
 8001560:	20000000 	.word	0x20000000
 8001564:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001568:	f7ff fd30 	bl	8000fcc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b64      	cmp	r3, #100	; 0x64
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e272      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800157a:	4baf      	ldr	r3, [pc, #700]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x2a8>
 8001586:	e014      	b.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fd20 	bl	8000fcc <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fd1c 	bl	8000fcc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e25e      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015a2:	4ba5      	ldr	r3, [pc, #660]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d0>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d060      	beq.n	8001680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b04      	cmp	r3, #4
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x310>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d119      	bne.n	80015fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d116      	bne.n	80015fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	4b99      	ldr	r3, [pc, #612]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_OscConfig+0x328>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e23b      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e8:	4b93      	ldr	r3, [pc, #588]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	4990      	ldr	r1, [pc, #576]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	e040      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d023      	beq.n	800164e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001606:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800160c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fcdb 	bl	8000fcc <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161a:	f7ff fcd7 	bl	8000fcc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e219      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800162c:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	497c      	ldr	r1, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a79      	ldr	r2, [pc, #484]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fcb7 	bl	8000fcc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001662:	f7ff fcb3 	bl	8000fcc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1f5      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001674:	4b70      	ldr	r3, [pc, #448]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d03c      	beq.n	8001706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d01c      	beq.n	80016ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169a:	4a67      	ldr	r2, [pc, #412]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fc92 	bl	8000fcc <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc8e 	bl	8000fcc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1d0      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016be:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0ef      	beq.n	80016ac <HAL_RCC_OscConfig+0x3ec>
 80016cc:	e01b      	b.n	8001706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80016d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80016d6:	f023 0301 	bic.w	r3, r3, #1
 80016da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fc75 	bl	8000fcc <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fc71 	bl	8000fcc <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e1b3      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f8:	4b4f      	ldr	r3, [pc, #316]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1ef      	bne.n	80016e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a6 	beq.w	8001860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001714:	2300      	movs	r3, #0
 8001716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10d      	bne.n	8001740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	4b44      	ldr	r3, [pc, #272]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a43      	ldr	r2, [pc, #268]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800172a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
 8001730:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800173c:	2301      	movs	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	4b3e      	ldr	r3, [pc, #248]	; (800183c <HAL_RCC_OscConfig+0x57c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d118      	bne.n	800177e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800174c:	4b3b      	ldr	r3, [pc, #236]	; (800183c <HAL_RCC_OscConfig+0x57c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <HAL_RCC_OscConfig+0x57c>)
 8001752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001758:	f7ff fc38 	bl	8000fcc <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001760:	f7ff fc34 	bl	8000fcc <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e176      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	4b32      	ldr	r3, [pc, #200]	; (800183c <HAL_RCC_OscConfig+0x57c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d108      	bne.n	8001798 <HAL_RCC_OscConfig+0x4d8>
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	4a2a      	ldr	r2, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001796:	e024      	b.n	80017e2 <HAL_RCC_OscConfig+0x522>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d110      	bne.n	80017c2 <HAL_RCC_OscConfig+0x502>
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a6:	4a24      	ldr	r2, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c0:	e00f      	b.n	80017e2 <HAL_RCC_OscConfig+0x522>
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d2:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 80017da:	f023 0304 	bic.w	r3, r3, #4
 80017de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d016      	beq.n	8001818 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fbef 	bl	8000fcc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff fbeb 	bl	8000fcc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e12b      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_OscConfig+0x578>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0ed      	beq.n	80017f2 <HAL_RCC_OscConfig+0x532>
 8001816:	e01a      	b.n	800184e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001818:	f7ff fbd8 	bl	8000fcc <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181e:	e00f      	b.n	8001840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f7ff fbd4 	bl	8000fcc <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d906      	bls.n	8001840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e114      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001840:	4b89      	ldr	r3, [pc, #548]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1e8      	bne.n	8001820 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7ffb      	ldrb	r3, [r7, #31]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b84      	ldr	r3, [pc, #528]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001858:	4a83      	ldr	r2, [pc, #524]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80fa 	beq.w	8001a5e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	2b02      	cmp	r3, #2
 8001870:	f040 80d0 	bne.w	8001a14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001874:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	429a      	cmp	r2, r3
 8001886:	d130      	bne.n	80018ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	3b01      	subs	r3, #1
 8001894:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d127      	bne.n	80018ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d11f      	bne.n	80018ea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018b4:	2a07      	cmp	r2, #7
 80018b6:	bf14      	ite	ne
 80018b8:	2201      	movne	r2, #1
 80018ba:	2200      	moveq	r2, #0
 80018bc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018be:	4293      	cmp	r3, r2
 80018c0:	d113      	bne.n	80018ea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018cc:	085b      	lsrs	r3, r3, #1
 80018ce:	3b01      	subs	r3, #1
 80018d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d109      	bne.n	80018ea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	3b01      	subs	r3, #1
 80018e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d06e      	beq.n	80019c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d069      	beq.n	80019c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018f0:	4b5d      	ldr	r3, [pc, #372]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018fc:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e0a9      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800190c:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a55      	ldr	r2, [pc, #340]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001916:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001918:	f7ff fb58 	bl	8000fcc <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff fb54 	bl	8000fcc <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e096      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x7ac>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800194e:	3a01      	subs	r2, #1
 8001950:	0112      	lsls	r2, r2, #4
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001958:	0212      	lsls	r2, r2, #8
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001960:	0852      	lsrs	r2, r2, #1
 8001962:	3a01      	subs	r2, #1
 8001964:	0552      	lsls	r2, r2, #21
 8001966:	4311      	orrs	r1, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800196c:	0852      	lsrs	r2, r2, #1
 800196e:	3a01      	subs	r2, #1
 8001970:	0652      	lsls	r2, r2, #25
 8001972:	4311      	orrs	r1, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001978:	0912      	lsrs	r2, r2, #4
 800197a:	0452      	lsls	r2, r2, #17
 800197c:	430a      	orrs	r2, r1
 800197e:	493a      	ldr	r1, [pc, #232]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4a34      	ldr	r2, [pc, #208]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800199c:	f7ff fb16 	bl	8000fcc <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fb12 	bl	8000fcc <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e054      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019c2:	e04c      	b.n	8001a5e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e04b      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d144      	bne.n	8001a5e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019d4:	4b24      	ldr	r3, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a23      	ldr	r2, [pc, #140]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019ec:	f7ff faee 	bl	8000fcc <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff faea 	bl	8000fcc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e02c      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x734>
 8001a12:	e024      	b.n	8001a5e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d01f      	beq.n	8001a5a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7ff fad1 	bl	8000fcc <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff facd 	bl	8000fcc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e00f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f0      	bne.n	8001a2e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4905      	ldr	r1, [pc, #20]	; (8001a68 <HAL_RCC_OscConfig+0x7a8>)
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCC_OscConfig+0x7b0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	f99d808c 	.word	0xf99d808c
 8001a70:	feeefffc 	.word	0xfeeefffc

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0e7      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b75      	ldr	r3, [pc, #468]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b72      	ldr	r3, [pc, #456]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0207 	bic.w	r2, r3, #7
 8001a9e:	4970      	ldr	r1, [pc, #448]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b6e      	ldr	r3, [pc, #440]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cf      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d010      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	4b66      	ldr	r3, [pc, #408]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d908      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad4:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4960      	ldr	r1, [pc, #384]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d04c      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b5a      	ldr	r3, [pc, #360]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d121      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0a6      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b54      	ldr	r3, [pc, #336]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d115      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e09a      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d107      	bne.n	8001b3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b2a:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e08e      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e086      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f023 0203 	bic.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4943      	ldr	r1, [pc, #268]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b5c:	f7ff fa36 	bl	8000fcc <HAL_GetTick>
 8001b60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b62:	e00a      	b.n	8001b7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b64:	f7ff fa32 	bl	8000fcc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e06e      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 020c 	and.w	r2, r3, #12
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1eb      	bne.n	8001b64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	4b31      	ldr	r3, [pc, #196]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d208      	bcs.n	8001bba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	492b      	ldr	r1, [pc, #172]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bba:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d210      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc8:	4b25      	ldr	r3, [pc, #148]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f023 0207 	bic.w	r2, r3, #7
 8001bd0:	4923      	ldr	r1, [pc, #140]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd8:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <HAL_RCC_ClockConfig+0x1ec>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e036      	b.n	8001c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4918      	ldr	r1, [pc, #96]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d009      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4910      	ldr	r1, [pc, #64]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c28:	f000 f824 	bl	8001c74 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	490b      	ldr	r1, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1f4>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1f8>)
 8001c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1fc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f96d 	bl	8000f2c <HAL_InitTick>
 8001c52:	4603      	mov	r3, r0
 8001c54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c56:	7afb      	ldrb	r3, [r7, #11]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003298 	.word	0x08003298
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000004 	.word	0x20000004

08001c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d121      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d11e      	bne.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e005      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc4:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001cd0:	4a2b      	ldr	r2, [pc, #172]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10d      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce4:	e00a      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d102      	bne.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cee:	61bb      	str	r3, [r7, #24]
 8001cf0:	e004      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf8:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b0c      	cmp	r3, #12
 8001d00:	d134      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d02:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d003      	beq.n	8001d1a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d003      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0xac>
 8001d18:	e005      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d1c:	617b      	str	r3, [r7, #20]
      break;
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d22:	617b      	str	r3, [r7, #20]
      break;
 8001d24:	e002      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	617b      	str	r3, [r7, #20]
      break;
 8001d2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	3301      	adds	r3, #1
 8001d38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	fb02 f203 	mul.w	r2, r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0e5b      	lsrs	r3, r3, #25
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d6c:	69bb      	ldr	r3, [r7, #24]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	080032a8 	.word	0x080032a8
 8001d84:	00f42400 	.word	0x00f42400
 8001d88:	007a1200 	.word	0x007a1200

08001d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d94:	2300      	movs	r3, #0
 8001d96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001da4:	f7ff fa28 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001da8:	6178      	str	r0, [r7, #20]
 8001daa:	e014      	b.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a24      	ldr	r2, [pc, #144]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dc4:	f7ff fa18 	bl	80011f8 <HAL_PWREx_GetVoltageRange>
 8001dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ddc:	d10b      	bne.n	8001df6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d919      	bls.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2ba0      	cmp	r3, #160	; 0xa0
 8001de8:	d902      	bls.n	8001df0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dea:	2302      	movs	r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	e013      	b.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df0:	2301      	movs	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	e010      	b.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b80      	cmp	r3, #128	; 0x80
 8001dfa:	d902      	bls.n	8001e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	e00a      	b.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b80      	cmp	r3, #128	; 0x80
 8001e06:	d102      	bne.n	8001e0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e08:	2302      	movs	r3, #2
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	e004      	b.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b70      	cmp	r3, #112	; 0x70
 8001e12:	d101      	bne.n	8001e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 0207 	bic.w	r2, r3, #7
 8001e20:	4909      	ldr	r1, [pc, #36]	; (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40022000 	.word	0x40022000

08001e4c <arm_max_q15>:
 8001e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e50:	4684      	mov	ip, r0
 8001e52:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8001e56:	ea5f 089e 	movs.w	r8, lr, lsr #2
 8001e5a:	f93c 4b02 	ldrsh.w	r4, [ip], #2
 8001e5e:	d044      	beq.n	8001eea <arm_max_q15+0x9e>
 8001e60:	2500      	movs	r5, #0
 8001e62:	300a      	adds	r0, #10
 8001e64:	462f      	mov	r7, r5
 8001e66:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8001e6a:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 8001e6e:	42b4      	cmp	r4, r6
 8001e70:	bfb8      	it	lt
 8001e72:	4634      	movlt	r4, r6
 8001e74:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 8001e78:	bfb8      	it	lt
 8001e7a:	1c6f      	addlt	r7, r5, #1
 8001e7c:	42b4      	cmp	r4, r6
 8001e7e:	bfb8      	it	lt
 8001e80:	4634      	movlt	r4, r6
 8001e82:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 8001e86:	bfb8      	it	lt
 8001e88:	1caf      	addlt	r7, r5, #2
 8001e8a:	42b4      	cmp	r4, r6
 8001e8c:	bfa8      	it	ge
 8001e8e:	4626      	movge	r6, r4
 8001e90:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 8001e94:	bfb8      	it	lt
 8001e96:	1cef      	addlt	r7, r5, #3
 8001e98:	42a6      	cmp	r6, r4
 8001e9a:	f105 0504 	add.w	r5, r5, #4
 8001e9e:	bfac      	ite	ge
 8001ea0:	4634      	movge	r4, r6
 8001ea2:	462f      	movlt	r7, r5
 8001ea4:	45a9      	cmp	r9, r5
 8001ea6:	f100 0008 	add.w	r0, r0, #8
 8001eaa:	d1de      	bne.n	8001e6a <arm_max_q15+0x1e>
 8001eac:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8001eb0:	f01e 0003 	ands.w	r0, lr, #3
 8001eb4:	d015      	beq.n	8001ee2 <arm_max_q15+0x96>
 8001eb6:	f9bc 5000 	ldrsh.w	r5, [ip]
 8001eba:	42a5      	cmp	r5, r4
 8001ebc:	bfc4      	itt	gt
 8001ebe:	462c      	movgt	r4, r5
 8001ec0:	1a0f      	subgt	r7, r1, r0
 8001ec2:	3801      	subs	r0, #1
 8001ec4:	d00d      	beq.n	8001ee2 <arm_max_q15+0x96>
 8001ec6:	f9bc 5002 	ldrsh.w	r5, [ip, #2]
 8001eca:	42ac      	cmp	r4, r5
 8001ecc:	bfbc      	itt	lt
 8001ece:	1a0f      	sublt	r7, r1, r0
 8001ed0:	462c      	movlt	r4, r5
 8001ed2:	2801      	cmp	r0, #1
 8001ed4:	d005      	beq.n	8001ee2 <arm_max_q15+0x96>
 8001ed6:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 8001eda:	42a1      	cmp	r1, r4
 8001edc:	bfc4      	itt	gt
 8001ede:	4677      	movgt	r7, lr
 8001ee0:	460c      	movgt	r4, r1
 8001ee2:	8014      	strh	r4, [r2, #0]
 8001ee4:	601f      	str	r7, [r3, #0]
 8001ee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eea:	4647      	mov	r7, r8
 8001eec:	e7e0      	b.n	8001eb0 <arm_max_q15+0x64>
 8001eee:	bf00      	nop

08001ef0 <arm_rfft_q15>:
 8001ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	6805      	ldr	r5, [r0, #0]
 8001ef8:	9200      	str	r2, [sp, #0]
 8001efa:	7902      	ldrb	r2, [r0, #4]
 8001efc:	086d      	lsrs	r5, r5, #1
 8001efe:	00ab      	lsls	r3, r5, #2
 8001f00:	2a01      	cmp	r2, #1
 8001f02:	4604      	mov	r4, r0
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	6940      	ldr	r0, [r0, #20]
 8001f08:	460e      	mov	r6, r1
 8001f0a:	d051      	beq.n	8001fb0 <arm_rfft_q15+0xc0>
 8001f0c:	7963      	ldrb	r3, [r4, #5]
 8001f0e:	f000 f9c3 	bl	8002298 <arm_cfft_q15>
 8001f12:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8001f16:	6927      	ldr	r7, [r4, #16]
 8001f18:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 8001f1c:	00aa      	lsls	r2, r5, #2
 8001f1e:	f1a2 0804 	sub.w	r8, r2, #4
 8001f22:	1e6a      	subs	r2, r5, #1
 8001f24:	eb03 0c0e 	add.w	ip, r3, lr
 8001f28:	4477      	add	r7, lr
 8001f2a:	44b0      	add	r8, r6
 8001f2c:	f106 0b04 	add.w	fp, r6, #4
 8001f30:	ea4f 04c5 	mov.w	r4, r5, lsl #3
 8001f34:	d025      	beq.n	8001f82 <arm_rfft_q15+0x92>
 8001f36:	9b00      	ldr	r3, [sp, #0]
 8001f38:	3c08      	subs	r4, #8
 8001f3a:	441c      	add	r4, r3
 8001f3c:	f103 0508 	add.w	r5, r3, #8
 8001f40:	f85b 3b04 	ldr.w	r3, [fp], #4
 8001f44:	f8dc 9000 	ldr.w	r9, [ip]
 8001f48:	fb43 f109 	smusd	r1, r3, r9
 8001f4c:	f858 0904 	ldr.w	r0, [r8], #-4
 8001f50:	f8d7 a000 	ldr.w	sl, [r7]
 8001f54:	fb20 110a 	smlad	r1, r0, sl, r1
 8001f58:	fb40 f01a 	smusdx	r0, r0, sl
 8001f5c:	fb23 0319 	smladx	r3, r3, r9, r0
 8001f60:	141b      	asrs	r3, r3, #16
 8001f62:	1409      	asrs	r1, r1, #16
 8001f64:	4258      	negs	r0, r3
 8001f66:	3a01      	subs	r2, #1
 8001f68:	f825 3c02 	strh.w	r3, [r5, #-2]
 8001f6c:	f825 1c04 	strh.w	r1, [r5, #-4]
 8001f70:	4477      	add	r7, lr
 8001f72:	80e0      	strh	r0, [r4, #6]
 8001f74:	80a1      	strh	r1, [r4, #4]
 8001f76:	44f4      	add	ip, lr
 8001f78:	f105 0504 	add.w	r5, r5, #4
 8001f7c:	f1a4 0404 	sub.w	r4, r4, #4
 8001f80:	d1de      	bne.n	8001f40 <arm_rfft_q15+0x50>
 8001f82:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8001f86:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001f8a:	e9dd 0400 	ldrd	r0, r4, [sp]
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	105b      	asrs	r3, r3, #1
 8001f92:	1901      	adds	r1, r0, r4
 8001f94:	5303      	strh	r3, [r0, r4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	804a      	strh	r2, [r1, #2]
 8001f9a:	f9b6 3000 	ldrsh.w	r3, [r6]
 8001f9e:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 8001fa2:	8042      	strh	r2, [r0, #2]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	105b      	asrs	r3, r3, #1
 8001fa8:	8003      	strh	r3, [r0, #0]
 8001faa:	b003      	add	sp, #12
 8001fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fb0:	440b      	add	r3, r1
 8001fb2:	469a      	mov	sl, r3
 8001fb4:	e9d4 c703 	ldrd	ip, r7, [r4, #12]
 8001fb8:	68a3      	ldr	r3, [r4, #8]
 8001fba:	b1f5      	cbz	r5, 8001ffa <arm_rfft_q15+0x10a>
 8001fbc:	f8dd b000 	ldr.w	fp, [sp]
 8001fc0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001fc4:	f85a 1904 	ldr.w	r1, [sl], #-4
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	fb41 fe03 	smusd	lr, r1, r3
 8001fce:	f856 8b04 	ldr.w	r8, [r6], #4
 8001fd2:	f8dc 2000 	ldr.w	r2, [ip]
 8001fd6:	fb28 ee02 	smlad	lr, r8, r2, lr
 8001fda:	fb21 f313 	smuadx	r3, r1, r3
 8001fde:	425b      	negs	r3, r3
 8001fe0:	fb42 3218 	smlsdx	r2, r2, r8, r3
 8001fe4:	0c13      	lsrs	r3, r2, #16
 8001fe6:	041b      	lsls	r3, r3, #16
 8001fe8:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 8001fec:	3d01      	subs	r5, #1
 8001fee:	f84b 3b04 	str.w	r3, [fp], #4
 8001ff2:	444f      	add	r7, r9
 8001ff4:	44cc      	add	ip, r9
 8001ff6:	d1e5      	bne.n	8001fc4 <arm_rfft_q15+0xd4>
 8001ff8:	7922      	ldrb	r2, [r4, #4]
 8001ffa:	9d00      	ldr	r5, [sp, #0]
 8001ffc:	7963      	ldrb	r3, [r4, #5]
 8001ffe:	4629      	mov	r1, r5
 8002000:	f000 f94a 	bl	8002298 <arm_cfft_q15>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0cf      	beq.n	8001faa <arm_rfft_q15+0xba>
 800200a:	1ea9      	subs	r1, r5, #2
 800200c:	2200      	movs	r2, #0
 800200e:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	800b      	strh	r3, [r1, #0]
 8002016:	6823      	ldr	r3, [r4, #0]
 8002018:	3201      	adds	r2, #1
 800201a:	4293      	cmp	r3, r2
 800201c:	d8f7      	bhi.n	800200e <arm_rfft_q15+0x11e>
 800201e:	b003      	add	sp, #12
 8002020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002024 <arm_rfft_init_q15>:
 8002024:	b430      	push	{r4, r5}
 8002026:	b289      	uxth	r1, r1
 8002028:	4d2e      	ldr	r5, [pc, #184]	; (80020e4 <arm_rfft_init_q15+0xc0>)
 800202a:	4c2f      	ldr	r4, [pc, #188]	; (80020e8 <arm_rfft_init_q15+0xc4>)
 800202c:	7102      	strb	r2, [r0, #4]
 800202e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002032:	7143      	strb	r3, [r0, #5]
 8002034:	6001      	str	r1, [r0, #0]
 8002036:	e9c0 5403 	strd	r5, r4, [r0, #12]
 800203a:	d035      	beq.n	80020a8 <arm_rfft_init_q15+0x84>
 800203c:	d919      	bls.n	8002072 <arm_rfft_init_q15+0x4e>
 800203e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002042:	d037      	beq.n	80020b4 <arm_rfft_init_q15+0x90>
 8002044:	d90c      	bls.n	8002060 <arm_rfft_init_q15+0x3c>
 8002046:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800204a:	d039      	beq.n	80020c0 <arm_rfft_init_q15+0x9c>
 800204c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002050:	d126      	bne.n	80020a0 <arm_rfft_init_q15+0x7c>
 8002052:	2201      	movs	r2, #1
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <arm_rfft_init_q15+0xc8>)
 8002056:	6082      	str	r2, [r0, #8]
 8002058:	6143      	str	r3, [r0, #20]
 800205a:	2000      	movs	r0, #0
 800205c:	bc30      	pop	{r4, r5}
 800205e:	4770      	bx	lr
 8002060:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002064:	d11c      	bne.n	80020a0 <arm_rfft_init_q15+0x7c>
 8002066:	2208      	movs	r2, #8
 8002068:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <arm_rfft_init_q15+0xcc>)
 800206a:	6082      	str	r2, [r0, #8]
 800206c:	6143      	str	r3, [r0, #20]
 800206e:	2000      	movs	r0, #0
 8002070:	e7f4      	b.n	800205c <arm_rfft_init_q15+0x38>
 8002072:	2940      	cmp	r1, #64	; 0x40
 8002074:	d02a      	beq.n	80020cc <arm_rfft_init_q15+0xa8>
 8002076:	d90a      	bls.n	800208e <arm_rfft_init_q15+0x6a>
 8002078:	2980      	cmp	r1, #128	; 0x80
 800207a:	d02d      	beq.n	80020d8 <arm_rfft_init_q15+0xb4>
 800207c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002080:	d10e      	bne.n	80020a0 <arm_rfft_init_q15+0x7c>
 8002082:	2220      	movs	r2, #32
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <arm_rfft_init_q15+0xd0>)
 8002086:	6082      	str	r2, [r0, #8]
 8002088:	6143      	str	r3, [r0, #20]
 800208a:	2000      	movs	r0, #0
 800208c:	e7e6      	b.n	800205c <arm_rfft_init_q15+0x38>
 800208e:	2920      	cmp	r1, #32
 8002090:	d106      	bne.n	80020a0 <arm_rfft_init_q15+0x7c>
 8002092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <arm_rfft_init_q15+0xd4>)
 8002098:	6082      	str	r2, [r0, #8]
 800209a:	6143      	str	r3, [r0, #20]
 800209c:	2000      	movs	r0, #0
 800209e:	e7dd      	b.n	800205c <arm_rfft_init_q15+0x38>
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a4:	bc30      	pop	{r4, r5}
 80020a6:	4770      	bx	lr
 80020a8:	2210      	movs	r2, #16
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <arm_rfft_init_q15+0xd8>)
 80020ac:	6082      	str	r2, [r0, #8]
 80020ae:	6143      	str	r3, [r0, #20]
 80020b0:	2000      	movs	r0, #0
 80020b2:	e7d3      	b.n	800205c <arm_rfft_init_q15+0x38>
 80020b4:	2204      	movs	r2, #4
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <arm_rfft_init_q15+0xdc>)
 80020b8:	6082      	str	r2, [r0, #8]
 80020ba:	6143      	str	r3, [r0, #20]
 80020bc:	2000      	movs	r0, #0
 80020be:	e7cd      	b.n	800205c <arm_rfft_init_q15+0x38>
 80020c0:	2202      	movs	r2, #2
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <arm_rfft_init_q15+0xe0>)
 80020c4:	6082      	str	r2, [r0, #8]
 80020c6:	6143      	str	r3, [r0, #20]
 80020c8:	2000      	movs	r0, #0
 80020ca:	e7c7      	b.n	800205c <arm_rfft_init_q15+0x38>
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <arm_rfft_init_q15+0xe4>)
 80020d0:	6082      	str	r2, [r0, #8]
 80020d2:	6143      	str	r3, [r0, #20]
 80020d4:	2000      	movs	r0, #0
 80020d6:	e7c1      	b.n	800205c <arm_rfft_init_q15+0x38>
 80020d8:	2240      	movs	r2, #64	; 0x40
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <arm_rfft_init_q15+0xe8>)
 80020dc:	6082      	str	r2, [r0, #8]
 80020de:	6143      	str	r3, [r0, #20]
 80020e0:	2000      	movs	r0, #0
 80020e2:	e7bb      	b.n	800205c <arm_rfft_init_q15+0x38>
 80020e4:	08007160 	.word	0x08007160
 80020e8:	0800b160 	.word	0x0800b160
 80020ec:	08003338 	.word	0x08003338
 80020f0:	08003348 	.word	0x08003348
 80020f4:	080032e8 	.word	0x080032e8
 80020f8:	080032f8 	.word	0x080032f8
 80020fc:	08003318 	.word	0x08003318
 8002100:	080032d8 	.word	0x080032d8
 8002104:	08003308 	.word	0x08003308
 8002108:	08003328 	.word	0x08003328
 800210c:	08003358 	.word	0x08003358

08002110 <arm_cfft_radix4by2_q15>:
 8002110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002114:	084d      	lsrs	r5, r1, #1
 8002116:	b081      	sub	sp, #4
 8002118:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800211c:	4616      	mov	r6, r2
 800211e:	d049      	beq.n	80021b4 <arm_cfft_radix4by2_q15+0xa4>
 8002120:	4604      	mov	r4, r0
 8002122:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80021d0 <arm_cfft_radix4by2_q15+0xc0>
 8002126:	4696      	mov	lr, r2
 8002128:	4638      	mov	r0, r7
 800212a:	4621      	mov	r1, r4
 800212c:	462a      	mov	r2, r5
 800212e:	f04f 0c00 	mov.w	ip, #0
 8002132:	f85e 3b04 	ldr.w	r3, [lr], #4
 8002136:	f8d1 9000 	ldr.w	r9, [r1]
 800213a:	fa99 f92c 	shadd16	r9, r9, ip
 800213e:	f8d0 b000 	ldr.w	fp, [r0]
 8002142:	fa9b fb2c 	shadd16	fp, fp, ip
 8002146:	fad9 fa1b 	qsub16	sl, r9, fp
 800214a:	fa99 f92b 	shadd16	r9, r9, fp
 800214e:	f841 9b04 	str.w	r9, [r1], #4
 8002152:	fb23 f90a 	smuad	r9, r3, sl
 8002156:	fb43 f31a 	smusdx	r3, r3, sl
 800215a:	ea03 0308 	and.w	r3, r3, r8
 800215e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8002162:	3a01      	subs	r2, #1
 8002164:	f840 3b04 	str.w	r3, [r0], #4
 8002168:	d1e3      	bne.n	8002132 <arm_cfft_radix4by2_q15+0x22>
 800216a:	4629      	mov	r1, r5
 800216c:	2302      	movs	r3, #2
 800216e:	4632      	mov	r2, r6
 8002170:	4620      	mov	r0, r4
 8002172:	f000 f8fd 	bl	8002370 <arm_radix4_butterfly_q15>
 8002176:	4638      	mov	r0, r7
 8002178:	4629      	mov	r1, r5
 800217a:	4632      	mov	r2, r6
 800217c:	2302      	movs	r3, #2
 800217e:	f000 f8f7 	bl	8002370 <arm_radix4_butterfly_q15>
 8002182:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8002186:	4620      	mov	r0, r4
 8002188:	f9b0 6000 	ldrsh.w	r6, [r0]
 800218c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8002190:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8002194:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8002198:	0076      	lsls	r6, r6, #1
 800219a:	0064      	lsls	r4, r4, #1
 800219c:	0052      	lsls	r2, r2, #1
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	8006      	strh	r6, [r0, #0]
 80021a2:	8044      	strh	r4, [r0, #2]
 80021a4:	8082      	strh	r2, [r0, #4]
 80021a6:	80c3      	strh	r3, [r0, #6]
 80021a8:	3008      	adds	r0, #8
 80021aa:	4285      	cmp	r5, r0
 80021ac:	d1ec      	bne.n	8002188 <arm_cfft_radix4by2_q15+0x78>
 80021ae:	b001      	add	sp, #4
 80021b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b4:	4629      	mov	r1, r5
 80021b6:	2302      	movs	r3, #2
 80021b8:	f000 f8da 	bl	8002370 <arm_radix4_butterfly_q15>
 80021bc:	4632      	mov	r2, r6
 80021be:	4629      	mov	r1, r5
 80021c0:	4638      	mov	r0, r7
 80021c2:	2302      	movs	r3, #2
 80021c4:	b001      	add	sp, #4
 80021c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021ca:	f000 b8d1 	b.w	8002370 <arm_radix4_butterfly_q15>
 80021ce:	bf00      	nop
 80021d0:	ffff0000 	.word	0xffff0000

080021d4 <arm_cfft_radix4by2_inverse_q15>:
 80021d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021d8:	084d      	lsrs	r5, r1, #1
 80021da:	b081      	sub	sp, #4
 80021dc:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80021e0:	4616      	mov	r6, r2
 80021e2:	d049      	beq.n	8002278 <arm_cfft_radix4by2_inverse_q15+0xa4>
 80021e4:	4604      	mov	r4, r0
 80021e6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8002294 <arm_cfft_radix4by2_inverse_q15+0xc0>
 80021ea:	4696      	mov	lr, r2
 80021ec:	4638      	mov	r0, r7
 80021ee:	4621      	mov	r1, r4
 80021f0:	462a      	mov	r2, r5
 80021f2:	f04f 0c00 	mov.w	ip, #0
 80021f6:	f85e 3b04 	ldr.w	r3, [lr], #4
 80021fa:	f8d1 9000 	ldr.w	r9, [r1]
 80021fe:	fa99 f92c 	shadd16	r9, r9, ip
 8002202:	f8d0 b000 	ldr.w	fp, [r0]
 8002206:	fa9b fb2c 	shadd16	fp, fp, ip
 800220a:	fad9 fa1b 	qsub16	sl, r9, fp
 800220e:	fa99 f92b 	shadd16	r9, r9, fp
 8002212:	f841 9b04 	str.w	r9, [r1], #4
 8002216:	fb43 f90a 	smusd	r9, r3, sl
 800221a:	fb23 f31a 	smuadx	r3, r3, sl
 800221e:	ea03 0308 	and.w	r3, r3, r8
 8002222:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8002226:	3a01      	subs	r2, #1
 8002228:	f840 3b04 	str.w	r3, [r0], #4
 800222c:	d1e3      	bne.n	80021f6 <arm_cfft_radix4by2_inverse_q15+0x22>
 800222e:	4629      	mov	r1, r5
 8002230:	2302      	movs	r3, #2
 8002232:	4632      	mov	r2, r6
 8002234:	4620      	mov	r0, r4
 8002236:	f000 f9cf 	bl	80025d8 <arm_radix4_butterfly_inverse_q15>
 800223a:	4638      	mov	r0, r7
 800223c:	4629      	mov	r1, r5
 800223e:	4632      	mov	r2, r6
 8002240:	2302      	movs	r3, #2
 8002242:	f000 f9c9 	bl	80025d8 <arm_radix4_butterfly_inverse_q15>
 8002246:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800224a:	4620      	mov	r0, r4
 800224c:	f9b0 6000 	ldrsh.w	r6, [r0]
 8002250:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8002254:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8002258:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800225c:	0076      	lsls	r6, r6, #1
 800225e:	0064      	lsls	r4, r4, #1
 8002260:	0052      	lsls	r2, r2, #1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	8006      	strh	r6, [r0, #0]
 8002266:	8044      	strh	r4, [r0, #2]
 8002268:	8082      	strh	r2, [r0, #4]
 800226a:	80c3      	strh	r3, [r0, #6]
 800226c:	3008      	adds	r0, #8
 800226e:	4285      	cmp	r5, r0
 8002270:	d1ec      	bne.n	800224c <arm_cfft_radix4by2_inverse_q15+0x78>
 8002272:	b001      	add	sp, #4
 8002274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002278:	4629      	mov	r1, r5
 800227a:	2302      	movs	r3, #2
 800227c:	f000 f9ac 	bl	80025d8 <arm_radix4_butterfly_inverse_q15>
 8002280:	4632      	mov	r2, r6
 8002282:	4629      	mov	r1, r5
 8002284:	4638      	mov	r0, r7
 8002286:	2302      	movs	r3, #2
 8002288:	b001      	add	sp, #4
 800228a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800228e:	f000 b9a3 	b.w	80025d8 <arm_radix4_butterfly_inverse_q15>
 8002292:	bf00      	nop
 8002294:	ffff0000 	.word	0xffff0000

08002298 <arm_cfft_q15>:
 8002298:	b570      	push	{r4, r5, r6, lr}
 800229a:	2a01      	cmp	r2, #1
 800229c:	460e      	mov	r6, r1
 800229e:	4604      	mov	r4, r0
 80022a0:	461d      	mov	r5, r3
 80022a2:	8801      	ldrh	r1, [r0, #0]
 80022a4:	d033      	beq.n	800230e <arm_cfft_q15+0x76>
 80022a6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80022aa:	d02a      	beq.n	8002302 <arm_cfft_q15+0x6a>
 80022ac:	d90b      	bls.n	80022c6 <arm_cfft_q15+0x2e>
 80022ae:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80022b2:	d026      	beq.n	8002302 <arm_cfft_q15+0x6a>
 80022b4:	d91b      	bls.n	80022ee <arm_cfft_q15+0x56>
 80022b6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80022ba:	d00b      	beq.n	80022d4 <arm_cfft_q15+0x3c>
 80022bc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80022c0:	d01f      	beq.n	8002302 <arm_cfft_q15+0x6a>
 80022c2:	b96d      	cbnz	r5, 80022e0 <arm_cfft_q15+0x48>
 80022c4:	bd70      	pop	{r4, r5, r6, pc}
 80022c6:	2920      	cmp	r1, #32
 80022c8:	d004      	beq.n	80022d4 <arm_cfft_q15+0x3c>
 80022ca:	d918      	bls.n	80022fe <arm_cfft_q15+0x66>
 80022cc:	2940      	cmp	r1, #64	; 0x40
 80022ce:	d018      	beq.n	8002302 <arm_cfft_q15+0x6a>
 80022d0:	2980      	cmp	r1, #128	; 0x80
 80022d2:	d1f6      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 80022d4:	6862      	ldr	r2, [r4, #4]
 80022d6:	4630      	mov	r0, r6
 80022d8:	f7ff ff1a 	bl	8002110 <arm_cfft_radix4by2_q15>
 80022dc:	2d00      	cmp	r5, #0
 80022de:	d0f1      	beq.n	80022c4 <arm_cfft_q15+0x2c>
 80022e0:	4630      	mov	r0, r6
 80022e2:	68a2      	ldr	r2, [r4, #8]
 80022e4:	89a1      	ldrh	r1, [r4, #12]
 80022e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022ea:	f000 baa9 	b.w	8002840 <arm_bitreversal_16>
 80022ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80022f2:	d1e6      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 80022f4:	6862      	ldr	r2, [r4, #4]
 80022f6:	4630      	mov	r0, r6
 80022f8:	f7ff ff0a 	bl	8002110 <arm_cfft_radix4by2_q15>
 80022fc:	e7ee      	b.n	80022dc <arm_cfft_q15+0x44>
 80022fe:	2910      	cmp	r1, #16
 8002300:	d1df      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 8002302:	2301      	movs	r3, #1
 8002304:	6862      	ldr	r2, [r4, #4]
 8002306:	4630      	mov	r0, r6
 8002308:	f000 f832 	bl	8002370 <arm_radix4_butterfly_q15>
 800230c:	e7d9      	b.n	80022c2 <arm_cfft_q15+0x2a>
 800230e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002312:	d00a      	beq.n	800232a <arm_cfft_q15+0x92>
 8002314:	d90f      	bls.n	8002336 <arm_cfft_q15+0x9e>
 8002316:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800231a:	d006      	beq.n	800232a <arm_cfft_q15+0x92>
 800231c:	d917      	bls.n	800234e <arm_cfft_q15+0xb6>
 800231e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002322:	d00f      	beq.n	8002344 <arm_cfft_q15+0xac>
 8002324:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002328:	d1cb      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 800232a:	2301      	movs	r3, #1
 800232c:	6862      	ldr	r2, [r4, #4]
 800232e:	4630      	mov	r0, r6
 8002330:	f000 f952 	bl	80025d8 <arm_radix4_butterfly_inverse_q15>
 8002334:	e7c5      	b.n	80022c2 <arm_cfft_q15+0x2a>
 8002336:	2920      	cmp	r1, #32
 8002338:	d004      	beq.n	8002344 <arm_cfft_q15+0xac>
 800233a:	d910      	bls.n	800235e <arm_cfft_q15+0xc6>
 800233c:	2940      	cmp	r1, #64	; 0x40
 800233e:	d0f4      	beq.n	800232a <arm_cfft_q15+0x92>
 8002340:	2980      	cmp	r1, #128	; 0x80
 8002342:	d1be      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 8002344:	6862      	ldr	r2, [r4, #4]
 8002346:	4630      	mov	r0, r6
 8002348:	f7ff ff44 	bl	80021d4 <arm_cfft_radix4by2_inverse_q15>
 800234c:	e7b9      	b.n	80022c2 <arm_cfft_q15+0x2a>
 800234e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002352:	d1b6      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 8002354:	6862      	ldr	r2, [r4, #4]
 8002356:	4630      	mov	r0, r6
 8002358:	f7ff ff3c 	bl	80021d4 <arm_cfft_radix4by2_inverse_q15>
 800235c:	e7b1      	b.n	80022c2 <arm_cfft_q15+0x2a>
 800235e:	2910      	cmp	r1, #16
 8002360:	d1af      	bne.n	80022c2 <arm_cfft_q15+0x2a>
 8002362:	2301      	movs	r3, #1
 8002364:	6862      	ldr	r2, [r4, #4]
 8002366:	4630      	mov	r0, r6
 8002368:	f000 f936 	bl	80025d8 <arm_radix4_butterfly_inverse_q15>
 800236c:	e7a9      	b.n	80022c2 <arm_cfft_q15+0x2a>
 800236e:	bf00      	nop

08002370 <arm_radix4_butterfly_q15>:
 8002370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002374:	088f      	lsrs	r7, r1, #2
 8002376:	b095      	sub	sp, #84	; 0x54
 8002378:	00be      	lsls	r6, r7, #2
 800237a:	4684      	mov	ip, r0
 800237c:	9011      	str	r0, [sp, #68]	; 0x44
 800237e:	4430      	add	r0, r6
 8002380:	9103      	str	r1, [sp, #12]
 8002382:	1984      	adds	r4, r0, r6
 8002384:	2100      	movs	r1, #0
 8002386:	4d93      	ldr	r5, [pc, #588]	; (80025d4 <arm_radix4_butterfly_q15+0x264>)
 8002388:	9713      	str	r7, [sp, #76]	; 0x4c
 800238a:	469a      	mov	sl, r3
 800238c:	46b9      	mov	r9, r7
 800238e:	9212      	str	r2, [sp, #72]	; 0x48
 8002390:	4667      	mov	r7, ip
 8002392:	4426      	add	r6, r4
 8002394:	460b      	mov	r3, r1
 8002396:	4694      	mov	ip, r2
 8002398:	f8d7 b000 	ldr.w	fp, [r7]
 800239c:	fa9b fb23 	shadd16	fp, fp, r3
 80023a0:	fa9b fb23 	shadd16	fp, fp, r3
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	fa92 f223 	shadd16	r2, r2, r3
 80023aa:	fa92 f223 	shadd16	r2, r2, r3
 80023ae:	fa9b fe12 	qadd16	lr, fp, r2
 80023b2:	fadb fb12 	qsub16	fp, fp, r2
 80023b6:	6802      	ldr	r2, [r0, #0]
 80023b8:	fa92 f223 	shadd16	r2, r2, r3
 80023bc:	fa92 f223 	shadd16	r2, r2, r3
 80023c0:	f8d6 8000 	ldr.w	r8, [r6]
 80023c4:	fa98 f823 	shadd16	r8, r8, r3
 80023c8:	fa98 f823 	shadd16	r8, r8, r3
 80023cc:	fa92 f218 	qadd16	r2, r2, r8
 80023d0:	fa9e f822 	shadd16	r8, lr, r2
 80023d4:	f847 8b04 	str.w	r8, [r7], #4
 80023d8:	fade fe12 	qsub16	lr, lr, r2
 80023dc:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 80023e0:	fb22 f80e 	smuad	r8, r2, lr
 80023e4:	fb42 fe1e 	smusdx	lr, r2, lr
 80023e8:	6802      	ldr	r2, [r0, #0]
 80023ea:	fa92 f223 	shadd16	r2, r2, r3
 80023ee:	fa92 f223 	shadd16	r2, r2, r3
 80023f2:	ea0e 0e05 	and.w	lr, lr, r5
 80023f6:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 80023fa:	f840 eb04 	str.w	lr, [r0], #4
 80023fe:	f8d6 e000 	ldr.w	lr, [r6]
 8002402:	fa9e fe23 	shadd16	lr, lr, r3
 8002406:	fa9e fe23 	shadd16	lr, lr, r3
 800240a:	fad2 f21e 	qsub16	r2, r2, lr
 800240e:	faab f812 	qasx	r8, fp, r2
 8002412:	faeb fb12 	qsax	fp, fp, r2
 8002416:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 800241a:	fb22 fe0b 	smuad	lr, r2, fp
 800241e:	fb42 f21b 	smusdx	r2, r2, fp
 8002422:	402a      	ands	r2, r5
 8002424:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8002428:	f844 2b04 	str.w	r2, [r4], #4
 800242c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002430:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8002434:	fb22 fe08 	smuad	lr, r2, r8
 8002438:	fb42 f218 	smusdx	r2, r2, r8
 800243c:	402a      	ands	r2, r5
 800243e:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8002442:	f1b9 0901 	subs.w	r9, r9, #1
 8002446:	f846 2b04 	str.w	r2, [r6], #4
 800244a:	4451      	add	r1, sl
 800244c:	d1a4      	bne.n	8002398 <arm_radix4_butterfly_q15+0x28>
 800244e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002450:	2a04      	cmp	r2, #4
 8002452:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8002456:	f240 80ba 	bls.w	80025ce <arm_radix4_butterfly_q15+0x25e>
 800245a:	f8df b178 	ldr.w	fp, [pc, #376]	; 80025d4 <arm_radix4_butterfly_q15+0x264>
 800245e:	f8cd 9010 	str.w	r9, [sp, #16]
 8002462:	9202      	str	r2, [sp, #8]
 8002464:	9c02      	ldr	r4, [sp, #8]
 8002466:	08a1      	lsrs	r1, r4, #2
 8002468:	0088      	lsls	r0, r1, #2
 800246a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	900c      	str	r0, [sp, #48]	; 0x30
 8002472:	9803      	ldr	r0, [sp, #12]
 8002474:	920f      	str	r2, [sp, #60]	; 0x3c
 8002476:	009a      	lsls	r2, r3, #2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	4605      	mov	r5, r0
 800247c:	930d      	str	r3, [sp, #52]	; 0x34
 800247e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002482:	9110      	str	r1, [sp, #64]	; 0x40
 8002484:	428d      	cmp	r5, r1
 8002486:	bf28      	it	cs
 8002488:	460d      	movcs	r5, r1
 800248a:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800248e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002492:	9306      	str	r3, [sp, #24]
 8002494:	2300      	movs	r3, #0
 8002496:	950e      	str	r5, [sp, #56]	; 0x38
 8002498:	9107      	str	r1, [sp, #28]
 800249a:	00a7      	lsls	r7, r4, #2
 800249c:	920b      	str	r2, [sp, #44]	; 0x2c
 800249e:	9008      	str	r0, [sp, #32]
 80024a0:	9305      	str	r3, [sp, #20]
 80024a2:	9b06      	ldr	r3, [sp, #24]
 80024a4:	9a08      	ldr	r2, [sp, #32]
 80024a6:	f8d3 a000 	ldr.w	sl, [r3]
 80024aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024ac:	f8dd e014 	ldr.w	lr, [sp, #20]
 80024b0:	f8d3 9000 	ldr.w	r9, [r3]
 80024b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024b6:	f8d3 8000 	ldr.w	r8, [r3]
 80024ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024bc:	4616      	mov	r6, r2
 80024be:	1898      	adds	r0, r3, r2
 80024c0:	9a07      	ldr	r2, [sp, #28]
 80024c2:	4615      	mov	r5, r2
 80024c4:	1899      	adds	r1, r3, r2
 80024c6:	6832      	ldr	r2, [r6, #0]
 80024c8:	682c      	ldr	r4, [r5, #0]
 80024ca:	fa92 f314 	qadd16	r3, r2, r4
 80024ce:	fad2 f214 	qsub16	r2, r2, r4
 80024d2:	6804      	ldr	r4, [r0, #0]
 80024d4:	f8d1 c000 	ldr.w	ip, [r1]
 80024d8:	fa94 f41c 	qadd16	r4, r4, ip
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	fa93 fc24 	shadd16	ip, r3, r4
 80024e2:	9b04      	ldr	r3, [sp, #16]
 80024e4:	fa9c fc23 	shadd16	ip, ip, r3
 80024e8:	f8c6 c000 	str.w	ip, [r6]
 80024ec:	9b01      	ldr	r3, [sp, #4]
 80024ee:	443e      	add	r6, r7
 80024f0:	fad3 f324 	shsub16	r3, r3, r4
 80024f4:	fb29 fc03 	smuad	ip, r9, r3
 80024f8:	fb49 f313 	smusdx	r3, r9, r3
 80024fc:	ea03 030b 	and.w	r3, r3, fp
 8002500:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8002504:	f8d0 c000 	ldr.w	ip, [r0]
 8002508:	6003      	str	r3, [r0, #0]
 800250a:	680c      	ldr	r4, [r1, #0]
 800250c:	4438      	add	r0, r7
 800250e:	fadc f414 	qsub16	r4, ip, r4
 8002512:	faa2 f324 	shasx	r3, r2, r4
 8002516:	fae2 f224 	shsax	r2, r2, r4
 800251a:	fb2a f402 	smuad	r4, sl, r2
 800251e:	fb4a f212 	smusdx	r2, sl, r2
 8002522:	ea02 020b 	and.w	r2, r2, fp
 8002526:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 800252a:	602a      	str	r2, [r5, #0]
 800252c:	443d      	add	r5, r7
 800252e:	fb28 f203 	smuad	r2, r8, r3
 8002532:	fb48 f313 	smusdx	r3, r8, r3
 8002536:	ea03 030b 	and.w	r3, r3, fp
 800253a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800253e:	9a02      	ldr	r2, [sp, #8]
 8002540:	600b      	str	r3, [r1, #0]
 8002542:	9b03      	ldr	r3, [sp, #12]
 8002544:	4496      	add	lr, r2
 8002546:	4573      	cmp	r3, lr
 8002548:	4439      	add	r1, r7
 800254a:	d8bc      	bhi.n	80024c6 <arm_radix4_butterfly_q15+0x156>
 800254c:	9a06      	ldr	r2, [sp, #24]
 800254e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002550:	9b05      	ldr	r3, [sp, #20]
 8002552:	440a      	add	r2, r1
 8002554:	9206      	str	r2, [sp, #24]
 8002556:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002558:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800255a:	440a      	add	r2, r1
 800255c:	920a      	str	r2, [sp, #40]	; 0x28
 800255e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002562:	440a      	add	r2, r1
 8002564:	9209      	str	r2, [sp, #36]	; 0x24
 8002566:	9a08      	ldr	r2, [sp, #32]
 8002568:	3204      	adds	r2, #4
 800256a:	9208      	str	r2, [sp, #32]
 800256c:	9a07      	ldr	r2, [sp, #28]
 800256e:	3204      	adds	r2, #4
 8002570:	9207      	str	r2, [sp, #28]
 8002572:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002574:	3301      	adds	r3, #1
 8002576:	4293      	cmp	r3, r2
 8002578:	9305      	str	r3, [sp, #20]
 800257a:	d392      	bcc.n	80024a2 <arm_radix4_butterfly_q15+0x132>
 800257c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800257e:	9202      	str	r2, [sp, #8]
 8002580:	2a04      	cmp	r2, #4
 8002582:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002584:	f63f af6e 	bhi.w	8002464 <arm_radix4_butterfly_q15+0xf4>
 8002588:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800258a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	689f      	ldr	r7, [r3, #8]
 8002592:	68dc      	ldr	r4, [r3, #12]
 8002594:	fa92 f017 	qadd16	r0, r2, r7
 8002598:	fa91 f514 	qadd16	r5, r1, r4
 800259c:	fa90 f525 	shadd16	r5, r0, r5
 80025a0:	601d      	str	r5, [r3, #0]
 80025a2:	fa91 f514 	qadd16	r5, r1, r4
 80025a6:	fad0 f025 	shsub16	r0, r0, r5
 80025aa:	6058      	str	r0, [r3, #4]
 80025ac:	fad2 f217 	qsub16	r2, r2, r7
 80025b0:	fad1 f114 	qsub16	r1, r1, r4
 80025b4:	fae2 f021 	shsax	r0, r2, r1
 80025b8:	6098      	str	r0, [r3, #8]
 80025ba:	faa2 f221 	shasx	r2, r2, r1
 80025be:	3e01      	subs	r6, #1
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	f103 0310 	add.w	r3, r3, #16
 80025c6:	d1e1      	bne.n	800258c <arm_radix4_butterfly_q15+0x21c>
 80025c8:	b015      	add	sp, #84	; 0x54
 80025ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ce:	4616      	mov	r6, r2
 80025d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80025d2:	e7db      	b.n	800258c <arm_radix4_butterfly_q15+0x21c>
 80025d4:	ffff0000 	.word	0xffff0000

080025d8 <arm_radix4_butterfly_inverse_q15>:
 80025d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025dc:	088f      	lsrs	r7, r1, #2
 80025de:	b095      	sub	sp, #84	; 0x54
 80025e0:	00be      	lsls	r6, r7, #2
 80025e2:	4684      	mov	ip, r0
 80025e4:	9011      	str	r0, [sp, #68]	; 0x44
 80025e6:	4430      	add	r0, r6
 80025e8:	9103      	str	r1, [sp, #12]
 80025ea:	1984      	adds	r4, r0, r6
 80025ec:	2100      	movs	r1, #0
 80025ee:	4d93      	ldr	r5, [pc, #588]	; (800283c <arm_radix4_butterfly_inverse_q15+0x264>)
 80025f0:	9713      	str	r7, [sp, #76]	; 0x4c
 80025f2:	469a      	mov	sl, r3
 80025f4:	46b9      	mov	r9, r7
 80025f6:	9212      	str	r2, [sp, #72]	; 0x48
 80025f8:	4667      	mov	r7, ip
 80025fa:	4426      	add	r6, r4
 80025fc:	460b      	mov	r3, r1
 80025fe:	4694      	mov	ip, r2
 8002600:	f8d7 b000 	ldr.w	fp, [r7]
 8002604:	fa9b fb23 	shadd16	fp, fp, r3
 8002608:	fa9b fb23 	shadd16	fp, fp, r3
 800260c:	6822      	ldr	r2, [r4, #0]
 800260e:	fa92 f223 	shadd16	r2, r2, r3
 8002612:	fa92 f223 	shadd16	r2, r2, r3
 8002616:	fa9b fe12 	qadd16	lr, fp, r2
 800261a:	fadb fb12 	qsub16	fp, fp, r2
 800261e:	6802      	ldr	r2, [r0, #0]
 8002620:	fa92 f223 	shadd16	r2, r2, r3
 8002624:	fa92 f223 	shadd16	r2, r2, r3
 8002628:	f8d6 8000 	ldr.w	r8, [r6]
 800262c:	fa98 f823 	shadd16	r8, r8, r3
 8002630:	fa98 f823 	shadd16	r8, r8, r3
 8002634:	fa92 f218 	qadd16	r2, r2, r8
 8002638:	fa9e f822 	shadd16	r8, lr, r2
 800263c:	f847 8b04 	str.w	r8, [r7], #4
 8002640:	fade fe12 	qsub16	lr, lr, r2
 8002644:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8002648:	fb42 f80e 	smusd	r8, r2, lr
 800264c:	fb22 fe1e 	smuadx	lr, r2, lr
 8002650:	6802      	ldr	r2, [r0, #0]
 8002652:	fa92 f223 	shadd16	r2, r2, r3
 8002656:	fa92 f223 	shadd16	r2, r2, r3
 800265a:	ea0e 0e05 	and.w	lr, lr, r5
 800265e:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 8002662:	f840 eb04 	str.w	lr, [r0], #4
 8002666:	f8d6 e000 	ldr.w	lr, [r6]
 800266a:	fa9e fe23 	shadd16	lr, lr, r3
 800266e:	fa9e fe23 	shadd16	lr, lr, r3
 8002672:	fad2 f21e 	qsub16	r2, r2, lr
 8002676:	faeb f812 	qsax	r8, fp, r2
 800267a:	faab fb12 	qasx	fp, fp, r2
 800267e:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8002682:	fb42 fe0b 	smusd	lr, r2, fp
 8002686:	fb22 f21b 	smuadx	r2, r2, fp
 800268a:	402a      	ands	r2, r5
 800268c:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8002690:	f844 2b04 	str.w	r2, [r4], #4
 8002694:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002698:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800269c:	fb42 fe08 	smusd	lr, r2, r8
 80026a0:	fb22 f218 	smuadx	r2, r2, r8
 80026a4:	402a      	ands	r2, r5
 80026a6:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 80026aa:	f1b9 0901 	subs.w	r9, r9, #1
 80026ae:	f846 2b04 	str.w	r2, [r6], #4
 80026b2:	4451      	add	r1, sl
 80026b4:	d1a4      	bne.n	8002600 <arm_radix4_butterfly_inverse_q15+0x28>
 80026b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80026b8:	2a04      	cmp	r2, #4
 80026ba:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80026be:	f240 80ba 	bls.w	8002836 <arm_radix4_butterfly_inverse_q15+0x25e>
 80026c2:	f8df b178 	ldr.w	fp, [pc, #376]	; 800283c <arm_radix4_butterfly_inverse_q15+0x264>
 80026c6:	f8cd 9010 	str.w	r9, [sp, #16]
 80026ca:	9202      	str	r2, [sp, #8]
 80026cc:	9c02      	ldr	r4, [sp, #8]
 80026ce:	08a1      	lsrs	r1, r4, #2
 80026d0:	0088      	lsls	r0, r1, #2
 80026d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	900c      	str	r0, [sp, #48]	; 0x30
 80026da:	9803      	ldr	r0, [sp, #12]
 80026dc:	920f      	str	r2, [sp, #60]	; 0x3c
 80026de:	009a      	lsls	r2, r3, #2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4605      	mov	r5, r0
 80026e4:	930d      	str	r3, [sp, #52]	; 0x34
 80026e6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80026e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80026ea:	9110      	str	r1, [sp, #64]	; 0x40
 80026ec:	428d      	cmp	r5, r1
 80026ee:	bf28      	it	cs
 80026f0:	460d      	movcs	r5, r1
 80026f2:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 80026f6:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80026fa:	9306      	str	r3, [sp, #24]
 80026fc:	2300      	movs	r3, #0
 80026fe:	950e      	str	r5, [sp, #56]	; 0x38
 8002700:	9107      	str	r1, [sp, #28]
 8002702:	00a7      	lsls	r7, r4, #2
 8002704:	920b      	str	r2, [sp, #44]	; 0x2c
 8002706:	9008      	str	r0, [sp, #32]
 8002708:	9305      	str	r3, [sp, #20]
 800270a:	9b06      	ldr	r3, [sp, #24]
 800270c:	9a08      	ldr	r2, [sp, #32]
 800270e:	f8d3 a000 	ldr.w	sl, [r3]
 8002712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002714:	f8dd e014 	ldr.w	lr, [sp, #20]
 8002718:	f8d3 9000 	ldr.w	r9, [r3]
 800271c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800271e:	f8d3 8000 	ldr.w	r8, [r3]
 8002722:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002724:	4616      	mov	r6, r2
 8002726:	1898      	adds	r0, r3, r2
 8002728:	9a07      	ldr	r2, [sp, #28]
 800272a:	4615      	mov	r5, r2
 800272c:	1899      	adds	r1, r3, r2
 800272e:	6832      	ldr	r2, [r6, #0]
 8002730:	682c      	ldr	r4, [r5, #0]
 8002732:	fa92 f314 	qadd16	r3, r2, r4
 8002736:	fad2 f214 	qsub16	r2, r2, r4
 800273a:	6804      	ldr	r4, [r0, #0]
 800273c:	f8d1 c000 	ldr.w	ip, [r1]
 8002740:	fa94 f41c 	qadd16	r4, r4, ip
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	fa93 fc24 	shadd16	ip, r3, r4
 800274a:	9b04      	ldr	r3, [sp, #16]
 800274c:	fa9c fc23 	shadd16	ip, ip, r3
 8002750:	f8c6 c000 	str.w	ip, [r6]
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	443e      	add	r6, r7
 8002758:	fad3 f324 	shsub16	r3, r3, r4
 800275c:	fb49 fc03 	smusd	ip, r9, r3
 8002760:	fb29 f313 	smuadx	r3, r9, r3
 8002764:	ea03 030b 	and.w	r3, r3, fp
 8002768:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 800276c:	f8d0 c000 	ldr.w	ip, [r0]
 8002770:	6003      	str	r3, [r0, #0]
 8002772:	680c      	ldr	r4, [r1, #0]
 8002774:	4438      	add	r0, r7
 8002776:	fadc f414 	qsub16	r4, ip, r4
 800277a:	fae2 f324 	shsax	r3, r2, r4
 800277e:	faa2 f224 	shasx	r2, r2, r4
 8002782:	fb4a f402 	smusd	r4, sl, r2
 8002786:	fb2a f212 	smuadx	r2, sl, r2
 800278a:	ea02 020b 	and.w	r2, r2, fp
 800278e:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 8002792:	602a      	str	r2, [r5, #0]
 8002794:	443d      	add	r5, r7
 8002796:	fb48 f203 	smusd	r2, r8, r3
 800279a:	fb28 f313 	smuadx	r3, r8, r3
 800279e:	ea03 030b 	and.w	r3, r3, fp
 80027a2:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80027a6:	9a02      	ldr	r2, [sp, #8]
 80027a8:	600b      	str	r3, [r1, #0]
 80027aa:	9b03      	ldr	r3, [sp, #12]
 80027ac:	4496      	add	lr, r2
 80027ae:	4573      	cmp	r3, lr
 80027b0:	4439      	add	r1, r7
 80027b2:	d8bc      	bhi.n	800272e <arm_radix4_butterfly_inverse_q15+0x156>
 80027b4:	9a06      	ldr	r2, [sp, #24]
 80027b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80027b8:	9b05      	ldr	r3, [sp, #20]
 80027ba:	440a      	add	r2, r1
 80027bc:	9206      	str	r2, [sp, #24]
 80027be:	990d      	ldr	r1, [sp, #52]	; 0x34
 80027c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80027c2:	440a      	add	r2, r1
 80027c4:	920a      	str	r2, [sp, #40]	; 0x28
 80027c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80027c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80027ca:	440a      	add	r2, r1
 80027cc:	9209      	str	r2, [sp, #36]	; 0x24
 80027ce:	9a08      	ldr	r2, [sp, #32]
 80027d0:	3204      	adds	r2, #4
 80027d2:	9208      	str	r2, [sp, #32]
 80027d4:	9a07      	ldr	r2, [sp, #28]
 80027d6:	3204      	adds	r2, #4
 80027d8:	9207      	str	r2, [sp, #28]
 80027da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027dc:	3301      	adds	r3, #1
 80027de:	4293      	cmp	r3, r2
 80027e0:	9305      	str	r3, [sp, #20]
 80027e2:	d392      	bcc.n	800270a <arm_radix4_butterfly_inverse_q15+0x132>
 80027e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80027e6:	9202      	str	r2, [sp, #8]
 80027e8:	2a04      	cmp	r2, #4
 80027ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80027ec:	f63f af6e 	bhi.w	80026cc <arm_radix4_butterfly_inverse_q15+0xf4>
 80027f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80027f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	689f      	ldr	r7, [r3, #8]
 80027fa:	68dc      	ldr	r4, [r3, #12]
 80027fc:	fa92 f017 	qadd16	r0, r2, r7
 8002800:	fa91 f514 	qadd16	r5, r1, r4
 8002804:	fa90 f525 	shadd16	r5, r0, r5
 8002808:	601d      	str	r5, [r3, #0]
 800280a:	fa91 f514 	qadd16	r5, r1, r4
 800280e:	fad0 f025 	shsub16	r0, r0, r5
 8002812:	6058      	str	r0, [r3, #4]
 8002814:	fad2 f217 	qsub16	r2, r2, r7
 8002818:	fad1 f114 	qsub16	r1, r1, r4
 800281c:	faa2 f021 	shasx	r0, r2, r1
 8002820:	6098      	str	r0, [r3, #8]
 8002822:	fae2 f221 	shsax	r2, r2, r1
 8002826:	3e01      	subs	r6, #1
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	f103 0310 	add.w	r3, r3, #16
 800282e:	d1e1      	bne.n	80027f4 <arm_radix4_butterfly_inverse_q15+0x21c>
 8002830:	b015      	add	sp, #84	; 0x54
 8002832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002836:	4616      	mov	r6, r2
 8002838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800283a:	e7db      	b.n	80027f4 <arm_radix4_butterfly_inverse_q15+0x21c>
 800283c:	ffff0000 	.word	0xffff0000

08002840 <arm_bitreversal_16>:
 8002840:	b1f1      	cbz	r1, 8002880 <arm_bitreversal_16+0x40>
 8002842:	b4f0      	push	{r4, r5, r6, r7}
 8002844:	2400      	movs	r4, #0
 8002846:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800284a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800284e:	886d      	ldrh	r5, [r5, #2]
 8002850:	08ad      	lsrs	r5, r5, #2
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8002858:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 800285c:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8002860:	006e      	lsls	r6, r5, #1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8002868:	3302      	adds	r3, #2
 800286a:	1cb5      	adds	r5, r6, #2
 800286c:	3402      	adds	r4, #2
 800286e:	b2a4      	uxth	r4, r4
 8002870:	5ac6      	ldrh	r6, [r0, r3]
 8002872:	5b47      	ldrh	r7, [r0, r5]
 8002874:	52c7      	strh	r7, [r0, r3]
 8002876:	42a1      	cmp	r1, r4
 8002878:	5346      	strh	r6, [r0, r5]
 800287a:	d8e4      	bhi.n	8002846 <arm_bitreversal_16+0x6>
 800287c:	bcf0      	pop	{r4, r5, r6, r7}
 800287e:	4770      	bx	lr
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <__errno>:
 8002884:	4b01      	ldr	r3, [pc, #4]	; (800288c <__errno+0x8>)
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	2000000c 	.word	0x2000000c

08002890 <__libc_init_array>:
 8002890:	b570      	push	{r4, r5, r6, lr}
 8002892:	4d0d      	ldr	r5, [pc, #52]	; (80028c8 <__libc_init_array+0x38>)
 8002894:	4c0d      	ldr	r4, [pc, #52]	; (80028cc <__libc_init_array+0x3c>)
 8002896:	1b64      	subs	r4, r4, r5
 8002898:	10a4      	asrs	r4, r4, #2
 800289a:	2600      	movs	r6, #0
 800289c:	42a6      	cmp	r6, r4
 800289e:	d109      	bne.n	80028b4 <__libc_init_array+0x24>
 80028a0:	4d0b      	ldr	r5, [pc, #44]	; (80028d0 <__libc_init_array+0x40>)
 80028a2:	4c0c      	ldr	r4, [pc, #48]	; (80028d4 <__libc_init_array+0x44>)
 80028a4:	f000 fcaa 	bl	80031fc <_init>
 80028a8:	1b64      	subs	r4, r4, r5
 80028aa:	10a4      	asrs	r4, r4, #2
 80028ac:	2600      	movs	r6, #0
 80028ae:	42a6      	cmp	r6, r4
 80028b0:	d105      	bne.n	80028be <__libc_init_array+0x2e>
 80028b2:	bd70      	pop	{r4, r5, r6, pc}
 80028b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b8:	4798      	blx	r3
 80028ba:	3601      	adds	r6, #1
 80028bc:	e7ee      	b.n	800289c <__libc_init_array+0xc>
 80028be:	f855 3b04 	ldr.w	r3, [r5], #4
 80028c2:	4798      	blx	r3
 80028c4:	3601      	adds	r6, #1
 80028c6:	e7f2      	b.n	80028ae <__libc_init_array+0x1e>
 80028c8:	08015188 	.word	0x08015188
 80028cc:	08015188 	.word	0x08015188
 80028d0:	08015188 	.word	0x08015188
 80028d4:	0801518c 	.word	0x0801518c

080028d8 <__itoa>:
 80028d8:	1e93      	subs	r3, r2, #2
 80028da:	2b22      	cmp	r3, #34	; 0x22
 80028dc:	b510      	push	{r4, lr}
 80028de:	460c      	mov	r4, r1
 80028e0:	d904      	bls.n	80028ec <__itoa+0x14>
 80028e2:	2300      	movs	r3, #0
 80028e4:	700b      	strb	r3, [r1, #0]
 80028e6:	461c      	mov	r4, r3
 80028e8:	4620      	mov	r0, r4
 80028ea:	bd10      	pop	{r4, pc}
 80028ec:	2a0a      	cmp	r2, #10
 80028ee:	d109      	bne.n	8002904 <__itoa+0x2c>
 80028f0:	2800      	cmp	r0, #0
 80028f2:	da07      	bge.n	8002904 <__itoa+0x2c>
 80028f4:	232d      	movs	r3, #45	; 0x2d
 80028f6:	700b      	strb	r3, [r1, #0]
 80028f8:	4240      	negs	r0, r0
 80028fa:	2101      	movs	r1, #1
 80028fc:	4421      	add	r1, r4
 80028fe:	f000 f82d 	bl	800295c <__utoa>
 8002902:	e7f1      	b.n	80028e8 <__itoa+0x10>
 8002904:	2100      	movs	r1, #0
 8002906:	e7f9      	b.n	80028fc <__itoa+0x24>

08002908 <itoa>:
 8002908:	f7ff bfe6 	b.w	80028d8 <__itoa>

0800290c <memset>:
 800290c:	4402      	add	r2, r0
 800290e:	4603      	mov	r3, r0
 8002910:	4293      	cmp	r3, r2
 8002912:	d100      	bne.n	8002916 <memset+0xa>
 8002914:	4770      	bx	lr
 8002916:	f803 1b01 	strb.w	r1, [r3], #1
 800291a:	e7f9      	b.n	8002910 <memset+0x4>

0800291c <siprintf>:
 800291c:	b40e      	push	{r1, r2, r3}
 800291e:	b500      	push	{lr}
 8002920:	b09c      	sub	sp, #112	; 0x70
 8002922:	ab1d      	add	r3, sp, #116	; 0x74
 8002924:	9002      	str	r0, [sp, #8]
 8002926:	9006      	str	r0, [sp, #24]
 8002928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800292c:	4809      	ldr	r0, [pc, #36]	; (8002954 <siprintf+0x38>)
 800292e:	9107      	str	r1, [sp, #28]
 8002930:	9104      	str	r1, [sp, #16]
 8002932:	4909      	ldr	r1, [pc, #36]	; (8002958 <siprintf+0x3c>)
 8002934:	f853 2b04 	ldr.w	r2, [r3], #4
 8002938:	9105      	str	r1, [sp, #20]
 800293a:	6800      	ldr	r0, [r0, #0]
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	a902      	add	r1, sp, #8
 8002940:	f000 f8aa 	bl	8002a98 <_svfiprintf_r>
 8002944:	9b02      	ldr	r3, [sp, #8]
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
 800294a:	b01c      	add	sp, #112	; 0x70
 800294c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002950:	b003      	add	sp, #12
 8002952:	4770      	bx	lr
 8002954:	2000000c 	.word	0x2000000c
 8002958:	ffff0208 	.word	0xffff0208

0800295c <__utoa>:
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	4c1f      	ldr	r4, [pc, #124]	; (80029dc <__utoa+0x80>)
 8002960:	b08b      	sub	sp, #44	; 0x2c
 8002962:	4605      	mov	r5, r0
 8002964:	460b      	mov	r3, r1
 8002966:	466e      	mov	r6, sp
 8002968:	f104 0c20 	add.w	ip, r4, #32
 800296c:	6820      	ldr	r0, [r4, #0]
 800296e:	6861      	ldr	r1, [r4, #4]
 8002970:	4637      	mov	r7, r6
 8002972:	c703      	stmia	r7!, {r0, r1}
 8002974:	3408      	adds	r4, #8
 8002976:	4564      	cmp	r4, ip
 8002978:	463e      	mov	r6, r7
 800297a:	d1f7      	bne.n	800296c <__utoa+0x10>
 800297c:	7921      	ldrb	r1, [r4, #4]
 800297e:	7139      	strb	r1, [r7, #4]
 8002980:	1e91      	subs	r1, r2, #2
 8002982:	6820      	ldr	r0, [r4, #0]
 8002984:	6038      	str	r0, [r7, #0]
 8002986:	2922      	cmp	r1, #34	; 0x22
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	d904      	bls.n	8002998 <__utoa+0x3c>
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	460b      	mov	r3, r1
 8002992:	4618      	mov	r0, r3
 8002994:	b00b      	add	sp, #44	; 0x2c
 8002996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002998:	1e58      	subs	r0, r3, #1
 800299a:	4684      	mov	ip, r0
 800299c:	fbb5 f7f2 	udiv	r7, r5, r2
 80029a0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80029a4:	fb02 5617 	mls	r6, r2, r7, r5
 80029a8:	4476      	add	r6, lr
 80029aa:	460c      	mov	r4, r1
 80029ac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80029b0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80029b4:	462e      	mov	r6, r5
 80029b6:	42b2      	cmp	r2, r6
 80029b8:	f101 0101 	add.w	r1, r1, #1
 80029bc:	463d      	mov	r5, r7
 80029be:	d9ed      	bls.n	800299c <__utoa+0x40>
 80029c0:	2200      	movs	r2, #0
 80029c2:	545a      	strb	r2, [r3, r1]
 80029c4:	1919      	adds	r1, r3, r4
 80029c6:	1aa5      	subs	r5, r4, r2
 80029c8:	42aa      	cmp	r2, r5
 80029ca:	dae2      	bge.n	8002992 <__utoa+0x36>
 80029cc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80029d0:	780e      	ldrb	r6, [r1, #0]
 80029d2:	7006      	strb	r6, [r0, #0]
 80029d4:	3201      	adds	r2, #1
 80029d6:	f801 5901 	strb.w	r5, [r1], #-1
 80029da:	e7f4      	b.n	80029c6 <__utoa+0x6a>
 80029dc:	08015130 	.word	0x08015130

080029e0 <__ssputs_r>:
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	688e      	ldr	r6, [r1, #8]
 80029e6:	429e      	cmp	r6, r3
 80029e8:	4682      	mov	sl, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	4690      	mov	r8, r2
 80029ee:	461f      	mov	r7, r3
 80029f0:	d838      	bhi.n	8002a64 <__ssputs_r+0x84>
 80029f2:	898a      	ldrh	r2, [r1, #12]
 80029f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029f8:	d032      	beq.n	8002a60 <__ssputs_r+0x80>
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	6909      	ldr	r1, [r1, #16]
 80029fe:	eba5 0901 	sub.w	r9, r5, r1
 8002a02:	6965      	ldr	r5, [r4, #20]
 8002a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	444b      	add	r3, r9
 8002a10:	106d      	asrs	r5, r5, #1
 8002a12:	429d      	cmp	r5, r3
 8002a14:	bf38      	it	cc
 8002a16:	461d      	movcc	r5, r3
 8002a18:	0553      	lsls	r3, r2, #21
 8002a1a:	d531      	bpl.n	8002a80 <__ssputs_r+0xa0>
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	f000 fb47 	bl	80030b0 <_malloc_r>
 8002a22:	4606      	mov	r6, r0
 8002a24:	b950      	cbnz	r0, 8002a3c <__ssputs_r+0x5c>
 8002a26:	230c      	movs	r3, #12
 8002a28:	f8ca 3000 	str.w	r3, [sl]
 8002a2c:	89a3      	ldrh	r3, [r4, #12]
 8002a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a32:	81a3      	strh	r3, [r4, #12]
 8002a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3c:	6921      	ldr	r1, [r4, #16]
 8002a3e:	464a      	mov	r2, r9
 8002a40:	f000 fabe 	bl	8002fc0 <memcpy>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	6126      	str	r6, [r4, #16]
 8002a52:	6165      	str	r5, [r4, #20]
 8002a54:	444e      	add	r6, r9
 8002a56:	eba5 0509 	sub.w	r5, r5, r9
 8002a5a:	6026      	str	r6, [r4, #0]
 8002a5c:	60a5      	str	r5, [r4, #8]
 8002a5e:	463e      	mov	r6, r7
 8002a60:	42be      	cmp	r6, r7
 8002a62:	d900      	bls.n	8002a66 <__ssputs_r+0x86>
 8002a64:	463e      	mov	r6, r7
 8002a66:	4632      	mov	r2, r6
 8002a68:	6820      	ldr	r0, [r4, #0]
 8002a6a:	4641      	mov	r1, r8
 8002a6c:	f000 fab6 	bl	8002fdc <memmove>
 8002a70:	68a3      	ldr	r3, [r4, #8]
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	1b9b      	subs	r3, r3, r6
 8002a76:	4432      	add	r2, r6
 8002a78:	60a3      	str	r3, [r4, #8]
 8002a7a:	6022      	str	r2, [r4, #0]
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	e7db      	b.n	8002a38 <__ssputs_r+0x58>
 8002a80:	462a      	mov	r2, r5
 8002a82:	f000 fb6f 	bl	8003164 <_realloc_r>
 8002a86:	4606      	mov	r6, r0
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d1e1      	bne.n	8002a50 <__ssputs_r+0x70>
 8002a8c:	6921      	ldr	r1, [r4, #16]
 8002a8e:	4650      	mov	r0, sl
 8002a90:	f000 fabe 	bl	8003010 <_free_r>
 8002a94:	e7c7      	b.n	8002a26 <__ssputs_r+0x46>
	...

08002a98 <_svfiprintf_r>:
 8002a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9c:	4698      	mov	r8, r3
 8002a9e:	898b      	ldrh	r3, [r1, #12]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	b09d      	sub	sp, #116	; 0x74
 8002aa4:	4607      	mov	r7, r0
 8002aa6:	460d      	mov	r5, r1
 8002aa8:	4614      	mov	r4, r2
 8002aaa:	d50e      	bpl.n	8002aca <_svfiprintf_r+0x32>
 8002aac:	690b      	ldr	r3, [r1, #16]
 8002aae:	b963      	cbnz	r3, 8002aca <_svfiprintf_r+0x32>
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	f000 fafd 	bl	80030b0 <_malloc_r>
 8002ab6:	6028      	str	r0, [r5, #0]
 8002ab8:	6128      	str	r0, [r5, #16]
 8002aba:	b920      	cbnz	r0, 8002ac6 <_svfiprintf_r+0x2e>
 8002abc:	230c      	movs	r3, #12
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ac4:	e0d1      	b.n	8002c6a <_svfiprintf_r+0x1d2>
 8002ac6:	2340      	movs	r3, #64	; 0x40
 8002ac8:	616b      	str	r3, [r5, #20]
 8002aca:	2300      	movs	r3, #0
 8002acc:	9309      	str	r3, [sp, #36]	; 0x24
 8002ace:	2320      	movs	r3, #32
 8002ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ad8:	2330      	movs	r3, #48	; 0x30
 8002ada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c84 <_svfiprintf_r+0x1ec>
 8002ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002ae2:	f04f 0901 	mov.w	r9, #1
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	469a      	mov	sl, r3
 8002aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aee:	b10a      	cbz	r2, 8002af4 <_svfiprintf_r+0x5c>
 8002af0:	2a25      	cmp	r2, #37	; 0x25
 8002af2:	d1f9      	bne.n	8002ae8 <_svfiprintf_r+0x50>
 8002af4:	ebba 0b04 	subs.w	fp, sl, r4
 8002af8:	d00b      	beq.n	8002b12 <_svfiprintf_r+0x7a>
 8002afa:	465b      	mov	r3, fp
 8002afc:	4622      	mov	r2, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	4638      	mov	r0, r7
 8002b02:	f7ff ff6d 	bl	80029e0 <__ssputs_r>
 8002b06:	3001      	adds	r0, #1
 8002b08:	f000 80aa 	beq.w	8002c60 <_svfiprintf_r+0x1c8>
 8002b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b0e:	445a      	add	r2, fp
 8002b10:	9209      	str	r2, [sp, #36]	; 0x24
 8002b12:	f89a 3000 	ldrb.w	r3, [sl]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80a2 	beq.w	8002c60 <_svfiprintf_r+0x1c8>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b26:	f10a 0a01 	add.w	sl, sl, #1
 8002b2a:	9304      	str	r3, [sp, #16]
 8002b2c:	9307      	str	r3, [sp, #28]
 8002b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b32:	931a      	str	r3, [sp, #104]	; 0x68
 8002b34:	4654      	mov	r4, sl
 8002b36:	2205      	movs	r2, #5
 8002b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b3c:	4851      	ldr	r0, [pc, #324]	; (8002c84 <_svfiprintf_r+0x1ec>)
 8002b3e:	f7fd fb4f 	bl	80001e0 <memchr>
 8002b42:	9a04      	ldr	r2, [sp, #16]
 8002b44:	b9d8      	cbnz	r0, 8002b7e <_svfiprintf_r+0xe6>
 8002b46:	06d0      	lsls	r0, r2, #27
 8002b48:	bf44      	itt	mi
 8002b4a:	2320      	movmi	r3, #32
 8002b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b50:	0711      	lsls	r1, r2, #28
 8002b52:	bf44      	itt	mi
 8002b54:	232b      	movmi	r3, #43	; 0x2b
 8002b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002b60:	d015      	beq.n	8002b8e <_svfiprintf_r+0xf6>
 8002b62:	9a07      	ldr	r2, [sp, #28]
 8002b64:	4654      	mov	r4, sl
 8002b66:	2000      	movs	r0, #0
 8002b68:	f04f 0c0a 	mov.w	ip, #10
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b72:	3b30      	subs	r3, #48	; 0x30
 8002b74:	2b09      	cmp	r3, #9
 8002b76:	d94e      	bls.n	8002c16 <_svfiprintf_r+0x17e>
 8002b78:	b1b0      	cbz	r0, 8002ba8 <_svfiprintf_r+0x110>
 8002b7a:	9207      	str	r2, [sp, #28]
 8002b7c:	e014      	b.n	8002ba8 <_svfiprintf_r+0x110>
 8002b7e:	eba0 0308 	sub.w	r3, r0, r8
 8002b82:	fa09 f303 	lsl.w	r3, r9, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	9304      	str	r3, [sp, #16]
 8002b8a:	46a2      	mov	sl, r4
 8002b8c:	e7d2      	b.n	8002b34 <_svfiprintf_r+0x9c>
 8002b8e:	9b03      	ldr	r3, [sp, #12]
 8002b90:	1d19      	adds	r1, r3, #4
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	9103      	str	r1, [sp, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bfbb      	ittet	lt
 8002b9a:	425b      	neglt	r3, r3
 8002b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8002ba0:	9307      	strge	r3, [sp, #28]
 8002ba2:	9307      	strlt	r3, [sp, #28]
 8002ba4:	bfb8      	it	lt
 8002ba6:	9204      	strlt	r2, [sp, #16]
 8002ba8:	7823      	ldrb	r3, [r4, #0]
 8002baa:	2b2e      	cmp	r3, #46	; 0x2e
 8002bac:	d10c      	bne.n	8002bc8 <_svfiprintf_r+0x130>
 8002bae:	7863      	ldrb	r3, [r4, #1]
 8002bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002bb2:	d135      	bne.n	8002c20 <_svfiprintf_r+0x188>
 8002bb4:	9b03      	ldr	r3, [sp, #12]
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	9203      	str	r2, [sp, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bfb8      	it	lt
 8002bc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002bc4:	3402      	adds	r4, #2
 8002bc6:	9305      	str	r3, [sp, #20]
 8002bc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c94 <_svfiprintf_r+0x1fc>
 8002bcc:	7821      	ldrb	r1, [r4, #0]
 8002bce:	2203      	movs	r2, #3
 8002bd0:	4650      	mov	r0, sl
 8002bd2:	f7fd fb05 	bl	80001e0 <memchr>
 8002bd6:	b140      	cbz	r0, 8002bea <_svfiprintf_r+0x152>
 8002bd8:	2340      	movs	r3, #64	; 0x40
 8002bda:	eba0 000a 	sub.w	r0, r0, sl
 8002bde:	fa03 f000 	lsl.w	r0, r3, r0
 8002be2:	9b04      	ldr	r3, [sp, #16]
 8002be4:	4303      	orrs	r3, r0
 8002be6:	3401      	adds	r4, #1
 8002be8:	9304      	str	r3, [sp, #16]
 8002bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bee:	4826      	ldr	r0, [pc, #152]	; (8002c88 <_svfiprintf_r+0x1f0>)
 8002bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	f7fd faf3 	bl	80001e0 <memchr>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d038      	beq.n	8002c70 <_svfiprintf_r+0x1d8>
 8002bfe:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <_svfiprintf_r+0x1f4>)
 8002c00:	bb1b      	cbnz	r3, 8002c4a <_svfiprintf_r+0x1b2>
 8002c02:	9b03      	ldr	r3, [sp, #12]
 8002c04:	3307      	adds	r3, #7
 8002c06:	f023 0307 	bic.w	r3, r3, #7
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	9303      	str	r3, [sp, #12]
 8002c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c10:	4433      	add	r3, r6
 8002c12:	9309      	str	r3, [sp, #36]	; 0x24
 8002c14:	e767      	b.n	8002ae6 <_svfiprintf_r+0x4e>
 8002c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	e7a5      	b.n	8002b6c <_svfiprintf_r+0xd4>
 8002c20:	2300      	movs	r3, #0
 8002c22:	3401      	adds	r4, #1
 8002c24:	9305      	str	r3, [sp, #20]
 8002c26:	4619      	mov	r1, r3
 8002c28:	f04f 0c0a 	mov.w	ip, #10
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c32:	3a30      	subs	r2, #48	; 0x30
 8002c34:	2a09      	cmp	r2, #9
 8002c36:	d903      	bls.n	8002c40 <_svfiprintf_r+0x1a8>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0c5      	beq.n	8002bc8 <_svfiprintf_r+0x130>
 8002c3c:	9105      	str	r1, [sp, #20]
 8002c3e:	e7c3      	b.n	8002bc8 <_svfiprintf_r+0x130>
 8002c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c44:	4604      	mov	r4, r0
 8002c46:	2301      	movs	r3, #1
 8002c48:	e7f0      	b.n	8002c2c <_svfiprintf_r+0x194>
 8002c4a:	ab03      	add	r3, sp, #12
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	462a      	mov	r2, r5
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <_svfiprintf_r+0x1f8>)
 8002c52:	a904      	add	r1, sp, #16
 8002c54:	4638      	mov	r0, r7
 8002c56:	f3af 8000 	nop.w
 8002c5a:	1c42      	adds	r2, r0, #1
 8002c5c:	4606      	mov	r6, r0
 8002c5e:	d1d6      	bne.n	8002c0e <_svfiprintf_r+0x176>
 8002c60:	89ab      	ldrh	r3, [r5, #12]
 8002c62:	065b      	lsls	r3, r3, #25
 8002c64:	f53f af2c 	bmi.w	8002ac0 <_svfiprintf_r+0x28>
 8002c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c6a:	b01d      	add	sp, #116	; 0x74
 8002c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c70:	ab03      	add	r3, sp, #12
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	462a      	mov	r2, r5
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <_svfiprintf_r+0x1f8>)
 8002c78:	a904      	add	r1, sp, #16
 8002c7a:	4638      	mov	r0, r7
 8002c7c:	f000 f87a 	bl	8002d74 <_printf_i>
 8002c80:	e7eb      	b.n	8002c5a <_svfiprintf_r+0x1c2>
 8002c82:	bf00      	nop
 8002c84:	08015155 	.word	0x08015155
 8002c88:	0801515f 	.word	0x0801515f
 8002c8c:	00000000 	.word	0x00000000
 8002c90:	080029e1 	.word	0x080029e1
 8002c94:	0801515b 	.word	0x0801515b

08002c98 <_printf_common>:
 8002c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c9c:	4616      	mov	r6, r2
 8002c9e:	4699      	mov	r9, r3
 8002ca0:	688a      	ldr	r2, [r1, #8]
 8002ca2:	690b      	ldr	r3, [r1, #16]
 8002ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	bfb8      	it	lt
 8002cac:	4613      	movlt	r3, r2
 8002cae:	6033      	str	r3, [r6, #0]
 8002cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	b10a      	cbz	r2, 8002cbe <_printf_common+0x26>
 8002cba:	3301      	adds	r3, #1
 8002cbc:	6033      	str	r3, [r6, #0]
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	0699      	lsls	r1, r3, #26
 8002cc2:	bf42      	ittt	mi
 8002cc4:	6833      	ldrmi	r3, [r6, #0]
 8002cc6:	3302      	addmi	r3, #2
 8002cc8:	6033      	strmi	r3, [r6, #0]
 8002cca:	6825      	ldr	r5, [r4, #0]
 8002ccc:	f015 0506 	ands.w	r5, r5, #6
 8002cd0:	d106      	bne.n	8002ce0 <_printf_common+0x48>
 8002cd2:	f104 0a19 	add.w	sl, r4, #25
 8002cd6:	68e3      	ldr	r3, [r4, #12]
 8002cd8:	6832      	ldr	r2, [r6, #0]
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	42ab      	cmp	r3, r5
 8002cde:	dc26      	bgt.n	8002d2e <_printf_common+0x96>
 8002ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ce4:	1e13      	subs	r3, r2, #0
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	bf18      	it	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	0692      	lsls	r2, r2, #26
 8002cee:	d42b      	bmi.n	8002d48 <_printf_common+0xb0>
 8002cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4638      	mov	r0, r7
 8002cf8:	47c0      	blx	r8
 8002cfa:	3001      	adds	r0, #1
 8002cfc:	d01e      	beq.n	8002d3c <_printf_common+0xa4>
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	68e5      	ldr	r5, [r4, #12]
 8002d02:	6832      	ldr	r2, [r6, #0]
 8002d04:	f003 0306 	and.w	r3, r3, #6
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	bf08      	it	eq
 8002d0c:	1aad      	subeq	r5, r5, r2
 8002d0e:	68a3      	ldr	r3, [r4, #8]
 8002d10:	6922      	ldr	r2, [r4, #16]
 8002d12:	bf0c      	ite	eq
 8002d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d18:	2500      	movne	r5, #0
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	bfc4      	itt	gt
 8002d1e:	1a9b      	subgt	r3, r3, r2
 8002d20:	18ed      	addgt	r5, r5, r3
 8002d22:	2600      	movs	r6, #0
 8002d24:	341a      	adds	r4, #26
 8002d26:	42b5      	cmp	r5, r6
 8002d28:	d11a      	bne.n	8002d60 <_printf_common+0xc8>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e008      	b.n	8002d40 <_printf_common+0xa8>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	4652      	mov	r2, sl
 8002d32:	4649      	mov	r1, r9
 8002d34:	4638      	mov	r0, r7
 8002d36:	47c0      	blx	r8
 8002d38:	3001      	adds	r0, #1
 8002d3a:	d103      	bne.n	8002d44 <_printf_common+0xac>
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d44:	3501      	adds	r5, #1
 8002d46:	e7c6      	b.n	8002cd6 <_printf_common+0x3e>
 8002d48:	18e1      	adds	r1, r4, r3
 8002d4a:	1c5a      	adds	r2, r3, #1
 8002d4c:	2030      	movs	r0, #48	; 0x30
 8002d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d52:	4422      	add	r2, r4
 8002d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	e7c7      	b.n	8002cf0 <_printf_common+0x58>
 8002d60:	2301      	movs	r3, #1
 8002d62:	4622      	mov	r2, r4
 8002d64:	4649      	mov	r1, r9
 8002d66:	4638      	mov	r0, r7
 8002d68:	47c0      	blx	r8
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	d0e6      	beq.n	8002d3c <_printf_common+0xa4>
 8002d6e:	3601      	adds	r6, #1
 8002d70:	e7d9      	b.n	8002d26 <_printf_common+0x8e>
	...

08002d74 <_printf_i>:
 8002d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d78:	460c      	mov	r4, r1
 8002d7a:	4691      	mov	r9, r2
 8002d7c:	7e27      	ldrb	r7, [r4, #24]
 8002d7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d80:	2f78      	cmp	r7, #120	; 0x78
 8002d82:	4680      	mov	r8, r0
 8002d84:	469a      	mov	sl, r3
 8002d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d8a:	d807      	bhi.n	8002d9c <_printf_i+0x28>
 8002d8c:	2f62      	cmp	r7, #98	; 0x62
 8002d8e:	d80a      	bhi.n	8002da6 <_printf_i+0x32>
 8002d90:	2f00      	cmp	r7, #0
 8002d92:	f000 80d8 	beq.w	8002f46 <_printf_i+0x1d2>
 8002d96:	2f58      	cmp	r7, #88	; 0x58
 8002d98:	f000 80a3 	beq.w	8002ee2 <_printf_i+0x16e>
 8002d9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002da4:	e03a      	b.n	8002e1c <_printf_i+0xa8>
 8002da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002daa:	2b15      	cmp	r3, #21
 8002dac:	d8f6      	bhi.n	8002d9c <_printf_i+0x28>
 8002dae:	a001      	add	r0, pc, #4	; (adr r0, 8002db4 <_printf_i+0x40>)
 8002db0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002db4:	08002e0d 	.word	0x08002e0d
 8002db8:	08002e21 	.word	0x08002e21
 8002dbc:	08002d9d 	.word	0x08002d9d
 8002dc0:	08002d9d 	.word	0x08002d9d
 8002dc4:	08002d9d 	.word	0x08002d9d
 8002dc8:	08002d9d 	.word	0x08002d9d
 8002dcc:	08002e21 	.word	0x08002e21
 8002dd0:	08002d9d 	.word	0x08002d9d
 8002dd4:	08002d9d 	.word	0x08002d9d
 8002dd8:	08002d9d 	.word	0x08002d9d
 8002ddc:	08002d9d 	.word	0x08002d9d
 8002de0:	08002f2d 	.word	0x08002f2d
 8002de4:	08002e51 	.word	0x08002e51
 8002de8:	08002f0f 	.word	0x08002f0f
 8002dec:	08002d9d 	.word	0x08002d9d
 8002df0:	08002d9d 	.word	0x08002d9d
 8002df4:	08002f4f 	.word	0x08002f4f
 8002df8:	08002d9d 	.word	0x08002d9d
 8002dfc:	08002e51 	.word	0x08002e51
 8002e00:	08002d9d 	.word	0x08002d9d
 8002e04:	08002d9d 	.word	0x08002d9d
 8002e08:	08002f17 	.word	0x08002f17
 8002e0c:	680b      	ldr	r3, [r1, #0]
 8002e0e:	1d1a      	adds	r2, r3, #4
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	600a      	str	r2, [r1, #0]
 8002e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0a3      	b.n	8002f68 <_printf_i+0x1f4>
 8002e20:	6825      	ldr	r5, [r4, #0]
 8002e22:	6808      	ldr	r0, [r1, #0]
 8002e24:	062e      	lsls	r6, r5, #24
 8002e26:	f100 0304 	add.w	r3, r0, #4
 8002e2a:	d50a      	bpl.n	8002e42 <_printf_i+0xce>
 8002e2c:	6805      	ldr	r5, [r0, #0]
 8002e2e:	600b      	str	r3, [r1, #0]
 8002e30:	2d00      	cmp	r5, #0
 8002e32:	da03      	bge.n	8002e3c <_printf_i+0xc8>
 8002e34:	232d      	movs	r3, #45	; 0x2d
 8002e36:	426d      	negs	r5, r5
 8002e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e3c:	485e      	ldr	r0, [pc, #376]	; (8002fb8 <_printf_i+0x244>)
 8002e3e:	230a      	movs	r3, #10
 8002e40:	e019      	b.n	8002e76 <_printf_i+0x102>
 8002e42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002e46:	6805      	ldr	r5, [r0, #0]
 8002e48:	600b      	str	r3, [r1, #0]
 8002e4a:	bf18      	it	ne
 8002e4c:	b22d      	sxthne	r5, r5
 8002e4e:	e7ef      	b.n	8002e30 <_printf_i+0xbc>
 8002e50:	680b      	ldr	r3, [r1, #0]
 8002e52:	6825      	ldr	r5, [r4, #0]
 8002e54:	1d18      	adds	r0, r3, #4
 8002e56:	6008      	str	r0, [r1, #0]
 8002e58:	0628      	lsls	r0, r5, #24
 8002e5a:	d501      	bpl.n	8002e60 <_printf_i+0xec>
 8002e5c:	681d      	ldr	r5, [r3, #0]
 8002e5e:	e002      	b.n	8002e66 <_printf_i+0xf2>
 8002e60:	0669      	lsls	r1, r5, #25
 8002e62:	d5fb      	bpl.n	8002e5c <_printf_i+0xe8>
 8002e64:	881d      	ldrh	r5, [r3, #0]
 8002e66:	4854      	ldr	r0, [pc, #336]	; (8002fb8 <_printf_i+0x244>)
 8002e68:	2f6f      	cmp	r7, #111	; 0x6f
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2308      	moveq	r3, #8
 8002e6e:	230a      	movne	r3, #10
 8002e70:	2100      	movs	r1, #0
 8002e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e76:	6866      	ldr	r6, [r4, #4]
 8002e78:	60a6      	str	r6, [r4, #8]
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	bfa2      	ittt	ge
 8002e7e:	6821      	ldrge	r1, [r4, #0]
 8002e80:	f021 0104 	bicge.w	r1, r1, #4
 8002e84:	6021      	strge	r1, [r4, #0]
 8002e86:	b90d      	cbnz	r5, 8002e8c <_printf_i+0x118>
 8002e88:	2e00      	cmp	r6, #0
 8002e8a:	d04d      	beq.n	8002f28 <_printf_i+0x1b4>
 8002e8c:	4616      	mov	r6, r2
 8002e8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e92:	fb03 5711 	mls	r7, r3, r1, r5
 8002e96:	5dc7      	ldrb	r7, [r0, r7]
 8002e98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e9c:	462f      	mov	r7, r5
 8002e9e:	42bb      	cmp	r3, r7
 8002ea0:	460d      	mov	r5, r1
 8002ea2:	d9f4      	bls.n	8002e8e <_printf_i+0x11a>
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d10b      	bne.n	8002ec0 <_printf_i+0x14c>
 8002ea8:	6823      	ldr	r3, [r4, #0]
 8002eaa:	07df      	lsls	r7, r3, #31
 8002eac:	d508      	bpl.n	8002ec0 <_printf_i+0x14c>
 8002eae:	6923      	ldr	r3, [r4, #16]
 8002eb0:	6861      	ldr	r1, [r4, #4]
 8002eb2:	4299      	cmp	r1, r3
 8002eb4:	bfde      	ittt	le
 8002eb6:	2330      	movle	r3, #48	; 0x30
 8002eb8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ebc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002ec0:	1b92      	subs	r2, r2, r6
 8002ec2:	6122      	str	r2, [r4, #16]
 8002ec4:	f8cd a000 	str.w	sl, [sp]
 8002ec8:	464b      	mov	r3, r9
 8002eca:	aa03      	add	r2, sp, #12
 8002ecc:	4621      	mov	r1, r4
 8002ece:	4640      	mov	r0, r8
 8002ed0:	f7ff fee2 	bl	8002c98 <_printf_common>
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	d14c      	bne.n	8002f72 <_printf_i+0x1fe>
 8002ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002edc:	b004      	add	sp, #16
 8002ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee2:	4835      	ldr	r0, [pc, #212]	; (8002fb8 <_printf_i+0x244>)
 8002ee4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ee8:	6823      	ldr	r3, [r4, #0]
 8002eea:	680e      	ldr	r6, [r1, #0]
 8002eec:	061f      	lsls	r7, r3, #24
 8002eee:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ef2:	600e      	str	r6, [r1, #0]
 8002ef4:	d514      	bpl.n	8002f20 <_printf_i+0x1ac>
 8002ef6:	07d9      	lsls	r1, r3, #31
 8002ef8:	bf44      	itt	mi
 8002efa:	f043 0320 	orrmi.w	r3, r3, #32
 8002efe:	6023      	strmi	r3, [r4, #0]
 8002f00:	b91d      	cbnz	r5, 8002f0a <_printf_i+0x196>
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	f023 0320 	bic.w	r3, r3, #32
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	2310      	movs	r3, #16
 8002f0c:	e7b0      	b.n	8002e70 <_printf_i+0xfc>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	f043 0320 	orr.w	r3, r3, #32
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	2378      	movs	r3, #120	; 0x78
 8002f18:	4828      	ldr	r0, [pc, #160]	; (8002fbc <_printf_i+0x248>)
 8002f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f1e:	e7e3      	b.n	8002ee8 <_printf_i+0x174>
 8002f20:	065e      	lsls	r6, r3, #25
 8002f22:	bf48      	it	mi
 8002f24:	b2ad      	uxthmi	r5, r5
 8002f26:	e7e6      	b.n	8002ef6 <_printf_i+0x182>
 8002f28:	4616      	mov	r6, r2
 8002f2a:	e7bb      	b.n	8002ea4 <_printf_i+0x130>
 8002f2c:	680b      	ldr	r3, [r1, #0]
 8002f2e:	6826      	ldr	r6, [r4, #0]
 8002f30:	6960      	ldr	r0, [r4, #20]
 8002f32:	1d1d      	adds	r5, r3, #4
 8002f34:	600d      	str	r5, [r1, #0]
 8002f36:	0635      	lsls	r5, r6, #24
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	d501      	bpl.n	8002f40 <_printf_i+0x1cc>
 8002f3c:	6018      	str	r0, [r3, #0]
 8002f3e:	e002      	b.n	8002f46 <_printf_i+0x1d2>
 8002f40:	0671      	lsls	r1, r6, #25
 8002f42:	d5fb      	bpl.n	8002f3c <_printf_i+0x1c8>
 8002f44:	8018      	strh	r0, [r3, #0]
 8002f46:	2300      	movs	r3, #0
 8002f48:	6123      	str	r3, [r4, #16]
 8002f4a:	4616      	mov	r6, r2
 8002f4c:	e7ba      	b.n	8002ec4 <_printf_i+0x150>
 8002f4e:	680b      	ldr	r3, [r1, #0]
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	600a      	str	r2, [r1, #0]
 8002f54:	681e      	ldr	r6, [r3, #0]
 8002f56:	6862      	ldr	r2, [r4, #4]
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f7fd f940 	bl	80001e0 <memchr>
 8002f60:	b108      	cbz	r0, 8002f66 <_printf_i+0x1f2>
 8002f62:	1b80      	subs	r0, r0, r6
 8002f64:	6060      	str	r0, [r4, #4]
 8002f66:	6863      	ldr	r3, [r4, #4]
 8002f68:	6123      	str	r3, [r4, #16]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f70:	e7a8      	b.n	8002ec4 <_printf_i+0x150>
 8002f72:	6923      	ldr	r3, [r4, #16]
 8002f74:	4632      	mov	r2, r6
 8002f76:	4649      	mov	r1, r9
 8002f78:	4640      	mov	r0, r8
 8002f7a:	47d0      	blx	sl
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d0ab      	beq.n	8002ed8 <_printf_i+0x164>
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	079b      	lsls	r3, r3, #30
 8002f84:	d413      	bmi.n	8002fae <_printf_i+0x23a>
 8002f86:	68e0      	ldr	r0, [r4, #12]
 8002f88:	9b03      	ldr	r3, [sp, #12]
 8002f8a:	4298      	cmp	r0, r3
 8002f8c:	bfb8      	it	lt
 8002f8e:	4618      	movlt	r0, r3
 8002f90:	e7a4      	b.n	8002edc <_printf_i+0x168>
 8002f92:	2301      	movs	r3, #1
 8002f94:	4632      	mov	r2, r6
 8002f96:	4649      	mov	r1, r9
 8002f98:	4640      	mov	r0, r8
 8002f9a:	47d0      	blx	sl
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d09b      	beq.n	8002ed8 <_printf_i+0x164>
 8002fa0:	3501      	adds	r5, #1
 8002fa2:	68e3      	ldr	r3, [r4, #12]
 8002fa4:	9903      	ldr	r1, [sp, #12]
 8002fa6:	1a5b      	subs	r3, r3, r1
 8002fa8:	42ab      	cmp	r3, r5
 8002faa:	dcf2      	bgt.n	8002f92 <_printf_i+0x21e>
 8002fac:	e7eb      	b.n	8002f86 <_printf_i+0x212>
 8002fae:	2500      	movs	r5, #0
 8002fb0:	f104 0619 	add.w	r6, r4, #25
 8002fb4:	e7f5      	b.n	8002fa2 <_printf_i+0x22e>
 8002fb6:	bf00      	nop
 8002fb8:	08015166 	.word	0x08015166
 8002fbc:	08015177 	.word	0x08015177

08002fc0 <memcpy>:
 8002fc0:	440a      	add	r2, r1
 8002fc2:	4291      	cmp	r1, r2
 8002fc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002fc8:	d100      	bne.n	8002fcc <memcpy+0xc>
 8002fca:	4770      	bx	lr
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fd6:	4291      	cmp	r1, r2
 8002fd8:	d1f9      	bne.n	8002fce <memcpy+0xe>
 8002fda:	bd10      	pop	{r4, pc}

08002fdc <memmove>:
 8002fdc:	4288      	cmp	r0, r1
 8002fde:	b510      	push	{r4, lr}
 8002fe0:	eb01 0402 	add.w	r4, r1, r2
 8002fe4:	d902      	bls.n	8002fec <memmove+0x10>
 8002fe6:	4284      	cmp	r4, r0
 8002fe8:	4623      	mov	r3, r4
 8002fea:	d807      	bhi.n	8002ffc <memmove+0x20>
 8002fec:	1e43      	subs	r3, r0, #1
 8002fee:	42a1      	cmp	r1, r4
 8002ff0:	d008      	beq.n	8003004 <memmove+0x28>
 8002ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ffa:	e7f8      	b.n	8002fee <memmove+0x12>
 8002ffc:	4402      	add	r2, r0
 8002ffe:	4601      	mov	r1, r0
 8003000:	428a      	cmp	r2, r1
 8003002:	d100      	bne.n	8003006 <memmove+0x2a>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800300a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800300e:	e7f7      	b.n	8003000 <memmove+0x24>

08003010 <_free_r>:
 8003010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003012:	2900      	cmp	r1, #0
 8003014:	d048      	beq.n	80030a8 <_free_r+0x98>
 8003016:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800301a:	9001      	str	r0, [sp, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	f1a1 0404 	sub.w	r4, r1, #4
 8003022:	bfb8      	it	lt
 8003024:	18e4      	addlt	r4, r4, r3
 8003026:	f000 f8d3 	bl	80031d0 <__malloc_lock>
 800302a:	4a20      	ldr	r2, [pc, #128]	; (80030ac <_free_r+0x9c>)
 800302c:	9801      	ldr	r0, [sp, #4]
 800302e:	6813      	ldr	r3, [r2, #0]
 8003030:	4615      	mov	r5, r2
 8003032:	b933      	cbnz	r3, 8003042 <_free_r+0x32>
 8003034:	6063      	str	r3, [r4, #4]
 8003036:	6014      	str	r4, [r2, #0]
 8003038:	b003      	add	sp, #12
 800303a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800303e:	f000 b8cd 	b.w	80031dc <__malloc_unlock>
 8003042:	42a3      	cmp	r3, r4
 8003044:	d90b      	bls.n	800305e <_free_r+0x4e>
 8003046:	6821      	ldr	r1, [r4, #0]
 8003048:	1862      	adds	r2, r4, r1
 800304a:	4293      	cmp	r3, r2
 800304c:	bf04      	itt	eq
 800304e:	681a      	ldreq	r2, [r3, #0]
 8003050:	685b      	ldreq	r3, [r3, #4]
 8003052:	6063      	str	r3, [r4, #4]
 8003054:	bf04      	itt	eq
 8003056:	1852      	addeq	r2, r2, r1
 8003058:	6022      	streq	r2, [r4, #0]
 800305a:	602c      	str	r4, [r5, #0]
 800305c:	e7ec      	b.n	8003038 <_free_r+0x28>
 800305e:	461a      	mov	r2, r3
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	b10b      	cbz	r3, 8003068 <_free_r+0x58>
 8003064:	42a3      	cmp	r3, r4
 8003066:	d9fa      	bls.n	800305e <_free_r+0x4e>
 8003068:	6811      	ldr	r1, [r2, #0]
 800306a:	1855      	adds	r5, r2, r1
 800306c:	42a5      	cmp	r5, r4
 800306e:	d10b      	bne.n	8003088 <_free_r+0x78>
 8003070:	6824      	ldr	r4, [r4, #0]
 8003072:	4421      	add	r1, r4
 8003074:	1854      	adds	r4, r2, r1
 8003076:	42a3      	cmp	r3, r4
 8003078:	6011      	str	r1, [r2, #0]
 800307a:	d1dd      	bne.n	8003038 <_free_r+0x28>
 800307c:	681c      	ldr	r4, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	6053      	str	r3, [r2, #4]
 8003082:	4421      	add	r1, r4
 8003084:	6011      	str	r1, [r2, #0]
 8003086:	e7d7      	b.n	8003038 <_free_r+0x28>
 8003088:	d902      	bls.n	8003090 <_free_r+0x80>
 800308a:	230c      	movs	r3, #12
 800308c:	6003      	str	r3, [r0, #0]
 800308e:	e7d3      	b.n	8003038 <_free_r+0x28>
 8003090:	6825      	ldr	r5, [r4, #0]
 8003092:	1961      	adds	r1, r4, r5
 8003094:	428b      	cmp	r3, r1
 8003096:	bf04      	itt	eq
 8003098:	6819      	ldreq	r1, [r3, #0]
 800309a:	685b      	ldreq	r3, [r3, #4]
 800309c:	6063      	str	r3, [r4, #4]
 800309e:	bf04      	itt	eq
 80030a0:	1949      	addeq	r1, r1, r5
 80030a2:	6021      	streq	r1, [r4, #0]
 80030a4:	6054      	str	r4, [r2, #4]
 80030a6:	e7c7      	b.n	8003038 <_free_r+0x28>
 80030a8:	b003      	add	sp, #12
 80030aa:	bd30      	pop	{r4, r5, pc}
 80030ac:	20000090 	.word	0x20000090

080030b0 <_malloc_r>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	1ccd      	adds	r5, r1, #3
 80030b4:	f025 0503 	bic.w	r5, r5, #3
 80030b8:	3508      	adds	r5, #8
 80030ba:	2d0c      	cmp	r5, #12
 80030bc:	bf38      	it	cc
 80030be:	250c      	movcc	r5, #12
 80030c0:	2d00      	cmp	r5, #0
 80030c2:	4606      	mov	r6, r0
 80030c4:	db01      	blt.n	80030ca <_malloc_r+0x1a>
 80030c6:	42a9      	cmp	r1, r5
 80030c8:	d903      	bls.n	80030d2 <_malloc_r+0x22>
 80030ca:	230c      	movs	r3, #12
 80030cc:	6033      	str	r3, [r6, #0]
 80030ce:	2000      	movs	r0, #0
 80030d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d2:	f000 f87d 	bl	80031d0 <__malloc_lock>
 80030d6:	4921      	ldr	r1, [pc, #132]	; (800315c <_malloc_r+0xac>)
 80030d8:	680a      	ldr	r2, [r1, #0]
 80030da:	4614      	mov	r4, r2
 80030dc:	b99c      	cbnz	r4, 8003106 <_malloc_r+0x56>
 80030de:	4f20      	ldr	r7, [pc, #128]	; (8003160 <_malloc_r+0xb0>)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b923      	cbnz	r3, 80030ee <_malloc_r+0x3e>
 80030e4:	4621      	mov	r1, r4
 80030e6:	4630      	mov	r0, r6
 80030e8:	f000 f862 	bl	80031b0 <_sbrk_r>
 80030ec:	6038      	str	r0, [r7, #0]
 80030ee:	4629      	mov	r1, r5
 80030f0:	4630      	mov	r0, r6
 80030f2:	f000 f85d 	bl	80031b0 <_sbrk_r>
 80030f6:	1c43      	adds	r3, r0, #1
 80030f8:	d123      	bne.n	8003142 <_malloc_r+0x92>
 80030fa:	230c      	movs	r3, #12
 80030fc:	6033      	str	r3, [r6, #0]
 80030fe:	4630      	mov	r0, r6
 8003100:	f000 f86c 	bl	80031dc <__malloc_unlock>
 8003104:	e7e3      	b.n	80030ce <_malloc_r+0x1e>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	1b5b      	subs	r3, r3, r5
 800310a:	d417      	bmi.n	800313c <_malloc_r+0x8c>
 800310c:	2b0b      	cmp	r3, #11
 800310e:	d903      	bls.n	8003118 <_malloc_r+0x68>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	441c      	add	r4, r3
 8003114:	6025      	str	r5, [r4, #0]
 8003116:	e004      	b.n	8003122 <_malloc_r+0x72>
 8003118:	6863      	ldr	r3, [r4, #4]
 800311a:	42a2      	cmp	r2, r4
 800311c:	bf0c      	ite	eq
 800311e:	600b      	streq	r3, [r1, #0]
 8003120:	6053      	strne	r3, [r2, #4]
 8003122:	4630      	mov	r0, r6
 8003124:	f000 f85a 	bl	80031dc <__malloc_unlock>
 8003128:	f104 000b 	add.w	r0, r4, #11
 800312c:	1d23      	adds	r3, r4, #4
 800312e:	f020 0007 	bic.w	r0, r0, #7
 8003132:	1ac2      	subs	r2, r0, r3
 8003134:	d0cc      	beq.n	80030d0 <_malloc_r+0x20>
 8003136:	1a1b      	subs	r3, r3, r0
 8003138:	50a3      	str	r3, [r4, r2]
 800313a:	e7c9      	b.n	80030d0 <_malloc_r+0x20>
 800313c:	4622      	mov	r2, r4
 800313e:	6864      	ldr	r4, [r4, #4]
 8003140:	e7cc      	b.n	80030dc <_malloc_r+0x2c>
 8003142:	1cc4      	adds	r4, r0, #3
 8003144:	f024 0403 	bic.w	r4, r4, #3
 8003148:	42a0      	cmp	r0, r4
 800314a:	d0e3      	beq.n	8003114 <_malloc_r+0x64>
 800314c:	1a21      	subs	r1, r4, r0
 800314e:	4630      	mov	r0, r6
 8003150:	f000 f82e 	bl	80031b0 <_sbrk_r>
 8003154:	3001      	adds	r0, #1
 8003156:	d1dd      	bne.n	8003114 <_malloc_r+0x64>
 8003158:	e7cf      	b.n	80030fa <_malloc_r+0x4a>
 800315a:	bf00      	nop
 800315c:	20000090 	.word	0x20000090
 8003160:	20000094 	.word	0x20000094

08003164 <_realloc_r>:
 8003164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003166:	4607      	mov	r7, r0
 8003168:	4614      	mov	r4, r2
 800316a:	460e      	mov	r6, r1
 800316c:	b921      	cbnz	r1, 8003178 <_realloc_r+0x14>
 800316e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003172:	4611      	mov	r1, r2
 8003174:	f7ff bf9c 	b.w	80030b0 <_malloc_r>
 8003178:	b922      	cbnz	r2, 8003184 <_realloc_r+0x20>
 800317a:	f7ff ff49 	bl	8003010 <_free_r>
 800317e:	4625      	mov	r5, r4
 8003180:	4628      	mov	r0, r5
 8003182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003184:	f000 f830 	bl	80031e8 <_malloc_usable_size_r>
 8003188:	42a0      	cmp	r0, r4
 800318a:	d20f      	bcs.n	80031ac <_realloc_r+0x48>
 800318c:	4621      	mov	r1, r4
 800318e:	4638      	mov	r0, r7
 8003190:	f7ff ff8e 	bl	80030b0 <_malloc_r>
 8003194:	4605      	mov	r5, r0
 8003196:	2800      	cmp	r0, #0
 8003198:	d0f2      	beq.n	8003180 <_realloc_r+0x1c>
 800319a:	4631      	mov	r1, r6
 800319c:	4622      	mov	r2, r4
 800319e:	f7ff ff0f 	bl	8002fc0 <memcpy>
 80031a2:	4631      	mov	r1, r6
 80031a4:	4638      	mov	r0, r7
 80031a6:	f7ff ff33 	bl	8003010 <_free_r>
 80031aa:	e7e9      	b.n	8003180 <_realloc_r+0x1c>
 80031ac:	4635      	mov	r5, r6
 80031ae:	e7e7      	b.n	8003180 <_realloc_r+0x1c>

080031b0 <_sbrk_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4d06      	ldr	r5, [pc, #24]	; (80031cc <_sbrk_r+0x1c>)
 80031b4:	2300      	movs	r3, #0
 80031b6:	4604      	mov	r4, r0
 80031b8:	4608      	mov	r0, r1
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7fd fde4 	bl	8000d88 <_sbrk>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_sbrk_r+0x1a>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_sbrk_r+0x1a>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	2000009c 	.word	0x2000009c

080031d0 <__malloc_lock>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__malloc_lock+0x8>)
 80031d2:	f000 b811 	b.w	80031f8 <__retarget_lock_acquire_recursive>
 80031d6:	bf00      	nop
 80031d8:	200000a4 	.word	0x200000a4

080031dc <__malloc_unlock>:
 80031dc:	4801      	ldr	r0, [pc, #4]	; (80031e4 <__malloc_unlock+0x8>)
 80031de:	f000 b80c 	b.w	80031fa <__retarget_lock_release_recursive>
 80031e2:	bf00      	nop
 80031e4:	200000a4 	.word	0x200000a4

080031e8 <_malloc_usable_size_r>:
 80031e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031ec:	1f18      	subs	r0, r3, #4
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bfbc      	itt	lt
 80031f2:	580b      	ldrlt	r3, [r1, r0]
 80031f4:	18c0      	addlt	r0, r0, r3
 80031f6:	4770      	bx	lr

080031f8 <__retarget_lock_acquire_recursive>:
 80031f8:	4770      	bx	lr

080031fa <__retarget_lock_release_recursive>:
 80031fa:	4770      	bx	lr

080031fc <_init>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr

08003208 <_fini>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr
